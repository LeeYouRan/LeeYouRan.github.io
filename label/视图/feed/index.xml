<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>视图 &#8211; 个人随笔</title>
	<atom:link href="/label/%E8%A7%86%E5%9B%BE/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Sat, 09 Jun 2018 01:14:00 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.1</generator>

<image>
	<url>/wp-content/uploads/2022/01/cropped-截屏2022-01-01-18.57.09-32x32.png</url>
	<title>视图 &#8211; 个人随笔</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>TP5.0（一）部署、控制器、模块、命令行、路由、视图、模板赋值、常用标签、搭建后台首页、搭建登录页、页面跳转与重定向、Request 对象</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/7391.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/7391.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 09 Jun 2018 00:44:26 +0000</pubDate>
				<category><![CDATA[TP5.0]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[Request 对象]]></category>
		<category><![CDATA[命令行]]></category>
		<category><![CDATA[常用标签]]></category>
		<category><![CDATA[控制器]]></category>
		<category><![CDATA[搭建后台首页]]></category>
		<category><![CDATA[搭建登录页]]></category>
		<category><![CDATA[模块]]></category>
		<category><![CDATA[模板赋值]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[路由]]></category>
		<category><![CDATA[部署]]></category>
		<category><![CDATA[页面跳转与重定向]]></category>
		<guid isPermaLink="false">/?p=7391</guid>

					<description><![CDATA[一、框架概述 1、什么是框架 框架即英文名为Framework,它是许多代码文件的集合，这些代码文件是程序结构 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>一、框架概述</h1>
<h2>1、什么是框架</h2>
<p>框架即英文名为Framework,它是许多代码文件的集合，这些代码文件是程序结构的代码，不是业务代码，里面包含了许多函数、类库(分页类、验证码类、文件上传类、DB类、Image类&#8230;)、设计模式(mvc、单例、AR..)等。</p>
<p>以后使用框架开发项目只需要写业务代码即可。</p>
<p>现在企业中开发模式基本有三种:</p>
<p>从快到慢排序：二次开发(需要修改源码)&#8212;&gt;框架开发&#8212;-&gt;源码开发</p>
<p>源码开发建房子：从0开始，打地基.、浇筑水泥、、</p>
<p>框架开发建房子：相当于毛坯房,各种装修。</p>
<p>源码开发建房子：相当于精装修的房子，只需要拎包入住.</p>
<p>现在企业开发较多的模式属框架开发。</p>
<h2>2、框架开发的好处</h2>
<ul>
<li>框架能节省开发时间</li>
</ul>
<p>每个项目中常用的类库框架都已经封装好，如分页类、图像类,文件上传类等，直接调用即可,非常方便。（减少重复造轮子）</p>
<ul>
<li>利于团队的合作开发</li>
</ul>
<p>因为框架都是mvc设计模式,模块划分清晰，可以帮助我们快速、稳定、高效搭建web应用，从而提高开发效率。</p>
<ul>
<li>使用框架的过程中可以使得我们的注意力全部集中在业务层面，而无需关心程序的底层架构。</li>
</ul>
<h2>3、框架的设计模式(MVC)</h2>
<p>基本现在主流的框架(CI、TP、laravel、YII、zend framework、symfony、cakephp),都是采用单一入口(index.php),且都是采用mvc的设计模式，把一个web应用程序分为三块,控制器、模型、视图。</p>
<p>C-Controller 控制器</p>
<p>主要作用:就是接收用户的请求,在模型和视图之间起一个调度的作用</p>
<p>M-Model 模型</p>
<p>作用:对数据库做增删改查(curd)的</p>
<p>V-View视图</p>
<p>展示模板内容,给用户一个可操作的界面</p>
<p><strong>mvc(框架)形象理解-酒店（难以理解的东西一定要把抽象的东西给生活化）：</strong></p>
<p><img fetchpriority="high" decoding="async" width="1185" height="451" class="wp-image-7392" src="/wp-content/uploads/2018/06/word-image.png" srcset="/wp-content/uploads/2018/06/word-image.png 1185w, /wp-content/uploads/2018/06/word-image-300x114.png 300w, /wp-content/uploads/2018/06/word-image-768x292.png 768w, /wp-content/uploads/2018/06/word-image-1024x390.png 1024w" sizes="(max-width: 1185px) 100vw, 1185px" /></p>
<h2>常见的php开发框架</h2>
<h3>ThinkPHP框架（TP框架）</h3>
<p>TP框架的logo：</p>
<p><img decoding="async" width="102" height="70" class="wp-image-7393" src="/wp-content/uploads/2018/06/word-image-1.png" /></p>
<p>主要开发中小型项目</p>
<p>ThinkPHP框架是我们国人开发采用mvc模式设计的一款比较优秀的框架。在我们国内使用量较多，且开发文档也多，方便学习。</p>
<h3>（2）CodeIgniter 框架</h3>
<p>CodeIgniter框架：简称CI框架,</p>
<p>主要开发中小型项目</p>
<p><img decoding="async" width="823" height="376" class="wp-image-7394" src="/wp-content/uploads/2018/06/word-image-2.png" srcset="/wp-content/uploads/2018/06/word-image-2.png 823w, /wp-content/uploads/2018/06/word-image-2-300x137.png 300w, /wp-content/uploads/2018/06/word-image-2-768x351.png 768w" sizes="(max-width: 823px) 100vw, 823px" /></p>
<h3>YII(易框架)</h3>
<p>YII(简称易框架):主要开发大型的web应用程序:</p>
<p><img loading="lazy" decoding="async" width="818" height="417" class="wp-image-7395" src="/wp-content/uploads/2018/06/word-image-3.png" srcset="/wp-content/uploads/2018/06/word-image-3.png 818w, /wp-content/uploads/2018/06/word-image-3-300x153.png 300w, /wp-content/uploads/2018/06/word-image-3-768x392.png 768w" sizes="(max-width: 818px) 100vw, 818px" /></p>
<h3>Laravel框架</h3>
<p>此框架使用量世界排名第一,有最”优雅”的框架称号。</p>
<p>注：Laravel底层代码很多都是借鉴了SymFony的优点。</p>
<p><img loading="lazy" decoding="async" width="727" height="477" class="wp-image-7396" src="/wp-content/uploads/2018/06/word-image-4.png" srcset="/wp-content/uploads/2018/06/word-image-4.png 727w, /wp-content/uploads/2018/06/word-image-4-300x197.png 300w" sizes="(max-width: 727px) 100vw, 727px" /></p>
<p>&nbsp;</p>
<h3>（5）Zend官方框架</h3>
<p>Zend Framework：php官方提供的框架，非常笨重，主要开发大型的web应用程序。</p>
<p><img loading="lazy" decoding="async" width="729" height="346" class="wp-image-7397" src="/wp-content/uploads/2018/06/word-image-5.png" srcset="/wp-content/uploads/2018/06/word-image-5.png 729w, /wp-content/uploads/2018/06/word-image-5-300x142.png 300w" sizes="(max-width: 729px) 100vw, 729px" /></p>
<h3>（6）Symfony国外框架</h3>
<p><img loading="lazy" decoding="async" width="687" height="480" class="wp-image-7398" src="/wp-content/uploads/2018/06/word-image-6.png" srcset="/wp-content/uploads/2018/06/word-image-6.png 687w, /wp-content/uploads/2018/06/word-image-6-300x210.png 300w" sizes="(max-width: 687px) 100vw, 687px" /></p>
<p>框架只有最合适的，没有最好的，需结合自己的系统业务去选择最合适的。</p>
<p>国内使用最多的框架是TP、laravel、CI。YII框架外企使用较多</p>
<h1>ThinkPHP5框架</h1>
<h2>下载TP5框架</h2>
<p>下载地址：<a href="/goto/rc3y" rel="nofollow">http://www.thinkphp.cn/down.html</a></p>
<p><img loading="lazy" decoding="async" width="671" height="101" class="wp-image-7399" src="/wp-content/uploads/2018/06/word-image-7.png" srcset="/wp-content/uploads/2018/06/word-image-7.png 671w, /wp-content/uploads/2018/06/word-image-7-300x45.png 300w" sizes="(max-width: 671px) 100vw, 671px" /></p>
<p><img loading="lazy" decoding="async" width="192" height="27" class="wp-image-7400" src="/wp-content/uploads/2018/06/word-image-8.png" /></p>
<h2>TP5框架的目录认识</h2>
<p>手册位置：基础&#8211;&gt;目录结构</p>
<ol>
<li>project 应用部署目录</li>
<li>├─application 应用目录（可设置）</li>
<li>│ ├─common 公共模块目录（可更改）</li>
<li>│ ├─index 模块目录(可更改)</li>
<li>│ │ ├─config.php 模块配置文件</li>
<li>│ │ ├─common.php 模块函数文件</li>
<li>│ │ ├─controller 控制器目录</li>
<li>│ │ ├─model 模型目录</li>
<li>│ │ ├─view 视图目录</li>
<li>│ │ └─ &#8230; 更多类库目录</li>
<li>│ ├─command.php 命令行工具配置文件</li>
<li>│ ├─common.php 应用公共（函数）文件</li>
<li>│ ├─config.php 应用（公共）配置文件</li>
<li>│ ├─database.php 数据库配置文件</li>
<li>│ ├─tags.php 应用行为扩展定义文件</li>
<li>│ └─route.php 路由配置文件</li>
<li>├─extend 扩展类库目录（可定义）</li>
<li>├─public WEB 部署目录（对外访问目录）</li>
<li>│ ├─static 静态资源存放目录(css,js,image)</li>
<li>│ ├─index.php 应用入口文件</li>
<li>│ ├─router.php 快速测试文件</li>
<li>│ └─.htaccess 用于 apache 的重写</li>
<li>├─runtime 应用的运行时目录（可写，可设置）</li>
<li>├─vendor 第三方类库目录（Composer）</li>
<li>├─thinkphp 框架系统目录</li>
<li>│ ├─lang 语言包目录</li>
<li>│ ├─library 框架核心类库目录</li>
<li>│ │ ├─think Think 类库包目录</li>
<li>│ │ └─traits 系统 Traits 目录</li>
<li>│ ├─tpl 系统模板目录</li>
<li>│ ├─.htaccess 用于 apache 的重写</li>
<li>│ ├─.travis.yml CI 定义文件</li>
<li>│ ├─base.php 基础定义文件</li>
<li>│ ├─composer.json composer 定义文件</li>
<li>│ ├─console.php 控制台入口文件</li>
<li>│ ├─convention.php 惯例配置文件</li>
<li>│ ├─helper.php 助手函数文件（可选）</li>
<li>│ ├─LICENSE.txt 授权说明文件</li>
<li>│ ├─phpunit.xml 单元测试配置文件</li>
<li>│ ├─README.md README 文件</li>
<li>│ └─start.php 框架引导文件</li>
<li>├─build.php 自动生成定义文件（参考）</li>
<li>├─composer.json composer 定义文件</li>
<li>├─LICENSE.txt 授权说明文件</li>
<li>├─README.md README 文件</li>
<li>├─think 命令行入口文件</li>
</ol>
<p>每个application下面的模块目录都有mvc分层结构：</p>
<p><img loading="lazy" decoding="async" width="380" height="187" class="wp-image-7401" src="/wp-content/uploads/2018/06/word-image-9.png" srcset="/wp-content/uploads/2018/06/word-image-9.png 380w, /wp-content/uploads/2018/06/word-image-9-300x148.png 300w" sizes="(max-width: 380px) 100vw, 380px" /></p>
<p>可参考手册：</p>
<p><img loading="lazy" decoding="async" width="979" height="138" class="wp-image-7402" src="/wp-content/uploads/2018/06/word-image-10.png" srcset="/wp-content/uploads/2018/06/word-image-10.png 979w, /wp-content/uploads/2018/06/word-image-10-300x42.png 300w, /wp-content/uploads/2018/06/word-image-10-768x108.png 768w" sizes="(max-width: 979px) 100vw, 979px" /></p>
<h1>三、使用TP5框架部署项目</h1>
<p>我们是使用ThinkPHP5+ajax+jquery以及和第三方插件结合起来，做一个文章管理系统，掌握怎样使用ThinkPHP5快速开发一个项目。</p>
<h2>配置项目虚拟主机</h2>
<p>主要三个核心步骤：1、使用phpStudy建立虚拟主机 2、设置hosts文件映射 3、重启apache服务器</p>
<p>把框架的文件复制到我们的虚拟主机目录中去：</p>
<p><img loading="lazy" decoding="async" width="652" height="417" class="wp-image-7403" src="/wp-content/uploads/2018/06/word-image-11.png" srcset="/wp-content/uploads/2018/06/word-image-11.png 652w, /wp-content/uploads/2018/06/word-image-11-300x192.png 300w" sizes="(max-width: 652px) 100vw, 652px" /></p>
<ol>
<li>使用phpStudy建立虚拟主机 (www.article.com)</li>
</ol>
<p><img loading="lazy" decoding="async" width="287" height="109" class="wp-image-7404" src="/wp-content/uploads/2018/06/word-image-12.png" /></p>
<p>最终生成的虚拟主机文件（vhosts.conf）配置如下：</p>
<p><img loading="lazy" decoding="async" width="488" height="206" class="wp-image-7405" src="/wp-content/uploads/2018/06/word-image-13.png" srcset="/wp-content/uploads/2018/06/word-image-13.png 488w, /wp-content/uploads/2018/06/word-image-13-300x127.png 300w" sizes="(max-width: 488px) 100vw, 488px" /></p>
<ol>
<li>设置hosts文件映射</li>
</ol>
<p><img loading="lazy" decoding="async" width="374" height="27" class="wp-image-7406" src="/wp-content/uploads/2018/06/word-image-14.png" srcset="/wp-content/uploads/2018/06/word-image-14.png 374w, /wp-content/uploads/2018/06/word-image-14-300x22.png 300w" sizes="(max-width: 374px) 100vw, 374px" /></p>
<ol>
<li>重启apache服务器</li>
</ol>
<h2>2、访问虚拟主机</h2>
<p>输入配置的域名直接访问：</p>
<p><img loading="lazy" decoding="async" width="806" height="368" class="wp-image-7407" src="/wp-content/uploads/2018/06/word-image-15.png" srcset="/wp-content/uploads/2018/06/word-image-15.png 806w, /wp-content/uploads/2018/06/word-image-15-300x137.png 300w, /wp-content/uploads/2018/06/word-image-15-768x351.png 768w" sizes="(max-width: 806px) 100vw, 806px" /></p>
<p>为什么会出现上面的一个笑脸？</p>
<p>答：那是因为受到框架的配置文件application/config.php的影响，默认访问index模块的index控制器的index方法，如下：</p>
<p><img loading="lazy" decoding="async" width="682" height="269" class="wp-image-7408" src="/wp-content/uploads/2018/06/word-image-16.png" srcset="/wp-content/uploads/2018/06/word-image-16.png 682w, /wp-content/uploads/2018/06/word-image-16-300x118.png 300w" sizes="(max-width: 682px) 100vw, 682px" /></p>
<p>可以对index控制器的index方法的内容进行更改：</p>
<p><img loading="lazy" decoding="async" width="668" height="231" class="wp-image-7409" src="/wp-content/uploads/2018/06/word-image-17.png" srcset="/wp-content/uploads/2018/06/word-image-17.png 668w, /wp-content/uploads/2018/06/word-image-17-300x104.png 300w" sizes="(max-width: 668px) 100vw, 668px" /></p>
<p>再次访问如下：</p>
<p><img loading="lazy" decoding="async" width="230" height="70" class="wp-image-7410" src="/wp-content/uploads/2018/06/word-image-18.png" /></p>
<p>注：tp5默认值支持老本tp3的pathinfo模式进行访问。</p>
<p>如：<a href="/goto/sbfh" rel="nofollow">http://域名/index.php/</a><a href="/goto/sbfh" rel="nofollow">模块/控制器/方法名</a><a href="/goto/sbfh" rel="nofollow">/参数1/值1/参数2/值2/</a></p>
<p>例：访问index模块的index 控制器的index方法</p>
<p>http://域名/index.php/index/index/index/参数1/值1/参数2/值2/</p>
<h2>3、响应输出</h2>
<p>控制器的所有操作方法都是return返回而不是直接输出，系统会调用Response::send方法将最终的应用返回的数据输出到页面或者客户端，并自动转换成default_return_type参数配置的格式。所以，应用执行的数据输出只需要返回一个正常的PHP数据即可。</p>
<p>tp5也是建议统一使用return返回数据，而不是echo输出，如非必要，请不要使用exit或者die中断执行。</p>
<p><img loading="lazy" decoding="async" width="509" height="59" class="wp-image-7411" src="/wp-content/uploads/2018/06/word-image-19.png" srcset="/wp-content/uploads/2018/06/word-image-19.png 509w, /wp-content/uploads/2018/06/word-image-19-300x35.png 300w" sizes="(max-width: 509px) 100vw, 509px" /></p>
<h1>四、控制器</h1>
<h2>控制器的作用</h2>
<p>C：Controller</p>
<p>作用：主要是接受用户的请求，在模型和视图之间起调度的作用。</p>
<h2>创建控制器</h2>
<h3>（1）修改控制器后缀</h3>
<p>由于国人命名的习惯，我们可以通过以下配置文件给控制器文件名加个Controller后缀。</p>
<p>打开配置文件，[项目目录]/application/config.php，做如下修改：</p>
<p><img loading="lazy" decoding="async" width="999" height="207" class="wp-image-7412" src="/wp-content/uploads/2018/06/word-image-20.png" srcset="/wp-content/uploads/2018/06/word-image-20.png 999w, /wp-content/uploads/2018/06/word-image-20-300x62.png 300w, /wp-content/uploads/2018/06/word-image-20-768x159.png 768w" sizes="(max-width: 999px) 100vw, 999px" /></p>
<h3>创建控制器语法</h3>
<p>语法规则：</p>
<p>控制器类名：控制器名+Controller</p>
<p>控制器文件名：控制器名+Controller.php</p>
<p>控制器文件所在路径：application/模块名/controller/</p>
<p>如在index模块下定义一个Test控制器：</p>
<p>控制器类名： TestController</p>
<p>控制器类文件名： TestController.php</p>
<p>文件定义位置：index/controller/TestController.php</p>
<p>注：类名首字母大写</p>
<p>代码如下：</p>
<p><img loading="lazy" decoding="async" width="683" height="298" class="wp-image-7413" src="/wp-content/uploads/2018/06/word-image-21.png" srcset="/wp-content/uploads/2018/06/word-image-21.png 683w, /wp-content/uploads/2018/06/word-image-21-300x131.png 300w" sizes="(max-width: 683px) 100vw, 683px" /></p>
<p>访问：</p>
<p><img loading="lazy" decoding="async" width="499" height="64" class="wp-image-7414" src="/wp-content/uploads/2018/06/word-image-22.png" srcset="/wp-content/uploads/2018/06/word-image-22.png 499w, /wp-content/uploads/2018/06/word-image-22-300x38.png 300w" sizes="(max-width: 499px) 100vw, 499px" /></p>
<h3>访问控制器</h3>
<p>1、可以通过tp3老版本的pathInfo模式进行访问。</p>
<p><a href="/goto/ghx2" rel="nofollow">http://网址/index.php/分组/控制器名称/操作方法名称</a></p>
<p>如访问Index模块的index控制器的test1方法</p>
<p><img loading="lazy" decoding="async" width="795" height="74" class="wp-image-7415" src="/wp-content/uploads/2018/06/word-image-23.png" srcset="/wp-content/uploads/2018/06/word-image-23.png 795w, /wp-content/uploads/2018/06/word-image-23-300x28.png 300w, /wp-content/uploads/2018/06/word-image-23-768x71.png 768w" sizes="(max-width: 795px) 100vw, 795px" /></p>
<p>2、也可以把index.php入口文件给隐藏掉，变为下边的路由形式：</p>
<p><a href="/goto/ghx2" rel="nofollow">http://网址/分组/控制器名称/操作方法名称</a></p>
<p>省去index.php入口访问，修改项目的重写文件.htaaccess。</p>
<p>第一步：文件位置：[项目根目录]/Public/.htaccess ,做如下修改：</p>
<p><img loading="lazy" decoding="async" width="514" height="211" class="wp-image-7416" src="/wp-content/uploads/2018/06/word-image-24.png" srcset="/wp-content/uploads/2018/06/word-image-24.png 514w, /wp-content/uploads/2018/06/word-image-24-300x123.png 300w" sizes="(max-width: 514px) 100vw, 514px" /></p>
<p>(注：上图在index.php后边加”?”号)</p>
<p>重写文件.htaccsee解释：</p>
<p>&lt;IfModule mod_rewrite.c&gt;</p>
<p>Options +FollowSymlinks -Multiviews</p>
<p>RewriteEngine On #开启重写规则</p>
<p>RewriteCond %{REQUEST_FILENAME} !-d #如果请求的不是一个目录（-d 代表目录）</p>
<p>RewriteCond %{REQUEST_FILENAME} !-f #且如果请求的不是一个文件（-f 代表文件）</p>
<p>RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L] #上面两个条件都不满足，执行RewriteRule重写规则</p>
<p>&lt;/IfModule&gt;</p>
<p>重写规则: RewriteRule 虚拟规则（正则写） 服务器真实文件路径</p>
<p>即用户输入的域名后面的规则若满足虚拟规则，就会访问对应的真实文件。</p>
<p>第二步：修改虚拟主机vhosts.conf的配置：加上AllowOverride All ，默认phpstudy创建的虚拟主机自带这一行。</p>
<p><img loading="lazy" decoding="async" width="558" height="213" class="wp-image-7417" src="/wp-content/uploads/2018/06/word-image-25.png" srcset="/wp-content/uploads/2018/06/word-image-25.png 558w, /wp-content/uploads/2018/06/word-image-25-300x115.png 300w" sizes="(max-width: 558px) 100vw, 558px" /></p>
<p>第三步。再去httpd.conf开启重写文件：</p>
<p><img loading="lazy" decoding="async" width="747" height="169" class="wp-image-7418" src="/wp-content/uploads/2018/06/word-image-26.png" srcset="/wp-content/uploads/2018/06/word-image-26.png 747w, /wp-content/uploads/2018/06/word-image-26-300x68.png 300w" sizes="(max-width: 747px) 100vw, 747px" /></p>
<p>重启apache服务器，省去入口文件index.php进行访问:</p>
<p><img loading="lazy" decoding="async" width="352" height="74" class="wp-image-7419" src="/wp-content/uploads/2018/06/word-image-27.png" srcset="/wp-content/uploads/2018/06/word-image-27.png 352w, /wp-content/uploads/2018/06/word-image-27-300x63.png 300w" sizes="(max-width: 352px) 100vw, 352px" /></p>
<h3>开启调试模式</h3>
<p>为了在开发过程中，开发者能够及时看到详细的错误信息，我们在开发阶段可以把以下config配置文件中的app_debug配置设置为true,</p>
<p><img loading="lazy" decoding="async" width="700" height="173" class="wp-image-7420" src="/wp-content/uploads/2018/06/word-image-28.png" srcset="/wp-content/uploads/2018/06/word-image-28.png 700w, /wp-content/uploads/2018/06/word-image-28-300x74.png 300w" sizes="(max-width: 700px) 100vw, 700px" /></p>
<p>访问一个不存在的方法,会报详细的错误。</p>
<p><img loading="lazy" decoding="async" width="955" height="167" class="wp-image-7421" src="/wp-content/uploads/2018/06/word-image-29.png" srcset="/wp-content/uploads/2018/06/word-image-29.png 955w, /wp-content/uploads/2018/06/word-image-29-300x52.png 300w, /wp-content/uploads/2018/06/word-image-29-768x134.png 768w" sizes="(max-width: 955px) 100vw, 955px" /></p>
<p>若设置为false,则会出现友好的提示：</p>
<p><img loading="lazy" decoding="async" width="461" height="147" class="wp-image-7422" src="/wp-content/uploads/2018/06/word-image-30.png" srcset="/wp-content/uploads/2018/06/word-image-30.png 461w, /wp-content/uploads/2018/06/word-image-30-300x96.png 300w" sizes="(max-width: 461px) 100vw, 461px" /></p>
<p>所以，项目上线后，我们要把此配置改为false。不要让用户看到我们网站报错。</p>
<h1>五、项目分组（模块）</h1>
<h2>1、创建分组</h2>
<p>一个项目中一般都有Home、Admin分组，即前台和后台，那对应框架中就是一个具体的文件夹，每个项目文件夹都有对应的控制器、模型、视图对应的文件夹，tp5框架中默认有一个分组index。</p>
<p>我们只需要把index分组复制一份改名（如admin）放在Application目录下即可，同时修改对应类所在分组的命名空间即可。</p>
<p><img loading="lazy" decoding="async" width="689" height="231" class="wp-image-7423" src="/wp-content/uploads/2018/06/word-image-31.png" srcset="/wp-content/uploads/2018/06/word-image-31.png 689w, /wp-content/uploads/2018/06/word-image-31-300x101.png 300w" sizes="(max-width: 689px) 100vw, 689px" /></p>
<p>也需要改对应类的命名空间：</p>
<p><img loading="lazy" decoding="async" width="808" height="332" class="wp-image-7424" src="/wp-content/uploads/2018/06/word-image-32.png" srcset="/wp-content/uploads/2018/06/word-image-32.png 808w, /wp-content/uploads/2018/06/word-image-32-300x123.png 300w, /wp-content/uploads/2018/06/word-image-32-768x316.png 768w" sizes="(max-width: 808px) 100vw, 808px" /></p>
<p>访问如下：</p>
<p><img loading="lazy" decoding="async" width="454" height="64" class="wp-image-7425" src="/wp-content/uploads/2018/06/word-image-33.png" srcset="/wp-content/uploads/2018/06/word-image-33.png 454w, /wp-content/uploads/2018/06/word-image-33-300x42.png 300w" sizes="(max-width: 454px) 100vw, 454px" /></p>
<h2>2、默认分组的设置</h2>
<p>需修改框架的application/config.php的配置文件，如默认访问admin分组的index控制器的index方法，做如下修改：</p>
<p><img loading="lazy" decoding="async" width="834" height="301" class="wp-image-7426" src="/wp-content/uploads/2018/06/word-image-34.png" srcset="/wp-content/uploads/2018/06/word-image-34.png 834w, /wp-content/uploads/2018/06/word-image-34-300x108.png 300w, /wp-content/uploads/2018/06/word-image-34-768x277.png 768w" sizes="(max-width: 834px) 100vw, 834px" /></p>
<p>直接输入域名访问的则是admin模块下的index控制器的index方法：</p>
<p><img loading="lazy" decoding="async" width="416" height="103" class="wp-image-7427" src="/wp-content/uploads/2018/06/word-image-35.png" srcset="/wp-content/uploads/2018/06/word-image-35.png 416w, /wp-content/uploads/2018/06/word-image-35-300x74.png 300w" sizes="(max-width: 416px) 100vw, 416px" /></p>
<h2>3、分组的访问权限控制</h2>
<p>需修改框架的application/config.php的配置文件：</p>
<p><img loading="lazy" decoding="async" width="612" height="78" class="wp-image-7428" src="/wp-content/uploads/2018/06/word-image-36.png" srcset="/wp-content/uploads/2018/06/word-image-36.png 612w, /wp-content/uploads/2018/06/word-image-36-300x38.png 300w" sizes="(max-width: 612px) 100vw, 612px" /></p>
<p>上图是设置禁止访问common和index分组。</p>
<p>再次访问index模块，会报错。</p>
<p><img loading="lazy" decoding="async" width="625" height="210" class="wp-image-7429" src="/wp-content/uploads/2018/06/word-image-37.png" srcset="/wp-content/uploads/2018/06/word-image-37.png 625w, /wp-content/uploads/2018/06/word-image-37-300x101.png 300w" sizes="(max-width: 625px) 100vw, 625px" /></p>
<h1>六、【了解】命令行操作</h1>
<h2>命令行创建分组</h2>
<p>创建文件application/build.php并填充内容，可以参考根目录 build.php</p>
<p>[项目根目录] &gt; php think build</p>
<p>创建application/build.php并填充如下内容：</p>
<p><img loading="lazy" decoding="async" width="1209" height="397" class="wp-image-7430" src="/wp-content/uploads/2018/06/word-image-38.png" srcset="/wp-content/uploads/2018/06/word-image-38.png 1209w, /wp-content/uploads/2018/06/word-image-38-300x99.png 300w, /wp-content/uploads/2018/06/word-image-38-768x252.png 768w, /wp-content/uploads/2018/06/word-image-38-1024x336.png 1024w" sizes="(max-width: 1209px) 100vw, 1209px" /></p>
<p>执行命令</p>
<p><img loading="lazy" decoding="async" width="365" height="79" class="wp-image-7431" src="/wp-content/uploads/2018/06/word-image-39.png" srcset="/wp-content/uploads/2018/06/word-image-39.png 365w, /wp-content/uploads/2018/06/word-image-39-300x65.png 300w" sizes="(max-width: 365px) 100vw, 365px" /></p>
<p>创建分组的效果</p>
<h2>命令行创建控制器</h2>
<p>[项目根目录] &gt; php think make:controller 分组/名称</p>
<p>注：不写分组名会直接创建在common分组中</p>
<p>例：在Common中生成一个Demo的控制器</p>
<p><img loading="lazy" decoding="async" width="433" height="44" class="wp-image-7432" src="/wp-content/uploads/2018/06/word-image-40.png" srcset="/wp-content/uploads/2018/06/word-image-40.png 433w, /wp-content/uploads/2018/06/word-image-40-300x30.png 300w" sizes="(max-width: 433px) 100vw, 433px" /></p>
<p>生成如下所示：</p>
<p><img loading="lazy" decoding="async" width="881" height="331" class="wp-image-7433" src="/wp-content/uploads/2018/06/word-image-41.png" srcset="/wp-content/uploads/2018/06/word-image-41.png 881w, /wp-content/uploads/2018/06/word-image-41-300x113.png 300w, /wp-content/uploads/2018/06/word-image-41-768x289.png 768w" sizes="(max-width: 881px) 100vw, 881px" /></p>
<p>例如下述，要给index分组创建UserController.php控制器文件</p>
<p>[项目根目录] &gt; php think make:controller index/User</p>
<p>命令如下；</p>
<p><img loading="lazy" decoding="async" width="494" height="48" class="wp-image-7434" src="/wp-content/uploads/2018/06/word-image-42.png" srcset="/wp-content/uploads/2018/06/word-image-42.png 494w, /wp-content/uploads/2018/06/word-image-42-300x29.png 300w" sizes="(max-width: 494px) 100vw, 494px" /></p>
<p>生成的文件：</p>
<p><img loading="lazy" decoding="async" width="817" height="341" class="wp-image-7435" src="/wp-content/uploads/2018/06/word-image-43.png" srcset="/wp-content/uploads/2018/06/word-image-43.png 817w, /wp-content/uploads/2018/06/word-image-43-300x125.png 300w, /wp-content/uploads/2018/06/word-image-43-768x321.png 768w" sizes="(max-width: 817px) 100vw, 817px" /></p>
<h1>七、使用路由访问</h1>
<p>老版本TP3.2多种访问模式（了解）：</p>
<ul>
<li>pathinfo模式（默认形式,,重点掌握）：http://域名/index.php/模块/控制器名/方法名/参数名/参数值/参数名/参数值&#8230;</li>
</ul>
<p><img loading="lazy" decoding="async" width="578" height="38" class="wp-image-7436" src="/wp-content/uploads/2018/06/word-image-44.png" srcset="/wp-content/uploads/2018/06/word-image-44.png 578w, /wp-content/uploads/2018/06/word-image-44-300x20.png 300w" sizes="(max-width: 578px) 100vw, 578px" /></p>
<ul>
<li>普通模式（get形式）：http://域名/index.php?m=模块&amp;c=控制器名&amp;a=方法名&amp;参数名=参数值&#8230;</li>
</ul>
<p><img loading="lazy" decoding="async" width="605" height="79" class="wp-image-7437" src="/wp-content/uploads/2018/06/word-image-45.png" srcset="/wp-content/uploads/2018/06/word-image-45.png 605w, /wp-content/uploads/2018/06/word-image-45-300x39.png 300w" sizes="(max-width: 605px) 100vw, 605px" /></p>
<ul>
<li>rewrite模式（隐藏入口文件）：<a href="/goto/98sz" rel="nofollow">http://域名/模块/控制器名/方法名/参数名/参数值/参数名/参数值&#8230;</a></li>
</ul>
<p><img loading="lazy" decoding="async" width="515" height="82" class="wp-image-7438" src="/wp-content/uploads/2018/06/word-image-46.png" srcset="/wp-content/uploads/2018/06/word-image-46.png 515w, /wp-content/uploads/2018/06/word-image-46-300x48.png 300w" sizes="(max-width: 515px) 100vw, 515px" /></p>
<ul>
<li>兼容模式：http://域名/inde.php?s=/模块/控制器名/方法名/参数名/参数值&#8230;</li>
</ul>
<p><img loading="lazy" decoding="async" width="534" height="83" class="wp-image-7439" src="/wp-content/uploads/2018/06/word-image-47.png" srcset="/wp-content/uploads/2018/06/word-image-47.png 534w, /wp-content/uploads/2018/06/word-image-47-300x47.png 300w" sizes="(max-width: 534px) 100vw, 534px" /></p>
<p>上面的四种模式在tp5默认都是支持的。其在tp5框架中还可以单独定义路由规则来访问某个控制器中的某个方法。</p>
<p>只要配置文件config.php中开启路由功能，访问的时候就会经过路由规则，根据定义的路由规则从而访问到某个控制器中的方法。</p>
<p>路由图解：</p>
<p><img loading="lazy" decoding="async" width="697" height="91" class="wp-image-7440" src="/wp-content/uploads/2018/06/word-image-48.png" srcset="/wp-content/uploads/2018/06/word-image-48.png 697w, /wp-content/uploads/2018/06/word-image-48-300x39.png 300w" sizes="(max-width: 697px) 100vw, 697px" /></p>
<ol>
<li>开启路由，修改application/config.php配置文件</li>
</ol>
<p>&#8216;url_route_on&#8217; =&gt; true, // 开启路由</p>
<p>&#8216;url_route_must&#8217; =&gt; true, // 必须使用路由(即不能使用之前的pathinfo模式访问)</p>
<p>注：若url_route_must设置为true,就不就可以通过上面四种模式来访问，只能通过定义的路由规则访问。</p>
<p>2、定义路由规则，定义在application/route.php文件中</p>
<p>Route::rule(&#8216;路由表达式&#8217;,&#8217;路由地址&#8217;,&#8217;请求类型&#8217;,&#8217;路由参数(数组)&#8217;,&#8217;变量规则(数组)&#8217;);</p>
<p>说明：</p>
<p><strong>路由表达式</strong>：静态地址、动态地址、可选动态地址</p>
<p><strong>路由地址</strong>：表示路由表达式最终需要路由到的地址，有多种定义方式，常用的是”模块/控制器/操作?额外参数1=值1&amp;额外参数2=值2”形式</p>
<p><strong>请求类型</strong>：GET、POST 必须是大写的</p>
<p><strong>路由参数</strong>：</p>
<p>method:请求类型</p>
<p>ext:允许的后缀</p>
<p>deny_ext:禁止的访问后缀</p>
<p>domain:允许什么样的域名访问有效</p>
<p>https:检测是否是https请求</p>
<p>before_behavior:行为发生前，进行路由检查</p>
<p>after_behavior:行为发生后，要执行的动作</p>
<p>&#8230;</p>
<p>详情参考：手册路由&#8211;&gt;路由参数</p>
<p>变量规则：检查传递的变量是否符合某个(正则)规则,规则可以通过正则定义</p>
<p>例如规则：</p>
<p>Route::rule(‘login’,’home/User/login’,’GET’,[‘ext’=&gt;’html’]);</p>
<p>访问：<a href="/goto/dzl6" rel="nofollow">http://servername/index.php/login</a>.html</p>
<p>路由到：<a href="/goto/5h9l" rel="nofollow">http://servername/index.php/home/User/login</a></p>
<p>Route::rule(‘login/:id’,’home/User/login’,’GET’,[‘ext’=&gt;’html’],[‘id’=&gt;’\d+’]);</p>
<p>访问：<a href="/goto/dzl6" rel="nofollow">http://servername/index.php/login</a>/101.html</p>
<p>路由到：<a href="/goto/5h9l" rel="nofollow">http://servername/index.php/home/User/login</a>/id/101</p>
<p>Route::rule(‘login/:id/:name’,’home/User/login’,’GET’,[‘ext’=&gt;’html’],[‘id’=&gt;’\d+’,’name’=&gt;’[a-zA-Z]+’]);</p>
<p>访问：<a href="/goto/dzl6" rel="nofollow">http://servername/index.php/login</a>/101/tom.html</p>
<p>路由到：</p>
<p><a href="/goto/5h9l" rel="nofollow">http://servername/index.php/home/User/login</a>/id/101/name/tom</p>
<p>也可以像下边这样定义:</p>
<p>Route::get(&#8216;路由表达式&#8217;,&#8217;路由地址&#8217;,&#8217;路由参数(数组)&#8217;,&#8217;变量规则(数组)&#8217;);</p>
<p>Route::post(&#8216;路由表达式&#8217;,&#8217;路由地址&#8217;,&#8217;路由参数(数组)&#8217;,&#8217;变量规则(数组)&#8217;);</p>
<p>如一个控制器中的方法在路由规则中没有定义则是不允许被访问，报以下错误：</p>
<p><img loading="lazy" decoding="async" width="701" height="144" class="wp-image-7441" src="/wp-content/uploads/2018/06/word-image-49.png" srcset="/wp-content/uploads/2018/06/word-image-49.png 701w, /wp-content/uploads/2018/06/word-image-49-300x62.png 300w" sizes="(max-width: 701px) 100vw, 701px" /></p>
<p>解决办法，把application/config.php文件中的以下配置改为false,就说明路由规则和pathinfo形式两者都可以进行访问。</p>
<p>&#8216;url_route_must&#8217; =&gt; false, // 是否强制使用路由</p>
<p>在application/route.php中定义路由规则：</p>
<p><img loading="lazy" decoding="async" width="1171" height="392" class="wp-image-7442" src="/wp-content/uploads/2018/06/word-image-50.png" srcset="/wp-content/uploads/2018/06/word-image-50.png 1171w, /wp-content/uploads/2018/06/word-image-50-300x100.png 300w, /wp-content/uploads/2018/06/word-image-50-768x257.png 768w, /wp-content/uploads/2018/06/word-image-50-1024x343.png 1024w" sizes="(max-width: 1171px) 100vw, 1171px" /></p>
<p>访问如下：</p>
<p><img loading="lazy" decoding="async" width="323" height="71" class="wp-image-7443" src="/wp-content/uploads/2018/06/word-image-51.png" srcset="/wp-content/uploads/2018/06/word-image-51.png 323w, /wp-content/uploads/2018/06/word-image-51-300x66.png 300w" sizes="(max-width: 323px) 100vw, 323px" /></p>
<p><img loading="lazy" decoding="async" width="328" height="64" class="wp-image-7444" src="/wp-content/uploads/2018/06/word-image-52.png" srcset="/wp-content/uploads/2018/06/word-image-52.png 328w, /wp-content/uploads/2018/06/word-image-52-300x59.png 300w" sizes="(max-width: 328px) 100vw, 328px" /></p>
<p><img loading="lazy" decoding="async" width="317" height="66" class="wp-image-7445" src="/wp-content/uploads/2018/06/word-image-53.png" srcset="/wp-content/uploads/2018/06/word-image-53.png 317w, /wp-content/uploads/2018/06/word-image-53-300x62.png 300w" sizes="(max-width: 317px) 100vw, 317px" /></p>
<h1>展示视图</h1>
<p>语法：控制器中调用fetch方法</p>
<p>return $this -&gt; fetch(模块@控制器/操作);</p>
<p>注意：</p>
<p>控制器要想正常调用fetch方法，则必须继承Controller类：use think\Controller</p>
<p>fetch()具体有下述5种用法：</p>
<ul>
<li>调用：view下当前控制器名/当前操作名.html模版文件</li>
</ul>
<p>return $this -&gt; fetch();</p>
<ul>
<li>调用：view下当前控制器的/add.html模版文件</li>
</ul>
<p>return $this -&gt; fetch(‘add’);</p>
<ul>
<li>找到view下边user目录的login.html模版文件[跨控制器]</li>
</ul>
<p>return $this -&gt; fetch(&#8216;user/login&#8217;);</p>
<ul>
<li>找到admin分组view目录的manager下边的login.html模版文件[跨分组]</li>
</ul>
<p>return $this -&gt; fetch(&#8216;admin@manager/login&#8217;);</p>
<p>代码如下：</p>
<p><img loading="lazy" decoding="async" width="879" height="322" class="wp-image-7446" src="/wp-content/uploads/2018/06/word-image-54.png" srcset="/wp-content/uploads/2018/06/word-image-54.png 879w, /wp-content/uploads/2018/06/word-image-54-300x110.png 300w, /wp-content/uploads/2018/06/word-image-54-768x281.png 768w" sizes="(max-width: 879px) 100vw, 879px" /></p>
<p>结果：</p>
<p><img loading="lazy" decoding="async" width="428" height="86" class="wp-image-7447" src="/wp-content/uploads/2018/06/word-image-55.png" srcset="/wp-content/uploads/2018/06/word-image-55.png 428w, /wp-content/uploads/2018/06/word-image-55-300x60.png 300w" sizes="(max-width: 428px) 100vw, 428px" /></p>
<h1>九、模板赋值</h1>
<p>语法：在控制器调用assign方法</p>
<ol>
<li>public function index()</li>
<li>{</li>
<li>// 模板变量赋值</li>
<li>$this-&gt;assign(&#8216;name&#8217;,&#8217;ThinkPHP&#8217;);</li>
<li>$this-&gt;assign(&#8217;email&#8217;,&#8217;thinkphp@qq.com&#8217;);</li>
<li>// 或者批量赋值</li>
<li>$this-&gt;assign([</li>
<li>&#8216;name&#8217; =&gt; &#8216;ThinkPHP&#8217;,</li>
<li>&#8217;email&#8217; =&gt; &#8216;thinkphp@qq.com&#8217;</li>
<li>]);</li>
<li>// 模板输出</li>
<li>return $this-&gt;fetch(&#8216;index&#8217;);</li>
<li>}</li>
</ol>
<p>或者把模板变量直接传递给fetch方法：</p>
<ol>
<li>public function index()</li>
<li>{</li>
<li>return $this-&gt;fetch(&#8216;index&#8217;, [</li>
<li>&#8216;name&#8217; =&gt; &#8216;ThinkPHP&#8217;,</li>
<li>&#8217;email&#8217; =&gt; &#8216;thinkphp@qq.com&#8217;</li>
<li>]);</li>
<li>}</li>
</ol>
<p>代码如下：</p>
<p><img loading="lazy" decoding="async" width="611" height="174" class="wp-image-7448" src="/wp-content/uploads/2018/06/word-image-56.png" srcset="/wp-content/uploads/2018/06/word-image-56.png 611w, /wp-content/uploads/2018/06/word-image-56-300x85.png 300w" sizes="(max-width: 611px) 100vw, 611px" /></p>
<p>模板中显示：</p>
<p><img loading="lazy" decoding="async" width="392" height="94" class="wp-image-7449" src="/wp-content/uploads/2018/06/word-image-57.png" srcset="/wp-content/uploads/2018/06/word-image-57.png 392w, /wp-content/uploads/2018/06/word-image-57-300x72.png 300w" sizes="(max-width: 392px) 100vw, 392px" /></p>
<p>效果：</p>
<p><img loading="lazy" decoding="async" width="414" height="132" class="wp-image-7450" src="/wp-content/uploads/2018/06/word-image-58.png" srcset="/wp-content/uploads/2018/06/word-image-58.png 414w, /wp-content/uploads/2018/06/word-image-58-300x96.png 300w" sizes="(max-width: 414px) 100vw, 414px" /></p>
<p>建议使用如下方式，分配模板变量：<br />
<img loading="lazy" decoding="async" width="735" height="212" class="wp-image-7451" src="/wp-content/uploads/2018/06/word-image-59.png" srcset="/wp-content/uploads/2018/06/word-image-59.png 735w, /wp-content/uploads/2018/06/word-image-59-300x87.png 300w" sizes="(max-width: 735px) 100vw, 735px" /></p>
<p>模板中显示：</p>
<p><img loading="lazy" decoding="async" width="630" height="265" class="wp-image-7452" src="/wp-content/uploads/2018/06/word-image-60.png" srcset="/wp-content/uploads/2018/06/word-image-60.png 630w, /wp-content/uploads/2018/06/word-image-60-300x126.png 300w" sizes="(max-width: 630px) 100vw, 630px" /></p>
<h1>十、模板常用标签</h1>
<h2>volist标签</h2>
<p>作用：主要用来遍历数组</p>
<p>语法：</p>
<p><img loading="lazy" decoding="async" width="966" height="275" class="wp-image-7453" src="/wp-content/uploads/2018/06/word-image-61.png" srcset="/wp-content/uploads/2018/06/word-image-61.png 966w, /wp-content/uploads/2018/06/word-image-61-300x85.png 300w, /wp-content/uploads/2018/06/word-image-61-768x219.png 768w" sizes="(max-width: 966px) 100vw, 966px" /></p>
<p>Volist标签的name属性表示模板赋值的变量名称，因此不可随意在模板文件中改变。id表示当前的循环变量，可以随意指定，但确保不要和name属性值冲突。</p>
<p>代码如下：</p>
<p>控制器对模板赋值：</p>
<p><img loading="lazy" decoding="async" width="706" height="394" class="wp-image-7454" src="/wp-content/uploads/2018/06/word-image-62.png" srcset="/wp-content/uploads/2018/06/word-image-62.png 706w, /wp-content/uploads/2018/06/word-image-62-300x167.png 300w" sizes="(max-width: 706px) 100vw, 706px" /></p>
<p>模板遍历：</p>
<p><img loading="lazy" decoding="async" width="802" height="375" class="wp-image-7455" src="/wp-content/uploads/2018/06/word-image-63.png" srcset="/wp-content/uploads/2018/06/word-image-63.png 802w, /wp-content/uploads/2018/06/word-image-63-300x140.png 300w, /wp-content/uploads/2018/06/word-image-63-768x359.png 768w" sizes="(max-width: 802px) 100vw, 802px" /></p>
<p>效果：<br />
<img loading="lazy" decoding="async" width="448" height="272" class="wp-image-7456" src="/wp-content/uploads/2018/06/word-image-64.png" srcset="/wp-content/uploads/2018/06/word-image-64.png 448w, /wp-content/uploads/2018/06/word-image-64-300x182.png 300w" sizes="(max-width: 448px) 100vw, 448px" /></p>
<p>循环数组序号（标号）：</p>
<p><img loading="lazy" decoding="async" width="809" height="253" class="wp-image-7457" src="/wp-content/uploads/2018/06/word-image-65.png" srcset="/wp-content/uploads/2018/06/word-image-65.png 809w, /wp-content/uploads/2018/06/word-image-65-300x94.png 300w, /wp-content/uploads/2018/06/word-image-65-768x240.png 768w" sizes="(max-width: 809px) 100vw, 809px" /></p>
<p>注：如果不知道key属性，默认{$key}从0开始，所以需要加1{$key+1}</p>
<h2>比较标签</h2>
<p>参考手册：</p>
<p><img loading="lazy" decoding="async" width="788" height="449" class="wp-image-7458" src="/wp-content/uploads/2018/06/word-image-66.png" srcset="/wp-content/uploads/2018/06/word-image-66.png 788w, /wp-content/uploads/2018/06/word-image-66-300x171.png 300w, /wp-content/uploads/2018/06/word-image-66-768x438.png 768w" sizes="(max-width: 788px) 100vw, 788px" /></p>
<p>使用范例：</p>
<p><img loading="lazy" decoding="async" width="387" height="123" class="wp-image-7459" src="/wp-content/uploads/2018/06/word-image-67.png" srcset="/wp-content/uploads/2018/06/word-image-67.png 387w, /wp-content/uploads/2018/06/word-image-67-300x95.png 300w" sizes="(max-width: 387px) 100vw, 387px" /></p>
<p>代码如下：</p>
<p>模板赋值遍历：</p>
<p><img loading="lazy" decoding="async" width="600" height="50" class="wp-image-7460" src="/wp-content/uploads/2018/06/word-image-68.png" srcset="/wp-content/uploads/2018/06/word-image-68.png 600w, /wp-content/uploads/2018/06/word-image-68-300x25.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>模板判断：</p>
<p><img loading="lazy" decoding="async" width="326" height="146" class="wp-image-7461" src="/wp-content/uploads/2018/06/word-image-69.png" srcset="/wp-content/uploads/2018/06/word-image-69.png 326w, /wp-content/uploads/2018/06/word-image-69-300x134.png 300w" sizes="(max-width: 326px) 100vw, 326px" /></p>
<p>效果：</p>
<p><img loading="lazy" decoding="async" width="165" height="83" class="wp-image-7462" src="/wp-content/uploads/2018/06/word-image-70.png" /></p>
<h2>php标签</h2>
<p>如果模板标签太多记不住，这里可以使用php标签统一进行一些代码的编写：</p>
<p><img loading="lazy" decoding="async" width="716" height="258" class="wp-image-7463" src="/wp-content/uploads/2018/06/word-image-71.png" srcset="/wp-content/uploads/2018/06/word-image-71.png 716w, /wp-content/uploads/2018/06/word-image-71-300x108.png 300w" sizes="(max-width: 716px) 100vw, 716px" /></p>
<p>例1：代码如下：</p>
<p><img loading="lazy" decoding="async" width="885" height="546" class="wp-image-7464" src="/wp-content/uploads/2018/06/word-image-72.png" srcset="/wp-content/uploads/2018/06/word-image-72.png 885w, /wp-content/uploads/2018/06/word-image-72-300x185.png 300w, /wp-content/uploads/2018/06/word-image-72-768x474.png 768w" sizes="(max-width: 885px) 100vw, 885px" /></p>
<p>例2：代码如下：</p>
<p>控制器赋值：</p>
<p><img loading="lazy" decoding="async" width="512" height="63" class="wp-image-7465" src="/wp-content/uploads/2018/06/word-image-73.png" srcset="/wp-content/uploads/2018/06/word-image-73.png 512w, /wp-content/uploads/2018/06/word-image-73-300x37.png 300w" sizes="(max-width: 512px) 100vw, 512px" /></p>
<p>模板获取：</p>
<p><img loading="lazy" decoding="async" width="549" height="191" class="wp-image-7466" src="/wp-content/uploads/2018/06/word-image-74.png" srcset="/wp-content/uploads/2018/06/word-image-74.png 549w, /wp-content/uploads/2018/06/word-image-74-300x104.png 300w" sizes="(max-width: 549px) 100vw, 549px" /></p>
<p>效果：</p>
<p><img loading="lazy" decoding="async" width="100" height="77" class="wp-image-7467" src="/wp-content/uploads/2018/06/word-image-75.png" /></p>
<h2>include包含标签</h2>
<p><strong>作用</strong>：</p>
<p>一般网站页面的头部或尾部的网页效果都是一样的，我们就可以把这些网页的代码抽离出来放在一个html文件中，需要使用这些文件的时候，在模板中用include标签引入即可，从而提高代码的复用性。</p>
<p><strong>include语法：</strong></p>
<p><img loading="lazy" decoding="async" width="482" height="57" class="wp-image-7468" src="/wp-content/uploads/2018/06/word-image-76.png" srcset="/wp-content/uploads/2018/06/word-image-76.png 482w, /wp-content/uploads/2018/06/word-image-76-300x35.png 300w" sizes="(max-width: 482px) 100vw, 482px" /></p>
<p>注意：file的路径是从当前模块的view目录下开始找起。</p>
<p>如：有一个header.html模板，其所在路径为：Admin/view/public/header.html</p>
<p>在模板中引入此文件： &lt;include file=”public/header” /&gt;</p>
<p><strong>代码如下：</strong></p>
<p>控制器输出模板：</p>
<p><img loading="lazy" decoding="async" width="567" height="202" class="wp-image-7469" src="/wp-content/uploads/2018/06/word-image-77.png" srcset="/wp-content/uploads/2018/06/word-image-77.png 567w, /wp-content/uploads/2018/06/word-image-77-300x107.png 300w" sizes="(max-width: 567px) 100vw, 567px" /></p>
<p>在模板中引入公共的文件：</p>
<p><img loading="lazy" decoding="async" width="1019" height="353" class="wp-image-7470" src="/wp-content/uploads/2018/06/word-image-78.png" srcset="/wp-content/uploads/2018/06/word-image-78.png 1019w, /wp-content/uploads/2018/06/word-image-78-300x104.png 300w, /wp-content/uploads/2018/06/word-image-78-768x266.png 768w" sizes="(max-width: 1019px) 100vw, 1019px" /></p>
<p>注：文件名后缀不要加html</p>
<p>效果：</p>
<p><img loading="lazy" decoding="async" width="136" height="66" class="wp-image-7471" src="/wp-content/uploads/2018/06/word-image-79.png" /></p>
<h1>十一、搭建后台首页</h1>
<p>第一步：在后台Admin建立一个Index的控制器，输出模板内容</p>
<p><img loading="lazy" decoding="async" width="885" height="275" class="wp-image-7472" src="/wp-content/uploads/2018/06/word-image-80.png" srcset="/wp-content/uploads/2018/06/word-image-80.png 885w, /wp-content/uploads/2018/06/word-image-80-300x93.png 300w, /wp-content/uploads/2018/06/word-image-80-768x239.png 768w" sizes="(max-width: 885px) 100vw, 885px" /></p>
<p>第二步：把我们的后台模板index.html复制到/admin/view/index/目录下面</p>
<p><img loading="lazy" decoding="async" width="1028" height="383" class="wp-image-7473" src="/wp-content/uploads/2018/06/word-image-81.png" srcset="/wp-content/uploads/2018/06/word-image-81.png 1028w, /wp-content/uploads/2018/06/word-image-81-300x112.png 300w, /wp-content/uploads/2018/06/word-image-81-768x286.png 768w, /wp-content/uploads/2018/06/word-image-81-1024x382.png 1024w" sizes="(max-width: 1028px) 100vw, 1028px" /></p>
<p>第三步：把后台模板的left.html 、 top.html 、main.html复复制到/admin/view/index/目录下面.</p>
<p><img loading="lazy" decoding="async" width="744" height="472" class="wp-image-7474" src="/wp-content/uploads/2018/06/word-image-82.png" srcset="/wp-content/uploads/2018/06/word-image-82.png 744w, /wp-content/uploads/2018/06/word-image-82-300x190.png 300w" sizes="(max-width: 744px) 100vw, 744px" /></p>
<p>第四步：在建立left、top、main三个方法</p>
<p><img loading="lazy" decoding="async" width="835" height="533" class="wp-image-7475" src="/wp-content/uploads/2018/06/word-image-83.png" srcset="/wp-content/uploads/2018/06/word-image-83.png 835w, /wp-content/uploads/2018/06/word-image-83-300x191.png 300w, /wp-content/uploads/2018/06/word-image-83-768x490.png 768w" sizes="(max-width: 835px) 100vw, 835px" /></p>
<p>第五步：设置index.html模板的iframe的src路径：</p>
<p><img loading="lazy" decoding="async" width="1238" height="324" class="wp-image-7476" src="/wp-content/uploads/2018/06/word-image-84.png" srcset="/wp-content/uploads/2018/06/word-image-84.png 1238w, /wp-content/uploads/2018/06/word-image-84-300x79.png 300w, /wp-content/uploads/2018/06/word-image-84-768x201.png 768w, /wp-content/uploads/2018/06/word-image-84-1024x268.png 1024w" sizes="(max-width: 1238px) 100vw, 1238px" /></p>
<p>注：助手函数：url(‘模块/控制器/方法’) 生成url地址，在模板中使用函数需要在一对花括号{}前面加个冒号：</p>
<p>第六步：把后台资源（img、css、js）,复制到网站根目录public/admin/目录下面</p>
<p><img loading="lazy" decoding="async" width="1062" height="209" class="wp-image-7477" src="/wp-content/uploads/2018/06/word-image-85.png" srcset="/wp-content/uploads/2018/06/word-image-85.png 1062w, /wp-content/uploads/2018/06/word-image-85-300x59.png 300w, /wp-content/uploads/2018/06/word-image-85-768x151.png 768w, /wp-content/uploads/2018/06/word-image-85-1024x202.png 1024w" sizes="(max-width: 1062px) 100vw, 1062px" /></p>
<p>同时config.php配置文件中，定义一个后台资源目录的路径，在模板中进行统一替换：</p>
<p><img loading="lazy" decoding="async" width="860" height="300" class="wp-image-7478" src="/wp-content/uploads/2018/06/word-image-86.png" srcset="/wp-content/uploads/2018/06/word-image-86.png 860w, /wp-content/uploads/2018/06/word-image-86-300x105.png 300w, /wp-content/uploads/2018/06/word-image-86-768x268.png 768w" sizes="(max-width: 860px) 100vw, 860px" /></p>
<p>第七步：模板中替换使用config函数获取配置进行替换：</p>
<p><img loading="lazy" decoding="async" width="1358" height="710" class="wp-image-7479" src="/wp-content/uploads/2018/06/word-image-87.png" srcset="/wp-content/uploads/2018/06/word-image-87.png 1358w, /wp-content/uploads/2018/06/word-image-87-300x157.png 300w, /wp-content/uploads/2018/06/word-image-87-768x402.png 768w, /wp-content/uploads/2018/06/word-image-87-1024x535.png 1024w" sizes="(max-width: 1358px) 100vw, 1358px" /></p>
<p>和上面操作一样分别替换top.html、left.html、main.html的静态资源目录。</p>
<p>最终效果：</p>
<p><img loading="lazy" decoding="async" width="761" height="479" class="wp-image-7480" src="/wp-content/uploads/2018/06/word-image-88.png" srcset="/wp-content/uploads/2018/06/word-image-88.png 761w, /wp-content/uploads/2018/06/word-image-88-300x189.png 300w" sizes="(max-width: 761px) 100vw, 761px" /></p>
<p>注：助手函数config(‘配置名’)，是获取配置文件中的值。模板中使用需要在{}前面加个冒号：。</p>
<p>助手函数手册位置：附录&#8211;》助手函数</p>
<h1>十二、搭建登录页</h1>
<p>第一步：在后台admin建立一个Public控制器，并建立一个login的方法，输出模板内容</p>
<p><img loading="lazy" decoding="async" width="815" height="262" class="wp-image-7482" src="/wp-content/uploads/2018/06/word-image-89.png" srcset="/wp-content/uploads/2018/06/word-image-89.png 815w, /wp-content/uploads/2018/06/word-image-89-300x96.png 300w, /wp-content/uploads/2018/06/word-image-89-768x247.png 768w" sizes="(max-width: 815px) 100vw, 815px" /></p>
<p>第二步：把后台模板login.html赋值到/admin/view/public/目录下面，并替换静态资源文件路径</p>
<p><img loading="lazy" decoding="async" width="1221" height="368" class="wp-image-7483" src="/wp-content/uploads/2018/06/word-image-90.png" srcset="/wp-content/uploads/2018/06/word-image-90.png 1221w, /wp-content/uploads/2018/06/word-image-90-300x90.png 300w, /wp-content/uploads/2018/06/word-image-90-768x231.png 768w, /wp-content/uploads/2018/06/word-image-90-1024x309.png 1024w" sizes="(max-width: 1221px) 100vw, 1221px" /></p>
<p>效果：<br />
<img loading="lazy" decoding="async" width="775" height="341" class="wp-image-7484" src="/wp-content/uploads/2018/06/word-image-91.png" srcset="/wp-content/uploads/2018/06/word-image-91.png 775w, /wp-content/uploads/2018/06/word-image-91-300x132.png 300w, /wp-content/uploads/2018/06/word-image-91-768x338.png 768w" sizes="(max-width: 775px) 100vw, 775px" /></p>
<p>sublime快捷键：</p>
<p>替换：ctrl+h</p>
<p>找文件：ctrl+p</p>
<h1>十三、控制器中的页面跳转和重定向</h1>
<h2>1、跳转</h2>
<p>在应用开发中，经常会遇到一些带有提示信息的跳转页面，例如操作成功或者操作错误页面，并且自动跳转到另外一个目标页面。系统的\think\Controller类内置了两个跳转方法success和error，用于页面跳转提示</p>
<p>成功跳转：$this-&gt;success($msg,$url,$data,$time)</p>
<p>失败跳转：$this-&gt;error($msg,$url,$data,$time))</p>
<p>参数说明：</p>
<ul>
<li>msg:跳转的提示信息</li>
<li>url:跳转的地址。 建议用助手函数url()生成地址。，失败默认跳回上一页。一般不需要指定</li>
<li>data: 返回的数据，没有则留空</li>
<li>time:默认成功和失败都是3秒，</li>
</ul>
<p>代码如下：</p>
<p><img loading="lazy" decoding="async" width="786" height="379" class="wp-image-7485" src="/wp-content/uploads/2018/06/word-image-92.png" srcset="/wp-content/uploads/2018/06/word-image-92.png 786w, /wp-content/uploads/2018/06/word-image-92-300x145.png 300w, /wp-content/uploads/2018/06/word-image-92-768x370.png 768w" sizes="(max-width: 786px) 100vw, 786px" /></p>
<p>success和error方法源码位置： <img loading="lazy" decoding="async" width="392" height="26" class="wp-image-7486" src="/wp-content/uploads/2018/06/word-image-93.png" srcset="/wp-content/uploads/2018/06/word-image-93.png 392w, /wp-content/uploads/2018/06/word-image-93-300x20.png 300w" sizes="(max-width: 392px) 100vw, 392px" /></p>
<h2>重定向</h2>
<p>语法:</p>
<p>$this-&gt; redirect(url,[$params])</p>
<p>参数说明：</p>
<p>第一个参数必填，后面两个个参数可缺省。</p>
<ul>
<li>$url：跳转的地址, 形式为 “模块/控制器/方法&#8221; 。</li>
</ul>
<p>若直接写方法名如：$this-&gt; redirect(‘index’)，默认会重定向到当前模块的当前控制器的index方法。</p>
<p>若直接写控制器名和方法名如：$this-&gt; redirect(‘index/index’)，默认会重定向到当前模块的index控制器的index方法。</p>
<ul>
<li>$params：跳转携带的参数，数组形式如：传id等于3，array(“id”=&gt;3)</li>
</ul>
<p>$this -&gt; redirect(分组/控制器/操作方法)</p>
<p>跳转到的地址：http://网址/分组/控制器/操作方法</p>
<p>$this -&gt; redirect(分组/控制器/操作方法,[参数1=&gt;值1,参数2=&gt;值2])</p>
<p>跳转到的地址：<a href="/goto/8icy" rel="nofollow">http://网址/分组/控制器/操作方法/参数1/值1/参数2/值</a>2</p>
<p>代码如下：</p>
<p><img loading="lazy" decoding="async" width="800" height="196" class="wp-image-7487" src="/wp-content/uploads/2018/06/word-image-94.png" srcset="/wp-content/uploads/2018/06/word-image-94.png 800w, /wp-content/uploads/2018/06/word-image-94-300x74.png 300w, /wp-content/uploads/2018/06/word-image-94-768x188.png 768w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>问：什么时候使用跳转和重定向？</p>
<p>答：</p>
<p>1、需要给用户操作的提示信息，则用跳转。</p>
<p>一般是删除或编辑失败的时候，这需要给用户提示错误信息，操作失败则用跳转error，成功用success。</p>
<p>2、不需要给任何提示信息，则用重定向。</p>
<p>如用户登录成功不需要给提示信息则直接redirect重定向到首页，登录失败就用error给用户提示错误信息。</p>
<h1>请求Request</h1>
<p>手册参考位置：请求&#8211;&gt;请求信息</p>
<h2>获取Request对象</h2>
<p>图解Request对象、response对象：</p>
<p><img loading="lazy" decoding="async" width="744" height="109" class="wp-image-7488" src="/wp-content/uploads/2018/06/word-image-95.png" srcset="/wp-content/uploads/2018/06/word-image-95.png 744w, /wp-content/uploads/2018/06/word-image-95-300x44.png 300w" sizes="(max-width: 744px) 100vw, 744px" /></p>
<p>图解说明：</p>
<ul>
<li>服务端server把客户端请求过来的相关信息都封装在一个Request对象中。如请求地址、请求参数、请求类型、上传的文件信息等。</li>
<li>服务端server把响应给浏览器的相关信息都封装在一个Response对象。如响应http状态码200给客户端等。</li>
</ul>
<p>获取Request对象的方式：</p>
<p>方式一：</p>
<p>引用\think\Request类 ，$request = Request::instance();</p>
<p><img loading="lazy" decoding="async" width="673" height="350" class="wp-image-7489" src="/wp-content/uploads/2018/06/word-image-96.png" srcset="/wp-content/uploads/2018/06/word-image-96.png 673w, /wp-content/uploads/2018/06/word-image-96-300x156.png 300w" sizes="(max-width: 673px) 100vw, 673px" /></p>
<p>助手调试函数dump()；内部封装pre格式化标签。</p>
<p>方式二（最简单的方式）：</p>
<p>通过tp5框架提供的助手函数request()</p>
<p>$request = request();</p>
<p><img loading="lazy" decoding="async" width="698" height="240" class="wp-image-7490" src="/wp-content/uploads/2018/06/word-image-97.png" srcset="/wp-content/uploads/2018/06/word-image-97.png 698w, /wp-content/uploads/2018/06/word-image-97-300x103.png 300w" sizes="(max-width: 698px) 100vw, 698px" /></p>
<p>方式三：</p>
<p>通过依赖注入（闭包）的方式，把Request对象注入到方法内部</p>
<p>public function 方法名(Request $request){}</p>
<p><img loading="lazy" decoding="async" width="640" height="349" class="wp-image-7491" src="/wp-content/uploads/2018/06/word-image-98.png" srcset="/wp-content/uploads/2018/06/word-image-98.png 640w, /wp-content/uploads/2018/06/word-image-98-300x164.png 300w" sizes="(max-width: 640px) 100vw, 640px" /></p>
<p>相当于把Request类的对象$request作为p4的参数。</p>
<h2>2、获取请求信息</h2>
<p>手册参考位置：请求&#8211;&gt;请求信息</p>
<p>$request-&gt;domain(); // 获取当前域名</p>
<p>$request-&gt;baseFile(); // 获取当前入口文件,不含域名</p>
<p>$request-&gt;url(); // 获取当前URL地址</p>
<p>$request-&gt;url(true); // 包含域名的完整URL地址</p>
<p>$request-&gt;baseUrl(); // 获取当前URL地址 不含QUERY_STRING</p>
<p>$request-&gt;pathinfo(); // 获取URL地址中的PATH_INFO信息</p>
<p>$request-&gt;path(); // 获取URL地址中的PATH_INFO信息 不含后缀</p>
<p>$request-&gt;ext(); // 获取URL地址中的后缀信息</p>
<p>$request-&gt;header(); // 获取当前请求的HTTP 请求头信息</p>
<p>$request-&gt;module(); // 获取当前模块名称</p>
<p>$request-&gt;controller(); // 获取当前控制器名称</p>
<p>$request-&gt;action(); // 获取当前操作名称</p>
<p>$request-&gt;method(); // 获取请求方法</p>
<p>$request-&gt;type(); // 获取资源类型</p>
<p>$request-&gt;ip(); // 获取访问ip地址</p>
<p>$request-&gt;isAjax(); // 判断 是否是ajax请求</p>
<p>$request-&gt;isPost(); // 判断 是否是post请求</p>
<p>$request-&gt;isGet(); // 判断 是否是get请求</p>
<p>代码如下：</p>
<p><img loading="lazy" decoding="async" width="967" height="334" class="wp-image-7492" src="/wp-content/uploads/2018/06/word-image-99.png" srcset="/wp-content/uploads/2018/06/word-image-99.png 967w, /wp-content/uploads/2018/06/word-image-99-300x104.png 300w, /wp-content/uploads/2018/06/word-image-99-768x265.png 768w" sizes="(max-width: 967px) 100vw, 967px" /></p>
<h2>3、获取请求参数</h2>
<p>手册参考位置：请求&#8211;&gt;输入变量</p>
<p>语法：变量类型方法(&#8216;变量名/变量修饰符&#8217;,&#8217;默认值&#8217;,&#8217;过滤方法&#8217;)</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>param</td>
<td>获取当前请求的变量信息</td>
</tr>
<tr>
<td>get</td>
<td>获取 $_GET 变量</td>
</tr>
<tr>
<td>post</td>
<td>获取 $_POST 变量</td>
</tr>
<tr>
<td>session</td>
<td>获取 $_SESSION 变量</td>
</tr>
<tr>
<td>cookie</td>
<td>获取 $_COOKIE 变量</td>
</tr>
<tr>
<td>request</td>
<td>获取 $_REQUEST 变量</td>
</tr>
<tr>
<td>server</td>
<td>获取 $_SERVER 变量</td>
</tr>
<tr>
<td>env</td>
<td>获取 $_ENV 变量</td>
</tr>
<tr>
<td>route</td>
<td>获取 路由（包括PATHINFO） 变量</td>
</tr>
<tr>
<td>file</td>
<td>获取 $_FILES 变量</td>
</tr>
</tbody>
</table>
<h3>（1）获取PARAM变量</h3>
<p>PARAM变量是框架提供的用于自动识别GET、POST或者的一种变量获取方式，是系统推荐的获取请求参数的方法，用法如下：</p>
<p>// 获取当前请求的name变量</p>
<p>$request-&gt;param(&#8216;name&#8217;);</p>
<p>// 获取当前请求的所有变量（经过过滤）</p>
<p>$request-&gt;param();</p>
<p>// 获取当前请求的所有变量（原始数据）</p>
<p>$request-&gt;param(false);</p>
<p>// 获取当前请求的所有变量（包含上传文件）</p>
<p>$request-&gt;param(true);</p>
<p>注：param方法会把当前请求类型的参数和PATH_INFO变量以及GET请求合并。</p>
<p>或使用助手函数实现：</p>
<p>input(&#8216;param.name&#8217;);</p>
<p>input(&#8216;param.&#8217;);</p>
<p>或者</p>
<p>input(&#8216;name&#8217;);</p>
<p>input(&#8221;);</p>
<p>因为input函数默认底默认就采用PARAM方式进行读取变量。</p>
<h3>（2）获取GET变量</h3>
<p>使用内置的助手函数input获取get参数</p>
<p>input(&#8216;id&#8217;);</p>
<p>input(&#8216;name&#8217;);</p>
<p>input(&#8216;get.&#8217;); //获取整个get数组参数</p>
<p>代码如下：</p>
<ol>
<li>把表单设置get方式提交，不写action默认跳转到当前地址</li>
</ol>
<p><img loading="lazy" decoding="async" width="844" height="299" class="wp-image-7493" src="/wp-content/uploads/2018/06/word-image-100.png" srcset="/wp-content/uploads/2018/06/word-image-100.png 844w, /wp-content/uploads/2018/06/word-image-100-300x106.png 300w, /wp-content/uploads/2018/06/word-image-100-768x272.png 768w" sizes="(max-width: 844px) 100vw, 844px" /></p>
<p>假设输入的数据如下：</p>
<p><img loading="lazy" decoding="async" width="492" height="230" class="wp-image-7494" src="/wp-content/uploads/2018/06/word-image-101.png" srcset="/wp-content/uploads/2018/06/word-image-101.png 492w, /wp-content/uploads/2018/06/word-image-101-300x140.png 300w" sizes="(max-width: 492px) 100vw, 492px" /></p>
<p>b、在当前方法p3中接收整个get参数和单个get参数，结果</p>
<p><img loading="lazy" decoding="async" width="1047" height="260" class="wp-image-7495" src="/wp-content/uploads/2018/06/word-image-102.png" srcset="/wp-content/uploads/2018/06/word-image-102.png 1047w, /wp-content/uploads/2018/06/word-image-102-300x74.png 300w, /wp-content/uploads/2018/06/word-image-102-768x191.png 768w, /wp-content/uploads/2018/06/word-image-102-1024x254.png 1024w" sizes="(max-width: 1047px) 100vw, 1047px" /></p>
<h3>（3）获取POST变量</h3>
<p>使用助手函数实现：</p>
<p>input(&#8216;name&#8217;);</p>
<p>input(&#8216;post.&#8217;); //获取整个post数组参数</p>
<p>代码如下：</p>
<p>a、把表单设置post方式提交，不写action默认跳转到当前地址</p>
<p><img loading="lazy" decoding="async" width="756" height="285" class="wp-image-7496" src="/wp-content/uploads/2018/06/word-image-103.png" srcset="/wp-content/uploads/2018/06/word-image-103.png 756w, /wp-content/uploads/2018/06/word-image-103-300x113.png 300w" sizes="(max-width: 756px) 100vw, 756px" /></p>
<p>假设输入的数据如下：</p>
<p><img loading="lazy" decoding="async" width="426" height="126" class="wp-image-7497" src="/wp-content/uploads/2018/06/word-image-104.png" srcset="/wp-content/uploads/2018/06/word-image-104.png 426w, /wp-content/uploads/2018/06/word-image-104-300x89.png 300w" sizes="(max-width: 426px) 100vw, 426px" /></p>
<p>b、在当前方法p3中判断是否是post请求，获取整个post参数和单个post参数</p>
<p><img loading="lazy" decoding="async" width="939" height="355" class="wp-image-7498" src="/wp-content/uploads/2018/06/word-image-105.png" srcset="/wp-content/uploads/2018/06/word-image-105.png 939w, /wp-content/uploads/2018/06/word-image-105-300x113.png 300w, /wp-content/uploads/2018/06/word-image-105-768x290.png 768w" sizes="(max-width: 939px) 100vw, 939px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/7391.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>CI框架 安装、路由、模型、视图、控制器、实现用户CURD、跳转函数封装、分页插件、源码分析</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6501.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6501.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 17:29:40 +0000</pubDate>
				<category><![CDATA[CodeIgniter]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[分页插件]]></category>
		<category><![CDATA[安装]]></category>
		<category><![CDATA[实现用户CURD]]></category>
		<category><![CDATA[控制器]]></category>
		<category><![CDATA[模型]]></category>
		<category><![CDATA[源码分析]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[路由]]></category>
		<category><![CDATA[跳转函数封装]]></category>
		<guid isPermaLink="false">/?p=6501</guid>

					<description><![CDATA[CI框架 angularJs框架（运行一些设计模式、依赖注入）、laravel（依赖注入）。学习思想上的东西。 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>CI框架</h1>
<p>angularJs框架（运行一些设计模式、依赖注入）、laravel（依赖注入）。学习思想上的东西。</p>
<p>今天CI框架会带大家看源码（前题声明难度有点大）。</p>
<h2>①-框架简介</h2>
<p>CI框架，是一个非常小巧和轻量级的框架，也是最容易入门的框架（里面有一个按需加载的概念，CI框架很多东西都不会自动的载入，当你需要的时候，需要自己去手工的载入，所以它的性能在众多框架中算是比较快的一个（php框架），至少比laravel快了很多。在众多框架中laravel应该是算得上是最慢的。</p>
<p>目前比较流行的框架有CI、laravel；同时还有一些性能为主的C语言框架，例如yaf（c语言框架、使用C语言为php编写了一个扩展windows php_yaf.dll文件 mbstring.dll Linux php_yaf.so&#8212;php.ini）、phaclon（这个框架是国外开发的，性能完全不必yaf差，普及度不及国人开发的yaf）等。</p>
<p>框架就是php自带的，直接可以使用，yaf框架是不提供模型的。</p>
<p>class UserController extends Yaf_Controller{</p>
<p>}</p>
<p><img loading="lazy" decoding="async" width="819" height="290" class="wp-image-6746" src="/wp-content/uploads/2018/05/word-image-6150.png" srcset="/wp-content/uploads/2018/05/word-image-6150.png 819w, /wp-content/uploads/2018/05/word-image-6150-300x106.png 300w, /wp-content/uploads/2018/05/word-image-6150-768x272.png 768w" sizes="(max-width: 819px) 100vw, 819px" /></p>
<p>面对过程、面向对象、面向切面？</p>
<p>答：这三种思想没有哪一个是最好，只有合适自己的业务就是最优的。</p>
<p>问题：为什么laravel这么慢，还有那么多企业在使用？</p>
<p>答：谈一下个人的理解。</p>
<ol>
<li>属于跟风比较多。（很多企业压根就不了解这个框架，只是看到市场现状很多人在使用，那么觉得也要跟上潮流、不得不使用）鸭子现象（从众）</li>
<li>这个框架应用了很多的设计模式，便于开发和维护（并且还要知道laravel产品就是syfomy框架的儿子）</li>
<li>非常明显的一个特点，重路由设计。每一个控制器的方法的访问都必须要设计一个URL地址（路由规则）。index.php/user/add &#8212;&#8212;-&gt; goods/lst 设置在laravel里面可以不存在控制器、也可以不存在模型，视图也可以不存在，但是路由必须存在（可以把所有的业务逻辑放在路由里面完成）。主要是现在web项目相关的项目更倾向于前后端相分离（API接口&#8212;》URL地址&#8212;》路由规则）。</li>
<li>目前框架使用composer的管理工具，可以把互联网上所有php好的工具类库全部整合在一起。（composer理解成node的npm或者Linux的yum工具、前端的bower） composer install upload</li>
<li>并且laravel框架是完全的面向对象的框架，并且只有面向对象的编程思想才可以更好的和现实社会形成联系。（面向对象里面的思想可以和一物一世界完全对应）（面向过程、面向对象、面向切面【钩子函数的思想】&#8230;..）</li>
</ol>
<p>TP里面钩子函数：只需要用户定义在特定的位置，不需要手工的执行，框架会在特定的时间执行这个钩子函数，对数据进行处理。（AOP就是面向切面编程的缩写）</p>
<h2>②-CI框架简介</h2>
<ol>
<li>什么CI框架？</li>
</ol>
<p>答：是一个外国人开发的小巧的框架。目前存在两个主流分支版本，一个是3.x系列，一个是2.x系列。本次课程学习是2.x系列，企业基本都是选择这个版本。（LTS:长时间维护，3年左右的维护期）</p>
<p><img loading="lazy" decoding="async" width="1188" height="337" class="wp-image-6747" src="/wp-content/uploads/2018/05/word-image-6151.png" srcset="/wp-content/uploads/2018/05/word-image-6151.png 1188w, /wp-content/uploads/2018/05/word-image-6151-300x85.png 300w, /wp-content/uploads/2018/05/word-image-6151-768x218.png 768w, /wp-content/uploads/2018/05/word-image-6151-1024x290.png 1024w" sizes="(max-width: 1188px) 100vw, 1188px" /></p>
<h2>③-CI框架入门使用</h2>
<p>框架资料</p>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6748" src="/wp-content/uploads/2018/05/word-image-6152.png" srcset="/wp-content/uploads/2018/05/word-image-6152.png 849w, /wp-content/uploads/2018/05/word-image-6152-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6152-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>在虚拟主机目录解压对应的框架</li>
</ol>
<p>整体目录结构</p>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6749" src="/wp-content/uploads/2018/05/word-image-6153.png" srcset="/wp-content/uploads/2018/05/word-image-6153.png 849w, /wp-content/uploads/2018/05/word-image-6153-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6153-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<p>分析核心代码目录</p>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6750" src="/wp-content/uploads/2018/05/word-image-6154.png" srcset="/wp-content/uploads/2018/05/word-image-6154.png 849w, /wp-content/uploads/2018/05/word-image-6154-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6154-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /> <img loading="lazy" decoding="async" width="311" height="223" class="wp-image-6751" src="/wp-content/uploads/2018/05/word-image-6155.png" srcset="/wp-content/uploads/2018/05/word-image-6155.png 311w, /wp-content/uploads/2018/05/word-image-6155-300x215.png 300w" sizes="(max-width: 311px) 100vw, 311px" /> <img loading="lazy" decoding="async" width="362" height="321" class="wp-image-6752" src="/wp-content/uploads/2018/05/word-image-6156.png" srcset="/wp-content/uploads/2018/05/word-image-6156.png 362w, /wp-content/uploads/2018/05/word-image-6156-300x266.png 300w" sizes="(max-width: 362px) 100vw, 362px" /></p>
<p>application目录</p>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6753" src="/wp-content/uploads/2018/05/word-image-6157.png" srcset="/wp-content/uploads/2018/05/word-image-6157.png 849w, /wp-content/uploads/2018/05/word-image-6157-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6157-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<p>例如：自己扩展CI的控制器类</p>
<p><img loading="lazy" decoding="async" width="626" height="217" class="wp-image-6754" src="/wp-content/uploads/2018/05/word-image-6158.png" srcset="/wp-content/uploads/2018/05/word-image-6158.png 626w, /wp-content/uploads/2018/05/word-image-6158-300x104.png 300w" sizes="(max-width: 626px) 100vw, 626px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6755" src="/wp-content/uploads/2018/05/word-image-6159.png" srcset="/wp-content/uploads/2018/05/word-image-6159.png 1366w, /wp-content/uploads/2018/05/word-image-6159-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6159-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6159-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>ci框架的访问</li>
</ol>
<p>两种访问方式，直接访问，全路径访问</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6756" src="/wp-content/uploads/2018/05/word-image-6160.png" srcset="/wp-content/uploads/2018/05/word-image-6160.png 1366w, /wp-content/uploads/2018/05/word-image-6160-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6160-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6160-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>全路径访问（默认控制器是welcome控制器、方法是index方法；URL访问模式叫做pathinfo）</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6758" src="/wp-content/uploads/2018/05/word-image-6161.png" srcset="/wp-content/uploads/2018/05/word-image-6161.png 1366w, /wp-content/uploads/2018/05/word-image-6161-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6161-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6161-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>index.php?m=Home&amp;c=Index&amp;a=index （普通模式）</p>
<p>index.php/Home/Index/index （pathinfo模式）</p>
<p>index.php?s=Home&amp;Index&amp;lst（兼容模式）</p>
<p>Index-lst-12.html &#8212;-&gt; index/Home/Index/lst/12 （重写模式）</p>
<h2>④-CI框架-控制器</h2>
<p>如何上手一个CI框架？</p>
<p>答：1. 学习控制器 2. 学习视图 3. 学习模型</p>
<p>具体：</p>
<p>一个控制器如何学习？</p>
<ol>
<li>学习控制器写在哪里？</li>
<li>控制器文件的命令如何命名？</li>
<li>文件里面的内容如何书写？有哪些注意事项？</li>
<li>控制器里面的方法如何书写？注意事项？</li>
<li>控制器方法里面如何载入视图？</li>
<li>如何给视图赋值变量？</li>
<li>视图里面如何显示变量信息？</li>
<li>最后如何在控制器里面实例化模型，从数据库获取数据？</li>
</ol>
<p>实操：</p>
<ol>
<li>控制器文件写在哪里？</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6759" src="/wp-content/uploads/2018/05/word-image-6162.png" srcset="/wp-content/uploads/2018/05/word-image-6162.png 849w, /wp-content/uploads/2018/05/word-image-6162-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6162-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>控制器文件如何命名？</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6760" src="/wp-content/uploads/2018/05/word-image-6163.png" srcset="/wp-content/uploads/2018/05/word-image-6163.png 849w, /wp-content/uploads/2018/05/word-image-6163-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6163-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>控制器里面的内容如何书写？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1314" height="145" class="wp-image-6761" src="/wp-content/uploads/2018/05/word-image-6164.png" srcset="/wp-content/uploads/2018/05/word-image-6164.png 1314w, /wp-content/uploads/2018/05/word-image-6164-300x33.png 300w, /wp-content/uploads/2018/05/word-image-6164-768x85.png 768w, /wp-content/uploads/2018/05/word-image-6164-1024x113.png 1024w" sizes="(max-width: 1314px) 100vw, 1314px" /></p>
<p>确保所有的请求都是从单入口开始的。</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6762" src="/wp-content/uploads/2018/05/word-image-6165.png" srcset="/wp-content/uploads/2018/05/word-image-6165.png 1366w, /wp-content/uploads/2018/05/word-image-6165-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6165-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6165-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>控制器里面的方法如何书写？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6763" src="/wp-content/uploads/2018/05/word-image-6166.png" srcset="/wp-content/uploads/2018/05/word-image-6166.png 1366w, /wp-content/uploads/2018/05/word-image-6166-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6166-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6166-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>浏览器访问</p>
<p><img loading="lazy" decoding="async" width="631" height="192" class="wp-image-6764" src="/wp-content/uploads/2018/05/word-image-6167.png" srcset="/wp-content/uploads/2018/05/word-image-6167.png 631w, /wp-content/uploads/2018/05/word-image-6167-300x91.png 300w" sizes="(max-width: 631px) 100vw, 631px" /></p>
<p>注意：在CI框架里面，方法名称不能以_下划线开头，在浏览器是无法访问，但是不影响在类的方法内部被调用</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6765" src="/wp-content/uploads/2018/05/word-image-6168.png" srcset="/wp-content/uploads/2018/05/word-image-6168.png 1366w, /wp-content/uploads/2018/05/word-image-6168-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6168-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6168-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="602" height="220" class="wp-image-6766" src="/wp-content/uploads/2018/05/word-image-6169.png" srcset="/wp-content/uploads/2018/05/word-image-6169.png 602w, /wp-content/uploads/2018/05/word-image-6169-300x110.png 300w" sizes="(max-width: 602px) 100vw, 602px" /></p>
<p>注意：内部使用不受影响</p>
<p><img loading="lazy" decoding="async" width="842" height="482" class="wp-image-6767" src="/wp-content/uploads/2018/05/word-image-6170.png" srcset="/wp-content/uploads/2018/05/word-image-6170.png 842w, /wp-content/uploads/2018/05/word-image-6170-300x172.png 300w, /wp-content/uploads/2018/05/word-image-6170-768x440.png 768w" sizes="(max-width: 842px) 100vw, 842px" /></p>
<p>5. 注意：CI框架控制器里面有一个方法比较特殊，叫做_remap方法，该方法会在其他方法被调用之前，自动的调用</p>
<p><img loading="lazy" decoding="async" width="1160" height="371" class="wp-image-6768" src="/wp-content/uploads/2018/05/word-image-6171.png" srcset="/wp-content/uploads/2018/05/word-image-6171.png 1160w, /wp-content/uploads/2018/05/word-image-6171-300x96.png 300w, /wp-content/uploads/2018/05/word-image-6171-768x246.png 768w, /wp-content/uploads/2018/05/word-image-6171-1024x328.png 1024w" sizes="(max-width: 1160px) 100vw, 1160px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="852" height="216" class="wp-image-6769" src="/wp-content/uploads/2018/05/word-image-6172.png" srcset="/wp-content/uploads/2018/05/word-image-6172.png 852w, /wp-content/uploads/2018/05/word-image-6172-300x76.png 300w, /wp-content/uploads/2018/05/word-image-6172-768x195.png 768w" sizes="(max-width: 852px) 100vw, 852px" /></p>
<p>实际操作：可以做一个简单的前台权限的验证操作。</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6770" src="/wp-content/uploads/2018/05/word-image-6173.png" srcset="/wp-content/uploads/2018/05/word-image-6173.png 1366w, /wp-content/uploads/2018/05/word-image-6173-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6173-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6173-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>验证</p>
<p><img loading="lazy" decoding="async" width="1177" height="510" class="wp-image-6771" src="/wp-content/uploads/2018/05/word-image-6174.png" srcset="/wp-content/uploads/2018/05/word-image-6174.png 1177w, /wp-content/uploads/2018/05/word-image-6174-300x130.png 300w, /wp-content/uploads/2018/05/word-image-6174-768x333.png 768w, /wp-content/uploads/2018/05/word-image-6174-1024x444.png 1024w" sizes="(max-width: 1177px) 100vw, 1177px" /></p>
<p>6. 方法里面如何载入视图？</p>
<p><img loading="lazy" decoding="async" width="885" height="272" class="wp-image-6772" src="/wp-content/uploads/2018/05/word-image-6175.png" srcset="/wp-content/uploads/2018/05/word-image-6175.png 885w, /wp-content/uploads/2018/05/word-image-6175-300x92.png 300w, /wp-content/uploads/2018/05/word-image-6175-768x236.png 768w" sizes="(max-width: 885px) 100vw, 885px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="970" height="471" class="wp-image-6773" src="/wp-content/uploads/2018/05/word-image-6176.png" srcset="/wp-content/uploads/2018/05/word-image-6176.png 970w, /wp-content/uploads/2018/05/word-image-6176-300x146.png 300w, /wp-content/uploads/2018/05/word-image-6176-768x373.png 768w" sizes="(max-width: 970px) 100vw, 970px" /></p>
<h2>⑤-CI框架-视图</h2>
<p>思考：</p>
<ol>
<li>视图写在哪里？</li>
<li>视图文件如何命名？</li>
<li>视图内容如何书写？</li>
<li>控制器如何调用视图，如何给视图赋值</li>
<li>视图里面如何显示变量（是否可以使用标签语法、或者原生写法）</li>
<li>视图可以分目录管理</li>
<li>控制器里面可以载入多个视图</li>
<li>视图可以分目录管理，那么控制器是否可以分目录管理？可以（分目录其实就是之前其他框架里面的分模块管理：前台、后台）</li>
</ol>
<p>实操</p>
<ol>
<li>写在哪里？</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6774" src="/wp-content/uploads/2018/05/word-image-6177.png" srcset="/wp-content/uploads/2018/05/word-image-6177.png 849w, /wp-content/uploads/2018/05/word-image-6177-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6177-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>视图文件如何命名？</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6775" src="/wp-content/uploads/2018/05/word-image-6178.png" srcset="/wp-content/uploads/2018/05/word-image-6178.png 849w, /wp-content/uploads/2018/05/word-image-6178-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6178-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>视图里面的内容如何书写？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6776" src="/wp-content/uploads/2018/05/word-image-6179.png" srcset="/wp-content/uploads/2018/05/word-image-6179.png 1366w, /wp-content/uploads/2018/05/word-image-6179-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6179-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6179-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>4. 如何在控制器里面载入视图文件？</p>
<p><img loading="lazy" decoding="async" width="793" height="316" class="wp-image-6777" src="/wp-content/uploads/2018/05/word-image-6180.png" srcset="/wp-content/uploads/2018/05/word-image-6180.png 793w, /wp-content/uploads/2018/05/word-image-6180-300x120.png 300w, /wp-content/uploads/2018/05/word-image-6180-768x306.png 768w" sizes="(max-width: 793px) 100vw, 793px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="635" height="187" class="wp-image-6778" src="/wp-content/uploads/2018/05/word-image-6181.png" srcset="/wp-content/uploads/2018/05/word-image-6181.png 635w, /wp-content/uploads/2018/05/word-image-6181-300x88.png 300w" sizes="(max-width: 635px) 100vw, 635px" /></p>
<p>5. 如何在控制器里面给视图赋值变量，然后让变量在视图文件显示？</p>
<p>第一种方式赋值[使用少]</p>
<p><img loading="lazy" decoding="async" width="930" height="449" class="wp-image-6779" src="/wp-content/uploads/2018/05/word-image-6182.png" srcset="/wp-content/uploads/2018/05/word-image-6182.png 930w, /wp-content/uploads/2018/05/word-image-6182-300x145.png 300w, /wp-content/uploads/2018/05/word-image-6182-768x371.png 768w" sizes="(max-width: 930px) 100vw, 930px" /></p>
<p>视图代码</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6780" src="/wp-content/uploads/2018/05/word-image-6183.png" srcset="/wp-content/uploads/2018/05/word-image-6183.png 1366w, /wp-content/uploads/2018/05/word-image-6183-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6183-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6183-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="493" height="181" class="wp-image-6781" src="/wp-content/uploads/2018/05/word-image-6184.png" srcset="/wp-content/uploads/2018/05/word-image-6184.png 493w, /wp-content/uploads/2018/05/word-image-6184-300x110.png 300w" sizes="(max-width: 493px) 100vw, 493px" /></p>
<p>第二种方式[使用多]</p>
<p><img loading="lazy" decoding="async" width="1193" height="502" class="wp-image-6782" src="/wp-content/uploads/2018/05/word-image-6185.png" srcset="/wp-content/uploads/2018/05/word-image-6185.png 1193w, /wp-content/uploads/2018/05/word-image-6185-300x126.png 300w, /wp-content/uploads/2018/05/word-image-6185-768x323.png 768w, /wp-content/uploads/2018/05/word-image-6185-1024x431.png 1024w" sizes="(max-width: 1193px) 100vw, 1193px" /></p>
<p>视图代码</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6783" src="/wp-content/uploads/2018/05/word-image-6186.png" srcset="/wp-content/uploads/2018/05/word-image-6186.png 1366w, /wp-content/uploads/2018/05/word-image-6186-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6186-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6186-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="549" height="322" class="wp-image-6784" src="/wp-content/uploads/2018/05/word-image-6187.png" srcset="/wp-content/uploads/2018/05/word-image-6187.png 549w, /wp-content/uploads/2018/05/word-image-6187-300x176.png 300w" sizes="(max-width: 549px) 100vw, 549px" /></p>
<p>6. 注意：CI框架里面的控制器和视图是否可以分目录保存？</p>
<p>控制器分目录，书写位置：</p>
<p><img loading="lazy" decoding="async" width="647" height="192" class="wp-image-6785" src="/wp-content/uploads/2018/05/word-image-6188.png" srcset="/wp-content/uploads/2018/05/word-image-6188.png 647w, /wp-content/uploads/2018/05/word-image-6188-300x89.png 300w" sizes="(max-width: 647px) 100vw, 647px" /></p>
<p>控制器代码：</p>
<p><img loading="lazy" decoding="async" width="1025" height="376" class="wp-image-6786" src="/wp-content/uploads/2018/05/word-image-6189.png" srcset="/wp-content/uploads/2018/05/word-image-6189.png 1025w, /wp-content/uploads/2018/05/word-image-6189-300x110.png 300w, /wp-content/uploads/2018/05/word-image-6189-768x282.png 768w, /wp-content/uploads/2018/05/word-image-6189-1024x376.png 1024w" sizes="(max-width: 1025px) 100vw, 1025px" /></p>
<p>访问：</p>
<p><img loading="lazy" decoding="async" width="801" height="189" class="wp-image-6787" src="/wp-content/uploads/2018/05/word-image-6190.png" srcset="/wp-content/uploads/2018/05/word-image-6190.png 801w, /wp-content/uploads/2018/05/word-image-6190-300x71.png 300w, /wp-content/uploads/2018/05/word-image-6190-768x181.png 768w" sizes="(max-width: 801px) 100vw, 801px" /></p>
<p>视图分目录，书写位置：</p>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6790" src="/wp-content/uploads/2018/05/word-image-6191.png" srcset="/wp-content/uploads/2018/05/word-image-6191.png 849w, /wp-content/uploads/2018/05/word-image-6191-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6191-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<p>控制器代码</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6792" src="/wp-content/uploads/2018/05/word-image-6192.png" srcset="/wp-content/uploads/2018/05/word-image-6192.png 1366w, /wp-content/uploads/2018/05/word-image-6192-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6192-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6192-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6793" src="/wp-content/uploads/2018/05/word-image-6193.png" srcset="/wp-content/uploads/2018/05/word-image-6193.png 1366w, /wp-content/uploads/2018/05/word-image-6193-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6193-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6193-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>注意：CI框架里面的控制器里面可以载入多个视图</p>
<p>视图文件位置：</p>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6794" src="/wp-content/uploads/2018/05/word-image-6194.png" srcset="/wp-content/uploads/2018/05/word-image-6194.png 849w, /wp-content/uploads/2018/05/word-image-6194-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6194-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<p>控制器代码：</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6795" src="/wp-content/uploads/2018/05/word-image-6195.png" srcset="/wp-content/uploads/2018/05/word-image-6195.png 1366w, /wp-content/uploads/2018/05/word-image-6195-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6195-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6195-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6796" src="/wp-content/uploads/2018/05/word-image-6196.png" srcset="/wp-content/uploads/2018/05/word-image-6196.png 1366w, /wp-content/uploads/2018/05/word-image-6196-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6196-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6196-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h2>⑥-数据库操作</h2>
<p>思考：</p>
<ol>
<li>在CI如何书写配置信息？</li>
<li>在CI里面如何从数据库里面获取数据？</li>
</ol>
<p>实操：</p>
<ol>
<li>建一个用户表</li>
</ol>
<p><img loading="lazy" decoding="async" width="770" height="298" class="wp-image-6797" src="/wp-content/uploads/2018/05/word-image-6197.png" srcset="/wp-content/uploads/2018/05/word-image-6197.png 770w, /wp-content/uploads/2018/05/word-image-6197-300x116.png 300w, /wp-content/uploads/2018/05/word-image-6197-768x297.png 768w" sizes="(max-width: 770px) 100vw, 770px" /></p>
<ol>
<li>先配置数据库的信息</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6798" src="/wp-content/uploads/2018/05/word-image-6198.png" srcset="/wp-content/uploads/2018/05/word-image-6198.png 849w, /wp-content/uploads/2018/05/word-image-6198-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6198-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<p>配置</p>
<p><img loading="lazy" decoding="async" width="565" height="291" class="wp-image-6799" src="/wp-content/uploads/2018/05/word-image-6199.png" srcset="/wp-content/uploads/2018/05/word-image-6199.png 565w, /wp-content/uploads/2018/05/word-image-6199-300x155.png 300w" sizes="(max-width: 565px) 100vw, 565px" /></p>
<ol>
<li>在控制器里面获取数据库的数据</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6800" src="/wp-content/uploads/2018/05/word-image-6200.png" srcset="/wp-content/uploads/2018/05/word-image-6200.png 1366w, /wp-content/uploads/2018/05/word-image-6200-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6200-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6200-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>在视图里面显示</li>
</ol>
<p>视图</p>
<p><img loading="lazy" decoding="async" width="730" height="373" class="wp-image-6803" src="/wp-content/uploads/2018/05/word-image-6203.png" srcset="/wp-content/uploads/2018/05/word-image-6203.png 730w, /wp-content/uploads/2018/05/word-image-6203-300x153.png 300w" sizes="(max-width: 730px) 100vw, 730px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6807" src="/wp-content/uploads/2018/05/word-image-6207.png" srcset="/wp-content/uploads/2018/05/word-image-6207.png 1366w, /wp-content/uploads/2018/05/word-image-6207-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6207-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6207-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6812" src="/wp-content/uploads/2018/05/word-image-6212.png" srcset="/wp-content/uploads/2018/05/word-image-6212.png 1366w, /wp-content/uploads/2018/05/word-image-6212-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6212-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6212-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>注意事项：在获取数据操作的时候，必须连接数据[$this-&gt;load-&gt;datebase()], 但是有的时候容易忘记，所以可以自动载入</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6816" src="/wp-content/uploads/2018/05/word-image-6216.png" srcset="/wp-content/uploads/2018/05/word-image-6216.png 1366w, /wp-content/uploads/2018/05/word-image-6216-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6216-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6216-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>在控制器里面就不需要在手工的连接</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6820" src="/wp-content/uploads/2018/05/word-image-6220.png" srcset="/wp-content/uploads/2018/05/word-image-6220.png 1366w, /wp-content/uploads/2018/05/word-image-6220-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6220-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6220-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>这个也被称为CI里面的按需加载。【要连接数据库，才使用$this-&gt;load-&gt;database()连接】</p>
<h2>⑦-CI框架-模型</h2>
<p>思考：</p>
<ol>
<li>模型文件写哪里？</li>
<li>模型文件如何命名？</li>
<li>模型文件里面的内容如何书写？</li>
<li>在控制器里面如何调用模型？</li>
</ol>
<p>实操：</p>
<ol>
<li>模型文件写哪里？</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6824" src="/wp-content/uploads/2018/05/word-image-6224.png" srcset="/wp-content/uploads/2018/05/word-image-6224.png 849w, /wp-content/uploads/2018/05/word-image-6224-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6224-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>模型文件如何命名的问题？</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6828" src="/wp-content/uploads/2018/05/word-image-6228.png" srcset="/wp-content/uploads/2018/05/word-image-6228.png 849w, /wp-content/uploads/2018/05/word-image-6228-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6228-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>模型里面的内容书写</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6832" src="/wp-content/uploads/2018/05/word-image-6232.png" srcset="/wp-content/uploads/2018/05/word-image-6232.png 1366w, /wp-content/uploads/2018/05/word-image-6232-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6232-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6232-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>书写一个get_user方法获取数据</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6837" src="/wp-content/uploads/2018/05/word-image-6237.png" srcset="/wp-content/uploads/2018/05/word-image-6237.png 1366w, /wp-content/uploads/2018/05/word-image-6237-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6237-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6237-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>在控制器里面调用</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6841" src="/wp-content/uploads/2018/05/word-image-6241.png" srcset="/wp-content/uploads/2018/05/word-image-6241.png 1366w, /wp-content/uploads/2018/05/word-image-6241-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6241-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6241-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>视图显示数据</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6845" src="/wp-content/uploads/2018/05/word-image-6245.png" srcset="/wp-content/uploads/2018/05/word-image-6245.png 1366w, /wp-content/uploads/2018/05/word-image-6245-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6245-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6245-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h1>简单的实现一套用户的curd</h1>
<p>使用CI框架实现一套完整的增删改查。</p>
<h2>①-用户增加</h2>
<ol>
<li>在user.php控制器文件增加一个add_user方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6848" src="/wp-content/uploads/2018/05/word-image-6248.png" srcset="/wp-content/uploads/2018/05/word-image-6248.png 1366w, /wp-content/uploads/2018/05/word-image-6248-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6248-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6248-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>增加一个add_user.php视图文件</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6851" src="/wp-content/uploads/2018/05/word-image-6251.png" srcset="/wp-content/uploads/2018/05/word-image-6251.png 1366w, /wp-content/uploads/2018/05/word-image-6251-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6251-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6251-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p><strong>备注：在form表单提交的actione里面使用site_url函数之前，需要在自动载入里面进行配置。</strong></p>
<p><img loading="lazy" decoding="async" width="839" height="247" class="wp-image-6854" src="/wp-content/uploads/2018/05/word-image-6254.png" srcset="/wp-content/uploads/2018/05/word-image-6254.png 839w, /wp-content/uploads/2018/05/word-image-6254-300x88.png 300w, /wp-content/uploads/2018/05/word-image-6254-768x226.png 768w" sizes="(max-width: 839px) 100vw, 839px" /></p>
<ol>
<li>在user_model.php文件里面增加一个add_user方法，入库数据</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6856" src="/wp-content/uploads/2018/05/word-image-6256.png" srcset="/wp-content/uploads/2018/05/word-image-6256.png 1366w, /wp-content/uploads/2018/05/word-image-6256-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6256-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6256-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h2>②-用户展示</h2>
<p>1. 在user_model.php模型文件增加一个get_user方法</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6859" src="/wp-content/uploads/2018/05/word-image-6259.png" srcset="/wp-content/uploads/2018/05/word-image-6259.png 1366w, /wp-content/uploads/2018/05/word-image-6259-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6259-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6259-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>在user.php控制器里面增加一个get_user方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6861" src="/wp-content/uploads/2018/05/word-image-6261.png" srcset="/wp-content/uploads/2018/05/word-image-6261.png 1366w, /wp-content/uploads/2018/05/word-image-6261-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6261-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6261-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>3. 在lst.php视图显示数据</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6863" src="/wp-content/uploads/2018/05/word-image-6263.png" srcset="/wp-content/uploads/2018/05/word-image-6263.png 1366w, /wp-content/uploads/2018/05/word-image-6263-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6263-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6263-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h2>③-用户删除</h2>
<ol>
<li>修改lst.php视图文件，增加删除链接</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6865" src="/wp-content/uploads/2018/05/word-image-6265.png" srcset="/wp-content/uploads/2018/05/word-image-6265.png 1366w, /wp-content/uploads/2018/05/word-image-6265-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6265-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6265-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6867" src="/wp-content/uploads/2018/05/word-image-6267.png" srcset="/wp-content/uploads/2018/05/word-image-6267.png 1366w, /wp-content/uploads/2018/05/word-image-6267-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6267-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6267-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>在user.php控制器里面定义del_user方法，完成删除操作</li>
</ol>
<p>注意：获取地址栏里的主键id，需要使用按段获取</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6869" src="/wp-content/uploads/2018/05/word-image-6269.png" srcset="/wp-content/uploads/2018/05/word-image-6269.png 1366w, /wp-content/uploads/2018/05/word-image-6269-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6269-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6269-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6871" src="/wp-content/uploads/2018/05/word-image-6271.png" srcset="/wp-content/uploads/2018/05/word-image-6271.png 1366w, /wp-content/uploads/2018/05/word-image-6271-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6271-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6271-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>3. 在user_model.php模型里面定义一个del_user方法【特别注意：在CI里面做数据删除的时候，需要根据受影响的行来判断数据是否删除成功！】【$this-&gt;db-&gt;delete方法的返回值是sql语句是否成功运行】</p>
<p><img loading="lazy" decoding="async" width="1190" height="392" class="wp-image-6873" src="/wp-content/uploads/2018/05/word-image-6273.png" srcset="/wp-content/uploads/2018/05/word-image-6273.png 1190w, /wp-content/uploads/2018/05/word-image-6273-300x99.png 300w, /wp-content/uploads/2018/05/word-image-6273-768x253.png 768w, /wp-content/uploads/2018/05/word-image-6273-1024x337.png 1024w" sizes="(max-width: 1190px) 100vw, 1190px" /></p>
<p>调试技巧：获取上一次执行的sql语句。</p>
<p><img loading="lazy" decoding="async" width="1159" height="409" class="wp-image-6875" src="/wp-content/uploads/2018/05/word-image-6275.png" srcset="/wp-content/uploads/2018/05/word-image-6275.png 1159w, /wp-content/uploads/2018/05/word-image-6275-300x106.png 300w, /wp-content/uploads/2018/05/word-image-6275-768x271.png 768w, /wp-content/uploads/2018/05/word-image-6275-1024x361.png 1024w" sizes="(max-width: 1159px) 100vw, 1159px" /></p>
<h2>④-用户编辑</h2>
<ol>
<li>在lst.php视图里面增加一个编辑的链接</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6877" src="/wp-content/uploads/2018/05/word-image-6277.png" srcset="/wp-content/uploads/2018/05/word-image-6277.png 1366w, /wp-content/uploads/2018/05/word-image-6277-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6277-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6277-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6879" src="/wp-content/uploads/2018/05/word-image-6279.png" srcset="/wp-content/uploads/2018/05/word-image-6279.png 1366w, /wp-content/uploads/2018/05/word-image-6279-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6279-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6279-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>在user.php控制器里面增加一个edt_user方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6881" src="/wp-content/uploads/2018/05/word-image-6281.png" srcset="/wp-content/uploads/2018/05/word-image-6281.png 1366w, /wp-content/uploads/2018/05/word-image-6281-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6281-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6281-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6884" src="/wp-content/uploads/2018/05/word-image-6283.png" srcset="/wp-content/uploads/2018/05/word-image-6283.png 1366w, /wp-content/uploads/2018/05/word-image-6283-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6283-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6283-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>在user_model.php模型文件增加两个方法find_one和edt_user方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1166" height="721" class="wp-image-6887" src="/wp-content/uploads/2018/05/word-image-6286.png" srcset="/wp-content/uploads/2018/05/word-image-6286.png 1166w, /wp-content/uploads/2018/05/word-image-6286-300x186.png 300w, /wp-content/uploads/2018/05/word-image-6286-768x475.png 768w, /wp-content/uploads/2018/05/word-image-6286-1024x633.png 1024w" sizes="(max-width: 1166px) 100vw, 1166px" /></p>
<ol>
<li>增加一个edt.php视图文件</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6889" src="/wp-content/uploads/2018/05/word-image-6288.png" srcset="/wp-content/uploads/2018/05/word-image-6288.png 1366w, /wp-content/uploads/2018/05/word-image-6288-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6288-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6288-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h1>三、跳转函数封装</h1>
<p>由于CI框架里面的跳转函数是redirect函数，它不能实现跳转的时候带提示信息。</p>
<p>我们可以参照TP的实现，封装一个带提示的跳转函数。</p>
<ol>
<li>参照TP的实现，完成一个函数的封装，写到如下位置</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6891" src="/wp-content/uploads/2018/05/word-image-6290.png" srcset="/wp-content/uploads/2018/05/word-image-6290.png 849w, /wp-content/uploads/2018/05/word-image-6290-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6290-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>调用</li>
</ol>
<p>自动载入自己定义的函数</p>
<p><img loading="lazy" decoding="async" width="1057" height="355" class="wp-image-6893" src="/wp-content/uploads/2018/05/word-image-6292.png" srcset="/wp-content/uploads/2018/05/word-image-6292.png 1057w, /wp-content/uploads/2018/05/word-image-6292-300x101.png 300w, /wp-content/uploads/2018/05/word-image-6292-768x258.png 768w, /wp-content/uploads/2018/05/word-image-6292-1024x344.png 1024w" sizes="(max-width: 1057px) 100vw, 1057px" /></p>
<p>使用</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6895" src="/wp-content/uploads/2018/05/word-image-6294.png" srcset="/wp-content/uploads/2018/05/word-image-6294.png 1366w, /wp-content/uploads/2018/05/word-image-6294-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6294-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6294-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="587" height="348" class="wp-image-6897" src="/wp-content/uploads/2018/05/word-image-6296.png" srcset="/wp-content/uploads/2018/05/word-image-6296.png 587w, /wp-content/uploads/2018/05/word-image-6296-300x178.png 300w" sizes="(max-width: 587px) 100vw, 587px" /></p>
<h1>四、分页插件</h1>
<h2>①-Ajax分页</h2>
<p>在CI里面实现Ajax无刷新分页的效果，还使用一个pagination插件。</p>
<p>网站:http://www.zhangxinxu.com/jq/pagination_zh/</p>
<ol>
<li>在项目引入分页插件</li>
</ol>
<p><img loading="lazy" decoding="async" width="849" height="591" class="wp-image-6899" src="/wp-content/uploads/2018/05/word-image-6298.png" srcset="/wp-content/uploads/2018/05/word-image-6298.png 849w, /wp-content/uploads/2018/05/word-image-6298-300x209.png 300w, /wp-content/uploads/2018/05/word-image-6298-768x535.png 768w" sizes="(max-width: 849px) 100vw, 849px" /></p>
<ol>
<li>在页面调用分页插件css和js</li>
</ol>
<p><img loading="lazy" decoding="async" width="1085" height="301" class="wp-image-6901" src="/wp-content/uploads/2018/05/word-image-6300.png" srcset="/wp-content/uploads/2018/05/word-image-6300.png 1085w, /wp-content/uploads/2018/05/word-image-6300-300x83.png 300w, /wp-content/uploads/2018/05/word-image-6300-768x213.png 768w, /wp-content/uploads/2018/05/word-image-6300-1024x284.png 1024w" sizes="(max-width: 1085px) 100vw, 1085px" /> <img loading="lazy" decoding="async" width="1043" height="97" class="wp-image-6903" src="/wp-content/uploads/2018/05/word-image-6302.png" srcset="/wp-content/uploads/2018/05/word-image-6302.png 1043w, /wp-content/uploads/2018/05/word-image-6302-300x28.png 300w, /wp-content/uploads/2018/05/word-image-6302-768x71.png 768w, /wp-content/uploads/2018/05/word-image-6302-1024x95.png 1024w" sizes="(max-width: 1043px) 100vw, 1043px" /></p>
<p>注意：必须先引入jQuery</p>
<ol>
<li>定义数据显示容器和分页字符串</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6905" src="/wp-content/uploads/2018/05/word-image-6304.png" srcset="/wp-content/uploads/2018/05/word-image-6304.png 1366w, /wp-content/uploads/2018/05/word-image-6304-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6304-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6304-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>在js里面调用</li>
</ol>
<p>在user.php控制器的get_user方法获取总记录</p>
<p><img loading="lazy" decoding="async" width="1003" height="326" class="wp-image-6908" src="/wp-content/uploads/2018/05/word-image-6307.png" srcset="/wp-content/uploads/2018/05/word-image-6307.png 1003w, /wp-content/uploads/2018/05/word-image-6307-300x98.png 300w, /wp-content/uploads/2018/05/word-image-6307-768x250.png 768w" sizes="(max-width: 1003px) 100vw, 1003px" /></p>
<p>在user_model.php文件定义一个方法获取总记录</p>
<p><img loading="lazy" decoding="async" width="687" height="294" class="wp-image-6910" src="/wp-content/uploads/2018/05/word-image-6309.png" srcset="/wp-content/uploads/2018/05/word-image-6309.png 687w, /wp-content/uploads/2018/05/word-image-6309-300x128.png 300w" sizes="(max-width: 687px) 100vw, 687px" /></p>
<p>分页插件调用</p>
<p><img loading="lazy" decoding="async" width="952" height="439" class="wp-image-6911" src="/wp-content/uploads/2018/05/word-image-6310.png" srcset="/wp-content/uploads/2018/05/word-image-6310.png 952w, /wp-content/uploads/2018/05/word-image-6310-300x138.png 300w, /wp-content/uploads/2018/05/word-image-6310-768x354.png 768w" sizes="(max-width: 952px) 100vw, 952px" /></p>
<p>分页页码点击回调，发送Ajax获取数据</p>
<p><img loading="lazy" decoding="async" width="960" height="731" class="wp-image-6912" src="/wp-content/uploads/2018/05/word-image-6311.png" srcset="/wp-content/uploads/2018/05/word-image-6311.png 960w, /wp-content/uploads/2018/05/word-image-6311-300x228.png 300w, /wp-content/uploads/2018/05/word-image-6311-768x585.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></p>
<p>数据格式化函数</p>
<p><img loading="lazy" decoding="async" width="1155" height="385" class="wp-image-6913" src="/wp-content/uploads/2018/05/word-image-6312.png" srcset="/wp-content/uploads/2018/05/word-image-6312.png 1155w, /wp-content/uploads/2018/05/word-image-6312-300x100.png 300w, /wp-content/uploads/2018/05/word-image-6312-768x256.png 768w, /wp-content/uploads/2018/05/word-image-6312-1024x341.png 1024w" sizes="(max-width: 1155px) 100vw, 1155px" /></p>
<ol>
<li>user.php后台返回Ajax数据</li>
</ol>
<p><img loading="lazy" decoding="async" width="918" height="750" class="wp-image-6914" src="/wp-content/uploads/2018/05/word-image-6313.png" srcset="/wp-content/uploads/2018/05/word-image-6313.png 918w, /wp-content/uploads/2018/05/word-image-6313-300x245.png 300w, /wp-content/uploads/2018/05/word-image-6313-768x627.png 768w" sizes="(max-width: 918px) 100vw, 918px" /></p>
<h1>五、CI框架源码分析</h1>
<h2>①-分析入口文件</h2>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6915" src="/wp-content/uploads/2018/05/word-image-6314.png" srcset="/wp-content/uploads/2018/05/word-image-6314.png 1366w, /wp-content/uploads/2018/05/word-image-6314-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6314-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6314-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6916" src="/wp-content/uploads/2018/05/word-image-6315.png" srcset="/wp-content/uploads/2018/05/word-image-6315.png 1366w, /wp-content/uploads/2018/05/word-image-6315-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6315-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6315-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6917" src="/wp-content/uploads/2018/05/word-image-6316.png" srcset="/wp-content/uploads/2018/05/word-image-6316.png 1366w, /wp-content/uploads/2018/05/word-image-6316-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6316-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6316-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6918" src="/wp-content/uploads/2018/05/word-image-6317.png" srcset="/wp-content/uploads/2018/05/word-image-6317.png 1366w, /wp-content/uploads/2018/05/word-image-6317-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6317-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6317-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h2>②-CI的核心引导类</h2>
<p>注意：一般开源产品的common.php里面存放都是项目必须要使用的函数。</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6919" src="/wp-content/uploads/2018/05/word-image-6318.png" srcset="/wp-content/uploads/2018/05/word-image-6318.png 1366w, /wp-content/uploads/2018/05/word-image-6318-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6318-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6318-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>先分析一下common.php里面的函数【重点分析】</p>
<p>load_class函数</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6920" src="/wp-content/uploads/2018/05/word-image-6319.png" srcset="/wp-content/uploads/2018/05/word-image-6319.png 1366w, /wp-content/uploads/2018/05/word-image-6319-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6319-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6319-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>函数主要是配置load_class使用</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6921" src="/wp-content/uploads/2018/05/word-image-6320.png" srcset="/wp-content/uploads/2018/05/word-image-6320.png 1366w, /wp-content/uploads/2018/05/word-image-6320-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6320-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6320-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6922" src="/wp-content/uploads/2018/05/word-image-6321.png" srcset="/wp-content/uploads/2018/05/word-image-6321.png 1366w, /wp-content/uploads/2018/05/word-image-6321-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6321-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6321-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6923" src="/wp-content/uploads/2018/05/word-image-6322.png" srcset="/wp-content/uploads/2018/05/word-image-6322.png 1366w, /wp-content/uploads/2018/05/word-image-6322-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6322-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6322-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6924" src="/wp-content/uploads/2018/05/word-image-6323.png" srcset="/wp-content/uploads/2018/05/word-image-6323.png 1366w, /wp-content/uploads/2018/05/word-image-6323-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6323-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6323-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h2>③-CI里面的模型实例化1-装载器分析</h2>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6925" src="/wp-content/uploads/2018/05/word-image-6324.png" srcset="/wp-content/uploads/2018/05/word-image-6324.png 1366w, /wp-content/uploads/2018/05/word-image-6324-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6324-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6324-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>在上面user.php文件里面完成模型的实例化，底层原理是怎么样的？</p>
<p>思考：在控制器里面$this-&gt;load代表是什么？</p>
<p>答：$this-&gt;load 这个属性在用户自定义的控制器里面是不存在的，会去父类的控制器里面查询CI_Controller.php里面查找</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6926" src="/wp-content/uploads/2018/05/word-image-6325.png" srcset="/wp-content/uploads/2018/05/word-image-6325.png 1366w, /wp-content/uploads/2018/05/word-image-6325-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6325-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6325-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>通过查找发现父类里面的构造方法里面使用load_calss(‘Loader’,’core’)进行赋值操作。查看 load_class.php的源码，进行分析</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6927" src="/wp-content/uploads/2018/05/word-image-6326.png" srcset="/wp-content/uploads/2018/05/word-image-6326.png 1366w, /wp-content/uploads/2018/05/word-image-6326-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6326-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6326-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<table>
<tbody>
<tr>
<td>面试题：CI装载器是做什么的？主要是负责类的实例化操作，是system/core/loader.php的实例</td>
</tr>
</tbody>
</table>
<p>先记住：load_class功能：1. 载入类 2. 实例化类 3. 记录类</p>
<p>并且：整个CI框架没有类的自动载入机制，全部使用load_class完成。</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6928" src="/wp-content/uploads/2018/05/word-image-6327.png" srcset="/wp-content/uploads/2018/05/word-image-6327.png 1366w, /wp-content/uploads/2018/05/word-image-6327-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6327-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6327-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<h2>④-CI里面的模型实例化2-实例化模型</h2>
<p>$this-&gt;load-&gt;model(‘user_model’,’user’); === new CI_Loader()-&gt;model(‘user_model’,’user’)</p>
<p>底层原理：</p>
<p>$this-&gt;load本质就是CI_Loader的实例，所以我们需要分析一下Loader.php这个文件里面的内容，在分析一下里面model方法，这个方法是实例化模型的关键。</p>
<p><img loading="lazy" decoding="async" width="1067" height="367" class="wp-image-6929" src="/wp-content/uploads/2018/05/word-image-6328.png" srcset="/wp-content/uploads/2018/05/word-image-6328.png 1067w, /wp-content/uploads/2018/05/word-image-6328-300x103.png 300w, /wp-content/uploads/2018/05/word-image-6328-768x264.png 768w, /wp-content/uploads/2018/05/word-image-6328-1024x352.png 1024w" sizes="(max-width: 1067px) 100vw, 1067px" /></p>
<h2>⑤-CI模型里面的db属性是咋回事？</h2>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6930" src="/wp-content/uploads/2018/05/word-image-6329.png" srcset="/wp-content/uploads/2018/05/word-image-6329.png 1366w, /wp-content/uploads/2018/05/word-image-6329-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6329-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6329-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>之前：$this-&gt;db = new DB(); 这里的$this也是超级对象(get_instance()函数的返回值，或者就是CI_Controller::instance属性&#8212;$this)</p>
<ol>
<li>查找db属性，肯定是在自己的类里面查找，不存在则去父类里面查找</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6931" src="/wp-content/uploads/2018/05/word-image-6330.png" srcset="/wp-content/uploads/2018/05/word-image-6330.png 1366w, /wp-content/uploads/2018/05/word-image-6330-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6330-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6330-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>查看超级对象下是否存在db属性</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6933" src="/wp-content/uploads/2018/05/word-image-6331.png" srcset="/wp-content/uploads/2018/05/word-image-6331.png 1366w, /wp-content/uploads/2018/05/word-image-6331-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6331-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6331-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<p>3. 查看系统的控制器</p>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6934" src="/wp-content/uploads/2018/05/word-image-6332.png" srcset="/wp-content/uploads/2018/05/word-image-6332.png 1366w, /wp-content/uploads/2018/05/word-image-6332-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6332-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6332-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>查看装载器的方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6935" src="/wp-content/uploads/2018/05/word-image-6333.png" srcset="/wp-content/uploads/2018/05/word-image-6333.png 1366w, /wp-content/uploads/2018/05/word-image-6333-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6333-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6333-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
<ol>
<li>分析装载器里面的_ci_autoloader方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6936" src="/wp-content/uploads/2018/05/word-image-6334.png" srcset="/wp-content/uploads/2018/05/word-image-6334.png 1366w, /wp-content/uploads/2018/05/word-image-6334-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6334-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6334-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1114" height="553" class="wp-image-6937" src="/wp-content/uploads/2018/05/word-image-6335.png" srcset="/wp-content/uploads/2018/05/word-image-6335.png 1114w, /wp-content/uploads/2018/05/word-image-6335-300x149.png 300w, /wp-content/uploads/2018/05/word-image-6335-768x381.png 768w, /wp-content/uploads/2018/05/word-image-6335-1024x508.png 1024w" sizes="(max-width: 1114px) 100vw, 1114px" /></p>
<ol>
<li>查看装载器的$this-&gt;dabase()方法</li>
</ol>
<p><img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6938" src="/wp-content/uploads/2018/05/word-image-6336.png" srcset="/wp-content/uploads/2018/05/word-image-6336.png 1366w, /wp-content/uploads/2018/05/word-image-6336-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6336-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6336-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /> <img loading="lazy" decoding="async" width="1366" height="736" class="wp-image-6939" src="/wp-content/uploads/2018/05/word-image-6337.png" srcset="/wp-content/uploads/2018/05/word-image-6337.png 1366w, /wp-content/uploads/2018/05/word-image-6337-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6337-768x414.png 768w, /wp-content/uploads/2018/05/word-image-6337-1024x552.png 1024w" sizes="(max-width: 1366px) 100vw, 1366px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6501.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Yaf框架 安装、PHP-ext引入、目录结构、路由、模型、视图、控制器</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6500.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6500.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 17:29:32 +0000</pubDate>
				<category><![CDATA[Yaf]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[PHP-ext引入]]></category>
		<category><![CDATA[Yaf安装]]></category>
		<category><![CDATA[控制器]]></category>
		<category><![CDATA[模型]]></category>
		<category><![CDATA[目录结构]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[路由]]></category>
		<guid isPermaLink="false">/?p=6500</guid>

					<description><![CDATA[写在前面 鸟哥是谁？ 注意：也是PHP核心开发者之一（目前的最新的PHP7参与其中，并且很大部分的代码都是他贡 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>写在前面</h1>
<h2>鸟哥是谁？</h2>
<p><img loading="lazy" decoding="async" width="684" height="216" class="wp-image-6667" src="/wp-content/uploads/2018/05/word-image-6074.png" srcset="/wp-content/uploads/2018/05/word-image-6074.png 684w, /wp-content/uploads/2018/05/word-image-6074-300x95.png 300w" sizes="(max-width: 684px) 100vw, 684px" /></p>
<p>注意：也是PHP核心开发者之一（目前的最新的PHP7参与其中，并且很大部分的代码都是他贡献的）。和之前Linux私房菜鸟哥不是同一个人（这个鸟哥是台湾，主要是做Linux教程。）但我们yaf的鸟哥是惠新宸（风雪之隅）（之前是在百度工作的时候网名叫做雪候鸟，年龄相对大一点，所以被称为鸟哥。也在新浪微博工作。目前应该是在链家做架构师）</p>
<p><img loading="lazy" decoding="async" width="1046" height="474" class="wp-image-6669" src="/wp-content/uploads/2018/05/word-image-6076.png" srcset="/wp-content/uploads/2018/05/word-image-6076.png 1046w, /wp-content/uploads/2018/05/word-image-6076-300x136.png 300w, /wp-content/uploads/2018/05/word-image-6076-768x348.png 768w, /wp-content/uploads/2018/05/word-image-6076-1024x464.png 1024w" sizes="(max-width: 1046px) 100vw, 1046px" /></p>
<p>相关报道：</p>
<p><a href="http://www.infoq.com/cn/articles/weibo-architect-on-php-development">http://www.infoq.com/cn/articles/weibo-architect-on-php-development</a></p>
<h2>yaf是什么？</h2>
<p><img loading="lazy" decoding="async" width="1054" height="498" class="wp-image-6671" src="/wp-content/uploads/2018/05/word-image-6078.png" srcset="/wp-content/uploads/2018/05/word-image-6078.png 1054w, /wp-content/uploads/2018/05/word-image-6078-300x142.png 300w, /wp-content/uploads/2018/05/word-image-6078-768x363.png 768w, /wp-content/uploads/2018/05/word-image-6078-1024x484.png 1024w" sizes="(max-width: 1054px) 100vw, 1054px" /></p>
<p>注意：yaf框架是使用C语言进行编写的，编程之后编程成一个dll文件作为PHP的扩展进行出现，当PHP引入该扩展后，就在PHP里面内置很多的类库。然后我们就可以直接调用这些类库（等价PHP里面内置的一些功能，例如内置的函数、stdClass内置标准类），注意：同类型的框架还有国外的phalcon框架，也是做为PHP的出现，也是一个高性能的扩展，这类框架的性能折损非常少，性能仅次于原生的PHP。看一下官方的简介：</p>
<p><img loading="lazy" decoding="async" width="1601" height="771" class="wp-image-6673" src="/wp-content/uploads/2018/05/word-image-6080.png" srcset="/wp-content/uploads/2018/05/word-image-6080.png 1601w, /wp-content/uploads/2018/05/word-image-6080-300x144.png 300w, /wp-content/uploads/2018/05/word-image-6080-768x370.png 768w, /wp-content/uploads/2018/05/word-image-6080-1024x493.png 1024w" sizes="(max-width: 1601px) 100vw, 1601px" /></p>
<h2>相关资源</h2>
<p>yaf手册：<a href="http://yaf.laruence.com/">http://yaf.laruence.com/</a></p>
<p>github地址：https://github.com/laruence/yaf</p>
<p>作者博客：<a href="http://www.laruence.com/">http://www.laruence.com/</a></p>
<h1>yaf安装</h1>
<h2>dll扩展下载</h2>
<p>yaf框架是作为PHP的一个扩展存在的，所以我们需要去下载对应的扩展文件，然后在php.ini文件引入即可。</p>
<p>扩展下载地址：</p>
<p><a href="http://pecl.php.net/package/yaf">http://pecl.php.net/package/yaf</a></p>
<p><img loading="lazy" decoding="async" width="1554" height="853" class="wp-image-6675" src="/wp-content/uploads/2018/05/word-image-6082.png" srcset="/wp-content/uploads/2018/05/word-image-6082.png 1554w, /wp-content/uploads/2018/05/word-image-6082-300x165.png 300w, /wp-content/uploads/2018/05/word-image-6082-768x422.png 768w, /wp-content/uploads/2018/05/word-image-6082-1024x562.png 1024w" sizes="(max-width: 1554px) 100vw, 1554px" /></p>
<p>这里我们假设使用的朋友都是使用的windows操作系统，点击DLL下载即可，这里我们一2.3.5为例。接下来我们来到具体的下载页面：</p>
<p><img loading="lazy" decoding="async" width="1580" height="646" class="wp-image-6677" src="/wp-content/uploads/2018/05/word-image-6084.png" srcset="/wp-content/uploads/2018/05/word-image-6084.png 1580w, /wp-content/uploads/2018/05/word-image-6084-300x123.png 300w, /wp-content/uploads/2018/05/word-image-6084-768x314.png 768w, /wp-content/uploads/2018/05/word-image-6084-1024x419.png 1024w" sizes="(max-width: 1580px) 100vw, 1580px" /></p>
<p>版本新的的选择需要严格的依赖phpinfo函数给出的信息</p>
<h2>PHP-ext引入</h2>
<p>将下载后的php_yaf.dll文件复制到PHP的ext扩展目录即可</p>
<p><img loading="lazy" decoding="async" width="1000" height="389" class="wp-image-6680" src="/wp-content/uploads/2018/05/word-image-6087.png" srcset="/wp-content/uploads/2018/05/word-image-6087.png 1000w, /wp-content/uploads/2018/05/word-image-6087-300x117.png 300w, /wp-content/uploads/2018/05/word-image-6087-768x299.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<h2>php.ini配置文件</h2>
<p>最后在php.ini文件最后面中引入如下一段即可：</p>
<p>[yaf]</p>
<p>extension=php_yaf.dll</p>
<p>yaf.environ=product</p>
<p>重复apache后，使用phpinfo函数见到如下信息即代表扩展配置成功。</p>
<p><img loading="lazy" decoding="async" width="1349" height="580" class="wp-image-6682" src="/wp-content/uploads/2018/05/word-image-6089.png" srcset="/wp-content/uploads/2018/05/word-image-6089.png 1349w, /wp-content/uploads/2018/05/word-image-6089-300x129.png 300w, /wp-content/uploads/2018/05/word-image-6089-768x330.png 768w, /wp-content/uploads/2018/05/word-image-6089-1024x440.png 1024w" sizes="(max-width: 1349px) 100vw, 1349px" /></p>
<p>注意：当我们把PHP的yaf扩展引入后，PHP内部就会存在很多的yaf提供的类库，但是yaf官方并没有给出yaf框架的目录文件等信息，但是提供一个官方的建议：yaf框架的目录的组织结构应该如何实现。</p>
<p><img loading="lazy" decoding="async" width="763" height="519" class="wp-image-6685" src="/wp-content/uploads/2018/05/word-image-6091.png" srcset="/wp-content/uploads/2018/05/word-image-6091.png 763w, /wp-content/uploads/2018/05/word-image-6091-300x204.png 300w, /wp-content/uploads/2018/05/word-image-6091-220x150.png 220w" sizes="(max-width: 763px) 100vw, 763px" /></p>
<h1>yaf快速入门</h1>
<h2>项目目录结构</h2>
<p>在成功安装扩展后，我们就可以使用yaf进行开发，但是在开发之前，我们需要规划一个项目开发目录。</p>
<p>当让我们也可以使用官方提供的代码生成工具进行自动生成：</p>
<p><a href="http://www.laruence.com/manual/tutorial.last.html">http://www.laruence.com/manual/tutorial.last.html</a></p>
<p>官方的建议目录如下：</p>
<p>application</p>
<p>│ │ Bootstrap.php</p>
<p>│ ├─common</p>
<p>│ │ functions.php</p>
<p>│ ├─controllers</p>
<p>│ │ Index.php</p>
<p>│ ├─library</p>
<p>│ ├─models</p>
<p>│ │ │ User.php</p>
<p>│ │ │</p>
<p>│ │ └─Db</p>
<p>│ │ Medoo.php</p>
<p>│ ├─modules</p>
<p>│ │ └─Admin</p>
<p>│ │ ├─controllers</p>
<p>│ │ │ Back.php</p>
<p>│ │ └─views</p>
<p>│ ├─plugins</p>
<p>│ └─views</p>
<p>│ └─index</p>
<p>│ index.phtml</p>
<p>├─conf</p>
<p>│ application.ini</p>
<p>│</p>
<p>└─public</p>
<p>index.php</p>
<h2>虚拟主机配置</h2>
<p>需要注意的是，项目的入口文件是放在public目录下的，则我们建立的项目的虚拟主机的目录应该是指定到public目录。一个示例的虚拟主机的配置如下：</p>
<p>&lt;VirtualHost *:80&gt;</p>
<p>DocumentRoot &#8220;C:\phpStudy\WWW\yaf.dev\public&#8221;</p>
<p>ServerName yaf.dev</p>
<p>ServerAlias</p>
<p>&lt;Directory &#8220;C:\phpStudy\WWW\yaf.dev\public&#8221;&gt;</p>
<p>Options Indexes FollowSymLinks ExecCGI</p>
<p>AllowOverride All</p>
<p>Order allow,deny</p>
<p>Allow from all</p>
<p>Require all granted</p>
<p>&lt;/Directory&gt;</p>
<p>&lt;/VirtualHost&gt;</p>
<h2>入口文件编写</h2>
<p>在public目录的index.php文件的内容如下：</p>
<p>需要注意的是，只需要在该文件定义一个常量，然后实例化Yaf_application()，同时传递一个配置文件即可。</p>
<p>&lt;?php</p>
<p>define(&#8220;APPLICATION_PATH&#8221;, realpath(dirname(__FILE__) . &#8216;/../&#8217;));</p>
<p>define(&#8220;APPLICATION_COINFIG_FILE&#8221;,APPLICATION_PATH . &#8220;/conf/application.ini&#8221;);</p>
<p>date_default_timezone_set(&#8216;Asia/Shanghai&#8217;);</p>
<p>$app = new Yaf_Application(APPLICATION_COINFIG_FILE);</p>
<p>$app-&gt;bootstrap()-&gt;run();</p>
<h2>配置文件</h2>
<p>在config目录的application.ini文件里面只需要定义如下的配置内容即可。</p>
<p>[product]</p>
<p>;分号代表注释，支持直接写PHP中的已定义常量</p>
<p>application.directory=APPLICATION_PATH &#8220;/application/&#8221;</p>
<p>通过刚才的手工目录创建和yaf官方提供的代码生成器的创建，我们发现目录创建还是比较繁琐不适合入门的人去捯饬，那我们可以使用默认的目录结构来进行学习。</p>
<p><img loading="lazy" decoding="async" width="789" height="261" class="wp-image-6686" src="/wp-content/uploads/2018/05/word-image-6092.png" srcset="/wp-content/uploads/2018/05/word-image-6092.png 789w, /wp-content/uploads/2018/05/word-image-6092-300x99.png 300w, /wp-content/uploads/2018/05/word-image-6092-768x254.png 768w" sizes="(max-width: 789px) 100vw, 789px" /></p>
<h1>composer管理</h1>
<p>简介</p>
<p>网站：<a href="https://packagist.org/packages/gogery/yaf">https://packagist.org/packages/gogery/yaf</a></p>
<p><img loading="lazy" decoding="async" width="697" height="307" class="wp-image-6688" src="/wp-content/uploads/2018/05/word-image-6094.png" srcset="/wp-content/uploads/2018/05/word-image-6094.png 697w, /wp-content/uploads/2018/05/word-image-6094-300x132.png 300w" sizes="(max-width: 697px) 100vw, 697px" /></p>
<ol>
<li>使用命令创建本地项目 local.yaf.com</li>
</ol>
<p><img loading="lazy" decoding="async" width="1689" height="518" class="wp-image-6690" src="/wp-content/uploads/2018/05/word-image-6096.png" srcset="/wp-content/uploads/2018/05/word-image-6096.png 1689w, /wp-content/uploads/2018/05/word-image-6096-300x92.png 300w, /wp-content/uploads/2018/05/word-image-6096-768x236.png 768w, /wp-content/uploads/2018/05/word-image-6096-1024x314.png 1024w" sizes="(max-width: 1689px) 100vw, 1689px" /></p>
<p>&gt; composer create-project gogery/yaf local.yaf.com</p>
<ol>
<li>生成目录结构</li>
</ol>
<p><img loading="lazy" decoding="async" width="850" height="376" class="wp-image-6692" src="/wp-content/uploads/2018/05/word-image-6098.png" srcset="/wp-content/uploads/2018/05/word-image-6098.png 850w, /wp-content/uploads/2018/05/word-image-6098-300x133.png 300w, /wp-content/uploads/2018/05/word-image-6098-768x340.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></p>
<ol>
<li>配置虚拟主机</li>
</ol>
<p>&lt;VirtualHost *:80&gt;</p>
<p>DocumentRoot &#8220;C:\phpStudy\WWW\local.yaf.com\public&#8221;</p>
<p>ServerName local.yaf.com</p>
<p>ServerAlias</p>
<p>&lt;Directory &#8220;C:\phpStudy\WWW\local.yaf.com\public&#8221;&gt;</p>
<p>Options FollowSymLinks ExecCGI</p>
<p>AllowOverride All</p>
<p>Order allow,deny</p>
<p>Allow from all</p>
<p>Require all granted</p>
<p>&lt;/Directory&gt;</p>
<p>&lt;/VirtualHost&gt;</p>
<ol>
<li>浏览器访问效果</li>
</ol>
<p><img loading="lazy" decoding="async" width="660" height="308" class="wp-image-6694" src="/wp-content/uploads/2018/05/word-image-6100.png" srcset="/wp-content/uploads/2018/05/word-image-6100.png 660w, /wp-content/uploads/2018/05/word-image-6100-300x140.png 300w" sizes="(max-width: 660px) 100vw, 660px" /></p>
<p>建议大家直接使用composer进行目录的管理。</p>
<h1>IDE配置</h1>
<p>注意：yaf框架扩展的引入，在使用的时候内置了很多的类文件，如果没有一个IDE进行代码的提示，我们是很难记得住到底存在哪些类，哪些方法，则我们可以为IDE配置一下代码提示。yaf代码提示的插件。</p>
<p>网站：<a href="https://github.com/elad-yosifon/php-yaf-doc">https://github.com/elad-yosifon/php-yaf-doc</a></p>
<ol>
<li>插件解压</li>
</ol>
<p><img loading="lazy" decoding="async" width="1020" height="415" class="wp-image-6696" src="/wp-content/uploads/2018/05/word-image-6102.png" srcset="/wp-content/uploads/2018/05/word-image-6102.png 1020w, /wp-content/uploads/2018/05/word-image-6102-300x122.png 300w, /wp-content/uploads/2018/05/word-image-6102-768x312.png 768w" sizes="(max-width: 1020px) 100vw, 1020px" /></p>
<ol>
<li>配置phpstorm的插件目录</li>
</ol>
<p><img loading="lazy" decoding="async" width="1869" height="524" class="wp-image-6698" src="/wp-content/uploads/2018/05/word-image-6104.png" srcset="/wp-content/uploads/2018/05/word-image-6104.png 1869w, /wp-content/uploads/2018/05/word-image-6104-300x84.png 300w, /wp-content/uploads/2018/05/word-image-6104-768x215.png 768w, /wp-content/uploads/2018/05/word-image-6104-1024x287.png 1024w" sizes="(max-width: 1869px) 100vw, 1869px" /></p>
<p>配置插件的目录</p>
<p><img loading="lazy" decoding="async" width="1857" height="520" class="wp-image-6700" src="/wp-content/uploads/2018/05/word-image-6106.png" srcset="/wp-content/uploads/2018/05/word-image-6106.png 1857w, /wp-content/uploads/2018/05/word-image-6106-300x84.png 300w, /wp-content/uploads/2018/05/word-image-6106-768x215.png 768w, /wp-content/uploads/2018/05/word-image-6106-1024x287.png 1024w" sizes="(max-width: 1857px) 100vw, 1857px" /></p>
<p>目录结构以及插件都安装完成后，则可以正式的学习yaf框架（yaf框架也是一个单一入口 + MVC架构）。</p>
<p>学习框架主要是从如下几个方面进行学习：（MVC CVM）</p>
<ol>
<li>学习控制器</li>
<li>学习视图</li>
<li>学习模型（但是需要注意的，yaf框架本身是没有提供模型，这个需要用户自己去完成，因为作者觉得pdo已经是一个很好的操作数据库的工具，没必要在写一个，我们会单独的学习一个第三方的模型类 Medoo）</li>
</ol>
<p><img loading="lazy" decoding="async" width="1270" height="424" class="wp-image-6703" src="/wp-content/uploads/2018/05/word-image-6109.png" srcset="/wp-content/uploads/2018/05/word-image-6109.png 1270w, /wp-content/uploads/2018/05/word-image-6109-300x100.png 300w, /wp-content/uploads/2018/05/word-image-6109-768x256.png 768w, /wp-content/uploads/2018/05/word-image-6109-1024x342.png 1024w" sizes="(max-width: 1270px) 100vw, 1270px" /></p>
<ol>
<li>配置文件</li>
<li>&#8230;..</li>
</ol>
<h1>控制器-constrollers</h1>
<p>经过上面的操作，基本的目录结构已经搭建完毕，接下来我们完成我们的第一个控制器的编写。在正式编写控制器之前，我们只要弄清楚如下几个问题，即可快速掌握控制器的使用。</p>
<ol>
<li>控制器写在哪里？</li>
<li>控制器的文件如何命名？</li>
<li>控制器里面的内容如何编写？</li>
<li>控制器里面的方法如何命名？</li>
<li>控制器里面如何载入视图？</li>
<li>控制器里面如何给视图赋值？</li>
<li>如何在视图里面显示控制器的赋值变量？</li>
</ol>
<p>实操：</p>
<ol>
<li>控制器写在哪里？（application/controllers目录）</li>
<li>控制器的文件如何命名？</li>
</ol>
<p><img loading="lazy" decoding="async" width="897" height="252" class="wp-image-6705" src="/wp-content/uploads/2018/05/word-image-6111.png" srcset="/wp-content/uploads/2018/05/word-image-6111.png 897w, /wp-content/uploads/2018/05/word-image-6111-300x84.png 300w, /wp-content/uploads/2018/05/word-image-6111-768x216.png 768w" sizes="(max-width: 897px) 100vw, 897px" /></p>
<ol>
<li>控制器里面的内容如何编写？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1212" height="711" class="wp-image-6706" src="/wp-content/uploads/2018/05/word-image-6112.png" srcset="/wp-content/uploads/2018/05/word-image-6112.png 1212w, /wp-content/uploads/2018/05/word-image-6112-300x176.png 300w, /wp-content/uploads/2018/05/word-image-6112-768x451.png 768w, /wp-content/uploads/2018/05/word-image-6112-1024x601.png 1024w" sizes="(max-width: 1212px) 100vw, 1212px" /></p>
<ol>
<li>控制器里面的方法如何命名？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1702" height="653" class="wp-image-6708" src="/wp-content/uploads/2018/05/word-image-6114.png" srcset="/wp-content/uploads/2018/05/word-image-6114.png 1702w, /wp-content/uploads/2018/05/word-image-6114-300x115.png 300w, /wp-content/uploads/2018/05/word-image-6114-768x295.png 768w, /wp-content/uploads/2018/05/word-image-6114-1024x393.png 1024w" sizes="(max-width: 1702px) 100vw, 1702px" /></p>
<ol>
<li>控制器里面如何载入视图？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1265" height="522" class="wp-image-6710" src="/wp-content/uploads/2018/05/word-image-6116.png" srcset="/wp-content/uploads/2018/05/word-image-6116.png 1265w, /wp-content/uploads/2018/05/word-image-6116-300x124.png 300w, /wp-content/uploads/2018/05/word-image-6116-768x317.png 768w, /wp-content/uploads/2018/05/word-image-6116-1024x423.png 1024w" sizes="(max-width: 1265px) 100vw, 1265px" /></p>
<p>视图创建</p>
<p><img loading="lazy" decoding="async" width="1226" height="646" class="wp-image-6713" src="/wp-content/uploads/2018/05/word-image-6119.png" srcset="/wp-content/uploads/2018/05/word-image-6119.png 1226w, /wp-content/uploads/2018/05/word-image-6119-300x158.png 300w, /wp-content/uploads/2018/05/word-image-6119-768x405.png 768w, /wp-content/uploads/2018/05/word-image-6119-1024x540.png 1024w" sizes="(max-width: 1226px) 100vw, 1226px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="770" height="251" class="wp-image-6715" src="/wp-content/uploads/2018/05/word-image-6121.png" srcset="/wp-content/uploads/2018/05/word-image-6121.png 770w, /wp-content/uploads/2018/05/word-image-6121-300x98.png 300w, /wp-content/uploads/2018/05/word-image-6121-768x250.png 768w" sizes="(max-width: 770px) 100vw, 770px" /></p>
<ol>
<li>控制器里面如何给视图赋值？</li>
</ol>
<p><img loading="lazy" decoding="async" width="1838" height="987" class="wp-image-6717" src="/wp-content/uploads/2018/05/word-image-6123.png" srcset="/wp-content/uploads/2018/05/word-image-6123.png 1838w, /wp-content/uploads/2018/05/word-image-6123-300x161.png 300w, /wp-content/uploads/2018/05/word-image-6123-768x412.png 768w, /wp-content/uploads/2018/05/word-image-6123-1024x550.png 1024w" sizes="(max-width: 1838px) 100vw, 1838px" /></p>
<ol>
<li>如何在视图里面显示控制器的赋值变量？（直接使用原生的PHP输出、yaf内置的模板引擎只支持原生的PHP语法）</li>
</ol>
<p><img loading="lazy" decoding="async" width="1463" height="802" class="wp-image-6719" src="/wp-content/uploads/2018/05/word-image-6125.png" srcset="/wp-content/uploads/2018/05/word-image-6125.png 1463w, /wp-content/uploads/2018/05/word-image-6125-300x164.png 300w, /wp-content/uploads/2018/05/word-image-6125-768x421.png 768w, /wp-content/uploads/2018/05/word-image-6125-1024x561.png 1024w" sizes="(max-width: 1463px) 100vw, 1463px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="995" height="351" class="wp-image-6721" src="/wp-content/uploads/2018/05/word-image-6127.png" srcset="/wp-content/uploads/2018/05/word-image-6127.png 995w, /wp-content/uploads/2018/05/word-image-6127-300x106.png 300w, /wp-content/uploads/2018/05/word-image-6127-768x271.png 768w" sizes="(max-width: 995px) 100vw, 995px" /></p>
<h1>视图-views</h1>
<p>视图主要是用户来展示数据和收集用户的数据。</p>
<p><img loading="lazy" decoding="async" width="1110" height="814" class="wp-image-6722" src="/wp-content/uploads/2018/05/word-image-6128.png" srcset="/wp-content/uploads/2018/05/word-image-6128.png 1110w, /wp-content/uploads/2018/05/word-image-6128-300x220.png 300w, /wp-content/uploads/2018/05/word-image-6128-768x563.png 768w, /wp-content/uploads/2018/05/word-image-6128-1024x751.png 1024w" sizes="(max-width: 1110px) 100vw, 1110px" /></p>
<p>在正式学习视图之前，我们先思考如下几个问题：</p>
<p>1. 视图文件写在哪里？</p>
<p>2. 视图文件如何命名？</p>
<p>3. 如何在控制器里面调用视图，如何获取视图里面的内容？</p>
<p>4. 在控制器里面如何给视图赋值？</p>
<p>5. 如何在视图里面显示控制器的赋值变量？</p>
<p>实操：</p>
<ol>
<li>视图文件写在哪里？（注意：需要注意是存在模块，如果有模块，则写在模块的对应的views目录，没有则写在application/views/目录下）</li>
</ol>
<p><img loading="lazy" decoding="async" width="1499" height="580" class="wp-image-6723" src="/wp-content/uploads/2018/05/word-image-6129.png" srcset="/wp-content/uploads/2018/05/word-image-6129.png 1499w, /wp-content/uploads/2018/05/word-image-6129-300x116.png 300w, /wp-content/uploads/2018/05/word-image-6129-768x297.png 768w, /wp-content/uploads/2018/05/word-image-6129-1024x396.png 1024w" sizes="(max-width: 1499px) 100vw, 1499px" /></p>
<ol>
<li>视图文件如何命名？</li>
</ol>
<p>答：文件的命名满足和方法同名，并且后缀是 phtml</p>
<ol>
<li>如何在控制器里面调用视图，如何获取视图里面的内容？</li>
</ol>
<p>答：yaf框架默认会自动载入视图</p>
<p>如果终止return false 或者 Yaf_Dispatcher::getInstance()-&gt;disableView();</p>
<ol>
<li>在控制器里面如何给视图赋值？</li>
</ol>
<p>答：$this-&gt;getView()-&gt;assign(&#8216;视图调用名称&#8217;, $变量名称)</p>
<ol>
<li>如何在视图里面显示控制器的赋值变量？</li>
</ol>
<p>答：原生的PHP</p>
<p>注意：Yaf_View_Simple 常见方法使用：</p>
<p><img loading="lazy" decoding="async" width="1830" height="950" class="wp-image-6724" src="/wp-content/uploads/2018/05/word-image-6130.png" srcset="/wp-content/uploads/2018/05/word-image-6130.png 1830w, /wp-content/uploads/2018/05/word-image-6130-300x156.png 300w, /wp-content/uploads/2018/05/word-image-6130-768x399.png 768w, /wp-content/uploads/2018/05/word-image-6130-1024x532.png 1024w" sizes="(max-width: 1830px) 100vw, 1830px" /></p>
<h1>yaf模型-models</h1>
<h2>注意</h2>
<p>需要注意的是yaf框架并没有提供模型类，这个需要用户自己去实现，我们可以自己封装一个模型，也可以使用被人提供好的模型类文件，例如如下的一个模型类：</p>
<p>相关文档：<a href="http://medoo.lvtao.net/doc.php">http://medoo.lvtao.net/doc.php</a></p>
<h2>Medoo基本使用</h2>
<ol>
<li>下载</li>
<li>引入</li>
<li>实例化（进行数据库配置）</li>
</ol>
<p>实操：</p>
<p>具体代码参考</p>
<p><img loading="lazy" decoding="async" width="1188" height="695" class="wp-image-6725" src="/wp-content/uploads/2018/05/word-image-6131.png" srcset="/wp-content/uploads/2018/05/word-image-6131.png 1188w, /wp-content/uploads/2018/05/word-image-6131-300x176.png 300w, /wp-content/uploads/2018/05/word-image-6131-768x449.png 768w, /wp-content/uploads/2018/05/word-image-6131-1024x599.png 1024w" sizes="(max-width: 1188px) 100vw, 1188px" /></p>
<h2>模型命名</h2>
<p>注意：yaf框架并没有模型类，但是规定了模型的书写的规则以及加载的实现。</p>
<p>命名、实例化如何加载。</p>
<p>例如：我们打算在application/models/目录下创建一个Goods.php类文件，则类名应该如下：</p>
<p><img loading="lazy" decoding="async" width="1607" height="946" class="wp-image-6726" src="/wp-content/uploads/2018/05/word-image-6132.png" srcset="/wp-content/uploads/2018/05/word-image-6132.png 1607w, /wp-content/uploads/2018/05/word-image-6132-300x177.png 300w, /wp-content/uploads/2018/05/word-image-6132-768x452.png 768w, /wp-content/uploads/2018/05/word-image-6132-1024x603.png 1024w" sizes="(max-width: 1607px) 100vw, 1607px" /></p>
<p>通过上面的操作我们可以很方面的完成模型类的定义，当我们定义好了之后，直接在控制器里面进行实例化即可，yaf框架会自动进行类的载入。</p>
<p>问题：通过上面的操作定义的模型类是直接在application/models目录下定义的，如果现在我们需要在该目录下在建立子目录，然后在子目录里面定义模型，则模型的类名该如何定义？</p>
<p><img loading="lazy" decoding="async" width="1819" height="803" class="wp-image-6727" src="/wp-content/uploads/2018/05/word-image-6133.png" srcset="/wp-content/uploads/2018/05/word-image-6133.png 1819w, /wp-content/uploads/2018/05/word-image-6133-300x132.png 300w, /wp-content/uploads/2018/05/word-image-6133-768x339.png 768w, /wp-content/uploads/2018/05/word-image-6133-1024x452.png 1024w" sizes="(max-width: 1819px) 100vw, 1819px" /></p>
<p>总结：在yaf里面模型的命名是通过下划线来查找类的目录结构。</p>
<h1>yaf模块化-modules</h1>
<h2>配置</h2>
<p>注意：yaf框架默认的目录结构里面使用的Index模块，如果我们需要进行其他的模块的创建，例如配置后台Admin模块，Member模块。则我们需要在application.ini里面进行配置，然后在application/modules/目录创建对应的模块目录，模块目录下创建对应的controllers目录和views目录。</p>
<p>假如我们要新增加一个Member模块用来做后台管理（需要注意的是如果我们使用模块功能，则必须加上Index模块）。则我们需要在application.ini的某个节里面配置如下信息：</p>
<p>application.modules = &#8220;Index,Member&#8221;</p>
<p><img loading="lazy" decoding="async" width="1474" height="642" class="wp-image-6728" src="/wp-content/uploads/2018/05/word-image-6134.png" srcset="/wp-content/uploads/2018/05/word-image-6134.png 1474w, /wp-content/uploads/2018/05/word-image-6134-300x131.png 300w, /wp-content/uploads/2018/05/word-image-6134-768x335.png 768w, /wp-content/uploads/2018/05/word-image-6134-1024x446.png 1024w" sizes="(max-width: 1474px) 100vw, 1474px" /></p>
<h2>新建模块</h2>
<p>需要注意的是：其中Admin目录就和配置的模块名称一致，每个模块目录下都可以新建controllers和views目录用作控制器和视图，但是模块下的models内的文件不支持自动载入，所以在该模块下的一些业务方法只能放在application/models目录下。</p>
<p><img loading="lazy" decoding="async" width="1416" height="583" class="wp-image-6729" src="/wp-content/uploads/2018/05/word-image-6135.png" srcset="/wp-content/uploads/2018/05/word-image-6135.png 1416w, /wp-content/uploads/2018/05/word-image-6135-300x124.png 300w, /wp-content/uploads/2018/05/word-image-6135-768x316.png 768w, /wp-content/uploads/2018/05/word-image-6135-1024x422.png 1024w" sizes="(max-width: 1416px) 100vw, 1416px" /></p>
<p>模块里面的控制器和视图同上面的控制器的使用一致。</p>
<h2>访问</h2>
<p>小写URL访问：</p>
<p>域名/index.php/模块名称/控制器名称/方法名称</p>
<h1>yaf表单-Yaf_Request_Http</h1>
<h2>简介</h2>
<p>在前后台进行交互的过程中，后端程序不可避免的需要接收用户提交的数据，常见的数据有</p>
<ol>
<li>get提交数据</li>
<li>post提交数据</li>
<li>上传文件数据</li>
<li>get查询字符串</li>
<li>cookie数据等等</li>
</ol>
<h2>数据接收</h2>
<p>在控制器里面我们可以通过$this-&gt;getRequest()来进行数据的接收，该方法返回的是<strong><em>Yaf_Request_Http</em></strong>的实例。</p>
<h1>yaf之session-Yaf_Session</h1>
<h2>简介</h2>
<p>由于http请求是无状态的，则在页面交互的过程中，有的时候我们需要跨脚本共享数据，则我们可以使用cookie或者session进行处理，session相对来说更加的安全，yaf框架内置了一个session处理类，可以非常方便的帮助我们进行session的处理。</p>
<h2>使用</h2>
<p>Yaf_Session::getInstance()-&gt;get(&#8216;name&#8217;)</p>
<h1>yaf配置篇-Yaf_Config_Ini</h1>
<h2>简介</h2>
<p>配置文件基本可以说是每个项目都会有，在配置文件中我们通常会配置数据库访问地址、redis连接、url地址等等。</p>
<p>yaf对于配置文件的解析提供了节（section）的支持，并且还支持节之间的继承功能，将节的设置和yaf运行环境（yaf.environ）结合起来就可以达到很好的配置效果，且看如何实现。</p>
<h2>php.ini配置</h2>
<p>在配置php支持yaf的时候，可以设置一个参数yaf.environ：把本地开发设置成develop、测试环境配置成test、生产环境配置成product，如：</p>
<p><img loading="lazy" decoding="async" width="593" height="226" class="wp-image-6730" src="/wp-content/uploads/2018/05/word-image-6136.png" srcset="/wp-content/uploads/2018/05/word-image-6136.png 593w, /wp-content/uploads/2018/05/word-image-6136-300x114.png 300w" sizes="(max-width: 593px) 100vw, 593px" /></p>
<h2>application.ini文件配置</h2>
<p>yaf配置文件一般都放在项目的conf文件夹下。Yaf _Application实例化的时候需要传递一个配置文件路径，假设我们的配置文件叫application.ini，先看下application.ini的结构：</p>
<p>[common]</p>
<p>; 通用配置，数据库配置</p>
<p>resources.database.params.driver = &#8220;pdo_mysql&#8221;</p>
<p>resources.database.params.hostname = &#8220;127.0.0.1&#8221;</p>
<p>resources.database.params.port = 3306</p>
<p>resources.database.params.database = &#8220;database&#8221;</p>
<p>resources.database.params.username = &#8220;username&#8221;</p>
<p>resources.database.params.password = &#8220;password&#8221;</p>
<p>[product : common]</p>
<p>; 生产环境配置，这里的配置除了节之外，节和节之间还有继承关系。例如[product : common]就表示product的配置会继承common的配置。先配置一个数据库连接看看。</p>
<p>[test : common]</p>
<p>; 测试环境配置</p>
<p>[develop : common]</p>
<p>; 开发环境配置</p>
<p>resources.database.params.hostname = &#8220;127.0.0.1&#8221;</p>
<p>resources.database.params.database = &#8220;database&#8221;</p>
<p>resources.database.params.username = &#8220;username&#8221;</p>
<p>resources.database.params.password = &#8220;password&#8221;</p>
<p>这样当项目运行环境在develop下的时候，会优先读取[develop : common]内的配置，如果没有则会从[common]中获取。在项目中任何地方都可以通过如下的方法获取application.ini里面的配置信息：</p>
<p>Yaf_Application::app()-&gt;getConfig();</p>
<h2>额外的配置</h2>
<p>随着项目越来越庞大，配置也会越来越复杂，如果都放在项目默认的配置文件application.ini中，可能配置会有好几百行，这样就不容易维护了。</p>
<p>一般我们会考虑新建配置文件用来存储额外的配置。yaf中提供了Yaf_Config_Ini类来处理这些额外的配置文件。</p>
<p>$config = new Yaf_Config_Ini( APPLICATION_PATH . &#8216;/conf/url.ini&#8217;,  ini_get(&#8216;yaf.environ&#8217;) );</p>
<h1>类的自动载入机制-libraris</h1>
<h2>简介</h2>
<p>在yaf里面类库的默认目录是application下的library目录，比如我们要写一个Page.php类文件，那么我们需要建立这样的application/library/Page.php类文件。</p>
<p>但是需要注意的是，如果我们需要目录进行嵌套，则类的名称应该是使用下划线进行连接，并且路径的首字母应该大写。</p>
<p>例如：我们打算在application/library/目录下，建议一个Dao目录，然后在该目录下建议一个Mysql目录，并在Mysql目录下建立一个Query.php类文件，则类名应该如下：</p>
<p>class Dao_Mysql_Query{</p>
<p>}</p>
<p>通过这样定义的类，yaf框架则可以根据我们的类名来获取对于的路径，实现对应的自动加载机制。</p>
<h1>助手函数扩展-Yaf_Loader</h1>
<p>在Bootstrap.php文件定义一个加载助手函数的公共方法，使用Yaf_Loader进行助手函数文件导入。</p>
<p>public function _initCommonFunctions(){</p>
<p>// 加载定义助手函数</p>
<p>Yaf_Loader::import(APPLICATION_PATH . &#8216;/application/common/functions.php&#8217;);</p>
<p>}</p>
<h1>响应-Yaf_Response_Abstract</h1>
<p>有的时候我们需要进行URL的跳转，则可以使用该类进行响应处理</p>
<h1>路由-Yaf_Route-*</h1>
<h2>简介</h2>
<p>yaf框架支持如下五种路由：</p>
<ol>
<li>Yaf_Route_Simple</li>
</ol>
<p>例如：<a href="http://local.yaf.com/index.php?m=index&amp;c=index&amp;a=index">http://local.yaf.com/index.php?m=index&amp;c=index&amp;a=index</a> （普通路由）</p>
<ol>
<li>Yaf_Route_Supervar</li>
<li>Yaf_Route_Static</li>
<li>Yaf_Route_Rewrite</li>
<li>Yaf_Route_Regex</li>
</ol>
<p>例如：http://local.yaf.com/list-12.html</p>
<h2>简单路由使用-方式一</h2>
<p>创建路由规则的步骤：</p>
<ol>
<li>在Bootstrap.php文件创建一个路由器对象</li>
<li>设置路由规则</li>
<li>调用路由对象的addRoute方法添加路由规则</li>
</ol>
<p>public function _initDefineRouter()</p>
<p>{</p>
<p>$router = Yaf_Dispatcher::getInstance()-&gt;getRouter();</p>
<p>$mac = new Yaf_Route_Simple(&#8216;m&#8217;, &#8216;c&#8217;, &#8216;a&#8217;);</p>
<p>$router-&gt;addRoute(&#8216;mac&#8217;, $mac);</p>
<p>}</p>
<h2>简单路由使用-方式二</h2>
<ol>
<li>在application.ini定义路由段</li>
</ol>
<p>[route]</p>
<p>routes.simple.type=&#8221;simple&#8221;</p>
<p>routes.simple.module=md</p>
<p>routes.simple.controller=c</p>
<p>routes.simple.action=as</p>
<p>[product:route]</p>
<ol>
<li>在Bootstrap.php里面进行配置注册</li>
</ol>
<p>public function _initConfig()</p>
<p>{</p>
<p>$config = new Yaf_Config_Ini(APPLICATION_COINFIG_FILE);</p>
<p>Yaf_Registry::set(&#8220;config&#8221;, $config);</p>
<p>}</p>
<p>public function _initDefineRouter()</p>
<p>{</p>
<p>$router = Yaf_Dispatcher::getInstance()-&gt;getRouter();</p>
<p>$router-&gt;addConfig( Yaf_Registry::get(&#8216;config&#8217;)-&gt;route-&gt;routes );</p>
<p>}</p>
<h2>正则路由-方式一</h2>
<p>1. 直接使用正则类进行生成</p>
<p>$router = Yaf_Dispatcher::getInstance()-&gt;getRouter();</p>
<p>$route = new Yaf_Route_Regex(</p>
<p>&#8216;#^/product/([a-zA-Z-_0-9]+)$#&#8217;,</p>
<p>array(</p>
<p>&#8216;module&#8217; =&gt; &#8216;index&#8217;,</p>
<p>&#8216;controller&#8217; =&gt; &#8216;index&#8217;,</p>
<p>&#8216;action&#8217; =&gt; &#8216;index&#8217;</p>
<p>),</p>
<p>array(</p>
<p>//完成数字到字符变量的映射</p>
<p>1 =&gt; &#8216;ident&#8217;</p>
<p>)</p>
<p>);</p>
<p>$router-&gt;addRoute(&#8216;reg&#8217;, $route);</p>
<h2>正则路由-方式二</h2>
<ol>
<li>在application.ini定义正则路由段</li>
</ol>
<p>[route]</p>
<p>routes.regex.type=&#8221;regex&#8221;</p>
<p>routes.regex.match=&#8221;#^/list/([0-9])+\/([a-z0-9]+)$#&#8221;</p>
<p>routes.regex.route.module=Index</p>
<p>routes.regex.route.controller=Index</p>
<p>routes.regex.route.action=index</p>
<p>routes.regex.map.1=name</p>
<p>routes.regex.map.2=value</p>
<p>[product:route]</p>
<p>2. 在Bootstrap.php里面进行配置注册</p>
<h1>相关学习资料</h1>
<p><a href="http://wiki.phpboy.net/">http://wiki.phpboy.net/</a></p>
<p><a href="http://www.phpabc.cn/yaf-kuang-jia-zhi-phpstrom-dai-ma-zi-dong-bu-quan-yaf-ide-auto-complete-2.html">http://www.phpabc.cn/yaf-kuang-jia-zhi-phpstrom-dai-ma-zi-dong-bu-quan-yaf-ide-auto-complete-2.html</a></p>
<p><a href="http://www.01happy.com/">http://www.01happy.com/</a></p>
<p><a href="http://www.widuu.com/archives/category/yaf-framework-2">http://www.widuu.com/archives/category/yaf-framework-2</a></p>
<p><a href="https://www.mengzhidu.com/">https://www.mengzhidu.com/</a></p>
<p><a href="http://www.php1.cn/detail/php-wentis-c817f8fa3d.html">http://www.php1.cn/detail/php-wentis-c817f8fa3d.html</a></p>
<p><a href="https://segmentfault.com/a/1190000004016373">https://segmentfault.com/a/1190000004016373</a></p>
<p><a href="https://devhub.io/repos/xudianyang-yaf.app">https://devhub.io/repos/xudianyang-yaf.app</a></p>
<p><a href="http://www.oss.io/p/xudianyang/yaf.app">http://www.oss.io/p/xudianyang/yaf.app</a></p>
<h1>案例演示</h1>
<p>使用yaf完成一套curd操作，同时做用户的登录和退出，可以理解完成一个后台的用户模块</p>
<h2>用户展示</h2>
<ol>
<li>定义一个init方法，完成初始化操作</li>
</ol>
<p><img loading="lazy" decoding="async" width="1762" height="752" class="wp-image-6731" src="/wp-content/uploads/2018/05/word-image-6137.png" srcset="/wp-content/uploads/2018/05/word-image-6137.png 1762w, /wp-content/uploads/2018/05/word-image-6137-300x128.png 300w, /wp-content/uploads/2018/05/word-image-6137-768x328.png 768w, /wp-content/uploads/2018/05/word-image-6137-1024x437.png 1024w" sizes="(max-width: 1762px) 100vw, 1762px" /></p>
<ol>
<li>定义一个lst方法，完成数据展示</li>
</ol>
<p><img loading="lazy" decoding="async" width="1327" height="619" class="wp-image-6732" src="/wp-content/uploads/2018/05/word-image-6138.png" srcset="/wp-content/uploads/2018/05/word-image-6138.png 1327w, /wp-content/uploads/2018/05/word-image-6138-300x140.png 300w, /wp-content/uploads/2018/05/word-image-6138-768x358.png 768w, /wp-content/uploads/2018/05/word-image-6138-1024x478.png 1024w" sizes="(max-width: 1327px) 100vw, 1327px" /></p>
<ol>
<li>定义一个lst.phtml视图文件</li>
</ol>
<p><img loading="lazy" decoding="async" width="1857" height="941" class="wp-image-6733" src="/wp-content/uploads/2018/05/word-image-6139.png" srcset="/wp-content/uploads/2018/05/word-image-6139.png 1857w, /wp-content/uploads/2018/05/word-image-6139-300x152.png 300w, /wp-content/uploads/2018/05/word-image-6139-768x389.png 768w, /wp-content/uploads/2018/05/word-image-6139-1024x519.png 1024w" sizes="(max-width: 1857px) 100vw, 1857px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="1213" height="728" class="wp-image-6734" src="/wp-content/uploads/2018/05/word-image-6140.png" srcset="/wp-content/uploads/2018/05/word-image-6140.png 1213w, /wp-content/uploads/2018/05/word-image-6140-300x180.png 300w, /wp-content/uploads/2018/05/word-image-6140-768x461.png 768w, /wp-content/uploads/2018/05/word-image-6140-1024x615.png 1024w" sizes="(max-width: 1213px) 100vw, 1213px" /></p>
<h2>用户添加</h2>
<ol>
<li>定义一个add方法，完成用户添加</li>
</ol>
<p><img loading="lazy" decoding="async" width="1615" height="961" class="wp-image-6735" src="/wp-content/uploads/2018/05/word-image-6141.png" srcset="/wp-content/uploads/2018/05/word-image-6141.png 1615w, /wp-content/uploads/2018/05/word-image-6141-300x179.png 300w, /wp-content/uploads/2018/05/word-image-6141-768x457.png 768w, /wp-content/uploads/2018/05/word-image-6141-1024x609.png 1024w" sizes="(max-width: 1615px) 100vw, 1615px" /></p>
<ol>
<li>定义一个add.phtml视图文件，展示添加表单</li>
</ol>
<p><img loading="lazy" decoding="async" width="1862" height="962" class="wp-image-6736" src="/wp-content/uploads/2018/05/word-image-6142.png" srcset="/wp-content/uploads/2018/05/word-image-6142.png 1862w, /wp-content/uploads/2018/05/word-image-6142-300x155.png 300w, /wp-content/uploads/2018/05/word-image-6142-768x397.png 768w, /wp-content/uploads/2018/05/word-image-6142-1024x529.png 1024w" sizes="(max-width: 1862px) 100vw, 1862px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="926" height="730" class="wp-image-6737" src="/wp-content/uploads/2018/05/word-image-6143.png" srcset="/wp-content/uploads/2018/05/word-image-6143.png 926w, /wp-content/uploads/2018/05/word-image-6143-300x237.png 300w, /wp-content/uploads/2018/05/word-image-6143-768x605.png 768w" sizes="(max-width: 926px) 100vw, 926px" /></p>
<h2>用户删除</h2>
<ol>
<li>定义一个del方法，完成用户删除</li>
</ol>
<p><img loading="lazy" decoding="async" width="1453" height="766" class="wp-image-6738" src="/wp-content/uploads/2018/05/word-image-6144.png" srcset="/wp-content/uploads/2018/05/word-image-6144.png 1453w, /wp-content/uploads/2018/05/word-image-6144-300x158.png 300w, /wp-content/uploads/2018/05/word-image-6144-768x405.png 768w, /wp-content/uploads/2018/05/word-image-6144-1024x540.png 1024w" sizes="(max-width: 1453px) 100vw, 1453px" /></p>
<h2>用户编辑</h2>
<ol>
<li>定义一个edt方法，完成用户编辑</li>
</ol>
<p><img loading="lazy" decoding="async" width="1420" height="1002" class="wp-image-6739" src="/wp-content/uploads/2018/05/word-image-6145.png" srcset="/wp-content/uploads/2018/05/word-image-6145.png 1420w, /wp-content/uploads/2018/05/word-image-6145-300x212.png 300w, /wp-content/uploads/2018/05/word-image-6145-768x542.png 768w, /wp-content/uploads/2018/05/word-image-6145-1024x723.png 1024w" sizes="(max-width: 1420px) 100vw, 1420px" /></p>
<ol>
<li>定义一个edt.phtml视图页面，展示待编辑的数据</li>
</ol>
<p><img loading="lazy" decoding="async" width="1867" height="974" class="wp-image-6740" src="/wp-content/uploads/2018/05/word-image-6146.png" srcset="/wp-content/uploads/2018/05/word-image-6146.png 1867w, /wp-content/uploads/2018/05/word-image-6146-300x157.png 300w, /wp-content/uploads/2018/05/word-image-6146-768x401.png 768w, /wp-content/uploads/2018/05/word-image-6146-1024x534.png 1024w" sizes="(max-width: 1867px) 100vw, 1867px" /></p>
<p>效果</p>
<p><img loading="lazy" decoding="async" width="930" height="590" class="wp-image-6741" src="/wp-content/uploads/2018/05/word-image-6147.png" srcset="/wp-content/uploads/2018/05/word-image-6147.png 930w, /wp-content/uploads/2018/05/word-image-6147-300x190.png 300w, /wp-content/uploads/2018/05/word-image-6147-768x487.png 768w" sizes="(max-width: 930px) 100vw, 930px" /></p>
<h2>用户登录</h2>
<ol>
<li>定义一个login方法，完成用户的登录处理</li>
</ol>
<p><img loading="lazy" decoding="async" width="1640" height="888" class="wp-image-6742" src="/wp-content/uploads/2018/05/word-image-6148.png" srcset="/wp-content/uploads/2018/05/word-image-6148.png 1640w, /wp-content/uploads/2018/05/word-image-6148-300x162.png 300w, /wp-content/uploads/2018/05/word-image-6148-768x416.png 768w, /wp-content/uploads/2018/05/word-image-6148-1024x554.png 1024w" sizes="(max-width: 1640px) 100vw, 1640px" /></p>
<h2>用户退出</h2>
<ol>
<li>定义一个logout方法，完成用户退出</li>
</ol>
<p><img loading="lazy" decoding="async" width="1898" height="922" class="wp-image-6743" src="/wp-content/uploads/2018/05/word-image-6149.png" srcset="/wp-content/uploads/2018/05/word-image-6149.png 1898w, /wp-content/uploads/2018/05/word-image-6149-300x146.png 300w, /wp-content/uploads/2018/05/word-image-6149-768x373.png 768w, /wp-content/uploads/2018/05/word-image-6149-1024x497.png 1024w" sizes="(max-width: 1898px) 100vw, 1898px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6500.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>yii2 框架 安装、目录介绍、路由、模型、视图、控制器、留言板案例</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6297.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6297.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 17:28:10 +0000</pubDate>
				<category><![CDATA[Yii]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[安装]]></category>
		<category><![CDATA[控制器]]></category>
		<category><![CDATA[模型]]></category>
		<category><![CDATA[留言板案例]]></category>
		<category><![CDATA[目录介绍]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[路由]]></category>
		<guid isPermaLink="false">/?p=6297</guid>

					<description><![CDATA[Yii2框架 一、Yii2框架 1、什么是Yii2易框架 就是用PHP语言开发的框架 PHP框架区别和常见问题 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1><a id="post-6297-_Toc487903166"></a>Yii2框架</h1>
<h1><a id="post-6297-_Toc487990951"></a>一、Yii2框架</h1>
<h2>1、什么是Yii2易框架</h2>
<p>
  就是用PHP语言开发的框架
</p>
<h2>PHP框架区别和常见问题</h2>
<h3>1）常用PHP框架</h3>
<p><img loading="lazy" decoding="async" width="151" height="51" src="/wp-content/uploads/2018/05/word-image-5740.png" class="wp-image-6298" srcset="/wp-content/uploads/2018/05/word-image-5740.png 151w, /wp-content/uploads/2018/05/word-image-5740-150x51.png 150w" sizes="(max-width: 151px) 100vw, 151px" /><br />
<img loading="lazy" decoding="async" width="290" height="70" src="/wp-content/uploads/2018/05/word-image-5741.png" class="wp-image-6299" /><br />
<img loading="lazy" decoding="async" width="307" height="77" src="/wp-content/uploads/2018/05/word-image-5742.png" class="wp-image-6300" srcset="/wp-content/uploads/2018/05/word-image-5742.png 307w, /wp-content/uploads/2018/05/word-image-5742-300x75.png 300w" sizes="(max-width: 307px) 100vw, 307px" /><br />
<img loading="lazy" decoding="async" width="253" height="53" src="/wp-content/uploads/2018/05/word-image-5743.png" class="wp-image-6301" /><br />
<img loading="lazy" decoding="async" width="286" height="97" src="/wp-content/uploads/2018/05/word-image-5744.png" class="wp-image-6302" /></p>
<p>
  C语言开发
</p>
<p><img loading="lazy" decoding="async" width="187" height="60" src="/wp-content/uploads/2018/05/word-image-5745.png" class="wp-image-6303" /><br />
<img loading="lazy" decoding="async" width="101" height="66" src="/wp-content/uploads/2018/05/word-image-5746.png" class="wp-image-6304" /></p>
<h3>2）常见问题</h3>
<p>
  问：你觉得XXX框架是轻量级还是重量级？
</p>
<p>
  答：框架帮你做的事越多，框架越重。（其次：设计是否复杂？ 运行速度？ 更接近原生？）
</p>
<p>
  问：一般设计框架的时候都需要权衡？
</p>
<p>
  答：开发效率和运行效率（yaf、Phalcon）。
</p>
<h1>下载并安装</h1>
<h2>︴网址</h2>
<p>
  官网：<a href="/goto/w8q1" rel="nofollow">http://www.yiiframework.com/</a>
</p>
<p>
  中文：<a href="/goto/g3cr" rel="nofollow">http://www.yiichina.com/</a>
</p>
<h2>︴下载</h2>
<p><img loading="lazy" decoding="async" width="516" height="342" src="/wp-content/uploads/2018/05/word-image-5747.png" class="wp-image-6305" srcset="/wp-content/uploads/2018/05/word-image-5747.png 516w, /wp-content/uploads/2018/05/word-image-5747-300x199.png 300w" sizes="(max-width: 516px) 100vw, 516px" /><br />
<img loading="lazy" decoding="async" width="241" height="54" src="/wp-content/uploads/2018/05/word-image-5748.png" class="wp-image-6306" /></p>
<h2>︴使用</h2>
<ul>
<li>
    步骤1：解压到指定目录中
  </li>
<li>
    步骤2：初始化，通过命令【php init】
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="684" height="303" src="/wp-content/uploads/2018/05/word-image-5749.png" class="wp-image-6307" srcset="/wp-content/uploads/2018/05/word-image-5749.png 684w, /wp-content/uploads/2018/05/word-image-5749-300x133.png 300w" sizes="(max-width: 684px) 100vw, 684px" /></p>
<ul>
<li>
    步骤3：访问
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1058" height="594" src="/wp-content/uploads/2018/05/word-image-5750.png" class="wp-image-6308" srcset="/wp-content/uploads/2018/05/word-image-5750.png 1058w, /wp-content/uploads/2018/05/word-image-5750-300x168.png 300w, /wp-content/uploads/2018/05/word-image-5750-768x431.png 768w, /wp-content/uploads/2018/05/word-image-5750-1024x575.png 1024w" sizes="(max-width: 1058px) 100vw, 1058px" /></p>
<h1>三、目录介绍</h1>
<p><img loading="lazy" decoding="async" width="306" height="544" src="/wp-content/uploads/2018/05/word-image-5751.png" class="wp-image-6309" srcset="/wp-content/uploads/2018/05/word-image-5751.png 306w, /wp-content/uploads/2018/05/word-image-5751-169x300.png 169w" sizes="(max-width: 306px) 100vw, 306px" /></p>
<h1>四、控制器</h1>
<p><a href="/goto/7a3e" rel="nofollow">http://l.com/yii2/frontend/web/index.php?r=test/index</a>
</p>
<p><img loading="lazy" decoding="async" width="705" height="559" src="/wp-content/uploads/2018/05/word-image-5752.png" class="wp-image-6310" srcset="/wp-content/uploads/2018/05/word-image-5752.png 705w, /wp-content/uploads/2018/05/word-image-5752-300x238.png 300w" sizes="(max-width: 705px) 100vw, 705px" /></p>
<h1>路由</h1>
<h2>路由访问规则</h2>
<p>
  域名/index.php?r=控制器名/方法名
</p>
<p><img loading="lazy" decoding="async" width="840" height="599" src="/wp-content/uploads/2018/05/word-image-5753.png" class="wp-image-6311" srcset="/wp-content/uploads/2018/05/word-image-5753.png 840w, /wp-content/uploads/2018/05/word-image-5753-300x214.png 300w, /wp-content/uploads/2018/05/word-image-5753-768x548.png 768w" sizes="(max-width: 840px) 100vw, 840px" /></p>
<p>
  &lt;?php
</p>
<p>
  namespace frontend\controllers;
</p>
<p>
  use Yii;
</p>
<p>
  use yii\web\Controller;
</p>
<p>
  /**
</p>
<p>
   * 测试控制器
</p>
<p>
   */
</p>
<p>
  class TestController extends Controller
</p>
<p>
  {
</p>
<p>
      /**
</p>
<p>
       * Displays homepage.
</p>
<p>
       *
</p>
<p>
       * @return mixed
</p>
<p>
       */
</p>
<p>
      public function actionIndex()
</p>
<p>
      {
</p>
<p>
          echo 66666;die;
</p>
<p>
          return $this-&gt;render(&#8216;index&#8217;);
</p>
<p>
      }
</p>
<p>
      public function actionAdd()
</p>
<p>
      {
</p>
<p>
          echo 7777777777;die;
</p>
<p>
      }
</p>
<p>
  }
</p>
<p>
  脚下留心：方法前缀必须是action开头
</p>
<h2>美化路由（自定义路由）</h2>
<p><img loading="lazy" decoding="async" width="834" height="390" src="/wp-content/uploads/2018/05/word-image-5754.png" class="wp-image-6312" srcset="/wp-content/uploads/2018/05/word-image-5754.png 834w, /wp-content/uploads/2018/05/word-image-5754-300x140.png 300w, /wp-content/uploads/2018/05/word-image-5754-768x359.png 768w" sizes="(max-width: 834px) 100vw, 834px" /><br />
<img loading="lazy" decoding="async" width="981" height="662" src="/wp-content/uploads/2018/05/word-image-5755.png" class="wp-image-6313" srcset="/wp-content/uploads/2018/05/word-image-5755.png 981w, /wp-content/uploads/2018/05/word-image-5755-300x202.png 300w, /wp-content/uploads/2018/05/word-image-5755-768x518.png 768w" sizes="(max-width: 981px) 100vw, 981px" /></p>
<h1>六、视图</h1>
<h2>1、语法</h2>
<p>
  加载视图并传递数据（数组中的键后期在视图中直接当变量使用）
</p>
<p>
  return $this-&gt;render(&#8216;index&#8217;, [
</p>
<p>
      &#8216;test1&#8217; =&gt; 111,
</p>
<p>
      &#8216;test2&#8217; =&gt; &#8216;dsfsdfa&#8217;,
</p>
<p>
      &#8216;test3&#8217; =&gt; array(&#8216;name&#8217;, 666, &#8216;aaa&#8217;)
</p>
<p>
  ]);
</p>
<p>
  模板显示数据通过&lt;?= $变量名 ?&gt; （注：&lt;?=   相当于  &lt;?php echo ）
</p>
<h2>2、练习</h2>
<p><img loading="lazy" decoding="async" width="961" height="627" src="/wp-content/uploads/2018/05/word-image-5756.png" class="wp-image-6314" srcset="/wp-content/uploads/2018/05/word-image-5756.png 961w, /wp-content/uploads/2018/05/word-image-5756-300x196.png 300w, /wp-content/uploads/2018/05/word-image-5756-768x501.png 768w" sizes="(max-width: 961px) 100vw, 961px" /><br />
<img loading="lazy" decoding="async" width="783" height="575" src="/wp-content/uploads/2018/05/word-image-5757.png" class="wp-image-6315" srcset="/wp-content/uploads/2018/05/word-image-5757.png 783w, /wp-content/uploads/2018/05/word-image-5757-300x220.png 300w, /wp-content/uploads/2018/05/word-image-5757-768x564.png 768w" sizes="(max-width: 783px) 100vw, 783px" /></p>
<h1>七、模型</h1>
<h2>1、准备</h2>
<ul>
<li>
    模型使用手册：<a href="/goto/cbx3" rel="nofollow">http://blog.csdn.net/ww_smile7/article/details/53410166</a>
  </li>
<li>
    设置数据库配置文件
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1106" height="496" src="/wp-content/uploads/2018/05/word-image-5758.png" class="wp-image-6316" srcset="/wp-content/uploads/2018/05/word-image-5758.png 1106w, /wp-content/uploads/2018/05/word-image-5758-300x135.png 300w, /wp-content/uploads/2018/05/word-image-5758-768x344.png 768w, /wp-content/uploads/2018/05/word-image-5758-1024x459.png 1024w" sizes="(max-width: 1106px) 100vw, 1106px" /></p>
<ul>
<li>
    定义模型
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="809" height="419" src="/wp-content/uploads/2018/05/word-image-5759.png" class="wp-image-6317" srcset="/wp-content/uploads/2018/05/word-image-5759.png 809w, /wp-content/uploads/2018/05/word-image-5759-300x155.png 300w, /wp-content/uploads/2018/05/word-image-5759-768x398.png 768w" sizes="(max-width: 809px) 100vw, 809px" /></p>
<p>
  &lt;?php
</p>
<p>
  namespace common\models;
</p>
<p>
  use Yii;
</p>
<p>
  use yii\db\ActiveRecord;
</p>
<p>
  /**
</p>
<p>
   * Login form
</p>
<p>
   */
</p>
<p>
  class Php12 extends ActiveRecord
</p>
<p>
  {
</p>
</p>
<p>
  }
</p>
<h2>2、练习</h2>
<p>
  查询所有
</p>
<p><img loading="lazy" decoding="async" width="1069" height="666" src="/wp-content/uploads/2018/05/word-image-5760.png" class="wp-image-6318" srcset="/wp-content/uploads/2018/05/word-image-5760.png 1069w, /wp-content/uploads/2018/05/word-image-5760-300x187.png 300w, /wp-content/uploads/2018/05/word-image-5760-768x478.png 768w, /wp-content/uploads/2018/05/word-image-5760-1024x638.png 1024w" sizes="(max-width: 1069px) 100vw, 1069px" /></p>
<p>
  查询一条
</p>
<p><img loading="lazy" decoding="async" width="954" height="521" src="/wp-content/uploads/2018/05/word-image-5761.png" class="wp-image-6319" srcset="/wp-content/uploads/2018/05/word-image-5761.png 954w, /wp-content/uploads/2018/05/word-image-5761-300x164.png 300w, /wp-content/uploads/2018/05/word-image-5761-768x419.png 768w" sizes="(max-width: 954px) 100vw, 954px" /><br />
<img loading="lazy" decoding="async" width="1131" height="514" src="/wp-content/uploads/2018/05/word-image-5762.png" class="wp-image-6320" srcset="/wp-content/uploads/2018/05/word-image-5762.png 1131w, /wp-content/uploads/2018/05/word-image-5762-300x136.png 300w, /wp-content/uploads/2018/05/word-image-5762-768x349.png 768w, /wp-content/uploads/2018/05/word-image-5762-1024x465.png 1024w" sizes="(max-width: 1131px) 100vw, 1131px" /></p>
<p>
  插入
</p>
<p><img loading="lazy" decoding="async" width="1316" height="542" src="/wp-content/uploads/2018/05/word-image-5763.png" class="wp-image-6321" srcset="/wp-content/uploads/2018/05/word-image-5763.png 1316w, /wp-content/uploads/2018/05/word-image-5763-300x124.png 300w, /wp-content/uploads/2018/05/word-image-5763-768x316.png 768w, /wp-content/uploads/2018/05/word-image-5763-1024x422.png 1024w" sizes="(max-width: 1316px) 100vw, 1316px" /></p>
<h1>八、留言板案例</h1>
<h2>︴效果</h2>
<p><img loading="lazy" decoding="async" width="397" height="436" src="/wp-content/uploads/2018/05/word-image-5764.png" class="wp-image-6322" srcset="/wp-content/uploads/2018/05/word-image-5764.png 397w, /wp-content/uploads/2018/05/word-image-5764-273x300.png 273w" sizes="(max-width: 397px) 100vw, 397px" /><br />
<img loading="lazy" decoding="async" width="386" height="315" src="/wp-content/uploads/2018/05/word-image-5765.png" class="wp-image-6323" srcset="/wp-content/uploads/2018/05/word-image-5765.png 386w, /wp-content/uploads/2018/05/word-image-5765-300x245.png 300w" sizes="(max-width: 386px) 100vw, 386px" /></p>
<h2>︴代码</h2>
<h3>准备</h3>
<ul>
<li>
    创建表
  </li>
</ul>
<p>
  create table msg (
</p>
<p>
  id int primary key auto_increment comment &#8216;编号&#8217;,
</p>
<p>
  title varchar(60) not null comment &#8216;标题&#8217;,
</p>
<p>
  `desc` text comment &#8216;描述&#8217;,
</p>
<p>
  created_at int default 0 comment &#8216;创建于&#8217;,
</p>
<p>
  updated_at int default 0 comment &#8216;更新于&#8217;
</p>
<p>
  )engine=myisam charset=utf8;
</p>
<ul>
<li>
    创建模型
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="606" height="340" src="/wp-content/uploads/2018/05/word-image-5766.png" class="wp-image-6324" srcset="/wp-content/uploads/2018/05/word-image-5766.png 606w, /wp-content/uploads/2018/05/word-image-5766-300x168.png 300w" sizes="(max-width: 606px) 100vw, 606px" /></p>
<p>
  &lt;?php
</p>
<p>
  namespace common\models;
</p>
<p>
  use Yii;
</p>
<p>
  use yii\db\ActiveRecord;
</p>
<p>
  /**
</p>
<p>
   * Login form
</p>
<p>
   */
</p>
<p>
  class Msg extends ActiveRecord
</p>
<p>
  {
</p>
</p>
<p>
  }
</p>
<h3>列表功能</h3>
<ul>
<li>
    步骤1：定义路由
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="904" height="489" src="/wp-content/uploads/2018/05/word-image-5767.png" class="wp-image-6325" srcset="/wp-content/uploads/2018/05/word-image-5767.png 904w, /wp-content/uploads/2018/05/word-image-5767-300x162.png 300w, /wp-content/uploads/2018/05/word-image-5767-768x415.png 768w" sizes="(max-width: 904px) 100vw, 904px" /></p>
<ul>
<li>
    步骤2：创建控制器方法、查询所有留言数据并传递给视图
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="762" height="715" src="/wp-content/uploads/2018/05/word-image-5768.png" class="wp-image-6326" srcset="/wp-content/uploads/2018/05/word-image-5768.png 762w, /wp-content/uploads/2018/05/word-image-5768-300x281.png 300w" sizes="(max-width: 762px) 100vw, 762px" /></p>
<p>
  &lt;?php
</p>
<p>
  namespace frontend\controllers;
</p>
<p>
  use Yii;
</p>
<p>
  use common\models\Msg;
</p>
<p>
  use yii\web\Controller;
</p>
<p>
  /**
</p>
<p>
   * 测试控制器
</p>
<p>
   */
</p>
<p>
  class MsgController extends Controller
</p>
<p>
  {
</p>
<p>
      //说明laravel框架有layout模板机制
</p>
<p>
      //声明属性决定layout是否使用
</p>
<p>
      //当前控制器都生效
</p>
<p>
      public $layout = false;
</p>
<p>
      public function actionIndex()
</p>
<p>
      {
</p>
<p>
          //1.查询数据通过模型
</p>
<p>
          $msgs = Msg::find()-&gt;all();
</p>
<p>
          //2.加载视图并传递数据
</p>
<p>
          return $this-&gt;render(&#8216;index&#8217;, [
</p>
<p>
              &#8216;msgs&#8217; =&gt; $msgs
</p>
<p>
          ]);
</p>
<p>
      }
</p>
<p>
  }
</p>
<ul>
<li>
    步骤3：创建视图
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1180" height="697" src="/wp-content/uploads/2018/05/word-image-5769.png" class="wp-image-6328" srcset="/wp-content/uploads/2018/05/word-image-5769.png 1180w, /wp-content/uploads/2018/05/word-image-5769-300x177.png 300w, /wp-content/uploads/2018/05/word-image-5769-768x454.png 768w, /wp-content/uploads/2018/05/word-image-5769-1024x605.png 1024w" sizes="(max-width: 1180px) 100vw, 1180px" /></p>
<ul>
<li>
    步骤4：循环显示数据
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1098" height="496" src="/wp-content/uploads/2018/05/word-image-5770.png" class="wp-image-6329" srcset="/wp-content/uploads/2018/05/word-image-5770.png 1098w, /wp-content/uploads/2018/05/word-image-5770-300x136.png 300w, /wp-content/uploads/2018/05/word-image-5770-768x347.png 768w, /wp-content/uploads/2018/05/word-image-5770-1024x463.png 1024w" sizes="(max-width: 1098px) 100vw, 1098px" /></p>
<p>
  &lt;!DOCTYPE html&gt;
</p>
<p>
  &lt;html&gt;
</p>
<p>
  &lt;head&gt;
</p>
<p>
  	&lt;meta charset=&#8221;utf-8&#8243;&gt;
</p>
<p>
      &lt;meta http-equiv=&#8221;Content-Type&#8221; content=&#8221;text/html; charset=utf-8&#8243; /&gt;
</p>
<p>
  	&lt;meta content=&#8221;telephone=no, address=no&#8221; name=&#8221;format-detection&#8221;&gt;
</p>
<p>
  	&lt;meta content=&#8221;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&#8221; name=&#8221;viewport&#8221;&gt;
</p>
<p>
      &lt;title&gt;微留言演示案例&lt;/title&gt;
</p>
<p>
      &lt;link rel=&#8221;stylesheet&#8221; type=&#8221;text/css&#8221; href=&#8221;./message/msg.css&#8221; media=&#8221;all&#8221; /&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body id=&#8221;message&#8221; onselectstart=&#8221;return true;&#8221; ondragstart=&#8221;return false;&#8221;&gt;
</p>
<p>
  	&lt;div class=&#8221;container&#8221;&gt;
</p>
<p>
  	  	&lt;div class=&#8221;qiandaobanner&#8221;&gt;
</p>
<p>
  		  	&lt;a href=&#8221;./message&#8221;&gt;
</p>
<p>
  		  		&lt;img src=&#8221;./message/wall.jpg&#8221; style=&#8221;width:100%;&#8221; /&gt;
</p>
<p>
  		  	&lt;/a&gt;
</p>
<p>
  	  	&lt;/div&gt;
</p>
<p>
  		&lt;div class=&#8221;cardexplain&#8221;&gt;
</p>
<p>
  			&lt;div class=&#8221;window&#8221; id=&#8221;windowcenter&#8221;&gt;
</p>
<p>
  				&lt;div id=&#8221;title&#8221; class=&#8221;wtitle&#8221;&gt;操作提示&lt;span class=&#8221;close&#8221; id=&#8221;alertclose&#8221;&gt;&lt;/span&gt;&lt;/div&gt;
</p>
<p>
  				&lt;div class=&#8221;content&#8221;&gt;
</p>
<p>
  					&lt;div id=&#8221;txt&#8221;&gt;&lt;/div&gt;
</p>
<p>
  				&lt;/div&gt;
</p>
<p>
  			&lt;/div&gt;
</p>
<p>
    			&lt;div class=&#8221;history&#8221;&gt;
</p>
<p>
  				&lt;div class=&#8221;history-date&#8221;&gt;
</p>
<p>
  					&lt;ul&gt;
</p>
<p>
  						&lt;?php foreach ($msgs as $msg) :  ?&gt;
</p>
<p>
  						&lt;li class=&#8221;green bounceInDown&#8221;&gt;
</p>
<p>
  							&lt;h3&gt;
</p>
<p>
  								&lt;img src=&#8221;./message/logo100x100.jpg&#8221;&gt;
</p>
<p>
  								&lt;?= $msg-&gt;title ?&gt;
</p>
<p>
  								&lt;span&gt;&lt;?= date(&#8216;Y-m-d&#8217;, $msg-&gt;created_at) ?&gt;&lt;/span&gt;
</p>
<p>
  								&lt;div class=&#8221;clr&#8221;&gt;&lt;/div&gt;
</p>
<p>
  							&lt;/h3&gt;
</p>
<p>
  							&lt;dl&gt;
</p>
<p>
  								&lt;dt class=&#8221;hfinfo&#8221;&gt;&lt;?= $msg-&gt;desc ?&gt;&lt;/dt&gt;
</p>
<p>
  							&lt;/dl&gt;
</p>
<p>
  						&lt;/li&gt;
</p>
<p>
  						&lt;?php  endforeach; ?&gt;
</p>
<p>
  						&lt;li class=&#8221;green bounceInDown nob ly2&#8243; style=&#8221;display:none;&#8221;&gt;
</p>
<p>
  							&lt;form action=&#8221;&#8221; method=&#8221;post&#8221; class=&#8221;form1&#8243;&gt;
</p>
<p>
  							&lt;dl&gt;
</p>
<p>
  								&lt;dt&gt;
</p>
<p>
  									&lt;input name=&#8221;uname&#8221; type=&#8221;text&#8221; class=&#8221;px&#8221; id=&#8221;uname&#8221; value=&#8221;&#8221; placeholder=&#8221;请输入您的昵称&#8221;&gt;
</p>
<p>
  									&lt;/dt&gt;
</p>
<p>
  								&lt;dt&gt;
</p>
<p>
  									&lt;textarea name=&#8221;content&#8221; class=&#8221;pxtextarea&#8221; style=&#8221; height:60px;&#8221; id=&#8221;content&#8221; placeholder=&#8221;请输入留言内容&#8221;&gt;&lt;/textarea&gt;
</p>
<p>
  								&lt;/dt&gt;
</p>
<p>
  								&lt;dt&gt;
</p>
<p>
  									&lt;a class=&#8221;submit&#8221; href=&#8221;javascript:void(0);&#8221;&gt;提交留言&lt;/a&gt;
</p>
<p>
  								&lt;/dt&gt;
</p>
<p>
  							&lt;/dl&gt;
</p>
<p>
  							&lt;/form&gt;
</p>
<p>
  						&lt;/li&gt;
</p>
<p>
  						&lt;a&gt;&lt;h2 class=&#8221;first first2&#8243; style=&#8221;position: relative;&#8221;&gt;点击留言&lt;/h2&gt;&lt;/a&gt;
</p>
<p>
  					&lt;/ul&gt;
</p>
<p>
  				&lt;/div&gt;
</p>
<p>
  			&lt;/div&gt;
</p>
<p>
  		&lt;/div&gt;
</p>
<p>
  	&lt;/div&gt;
</p>
<p>
  	&lt;script type=&#8221;text/javascript&#8221; src=&#8221;./message/jquery.js&#8221;&gt;&lt;/script&gt;
</p>
<p>
  	&lt;script type=&#8221;text/javascript&#8221;&gt;
</p>
<p>
  		$(function(){
</p>
<p>
  			//留言表单显示切换
</p>
<p>
  			$(&#8220;.first1&#8221;).click(function(){
</p>
<p>
  				$(&#8220;.ly1&#8221;).slideToggle();
</p>
<p>
  			});
</p>
<p>
  			$(&#8220;.first2&#8221;).click(function(){
</p>
<p>
  				$(&#8220;.ly2&#8221;).slideToggle();
</p>
<p>
  			});
</p>
<p>
  			//点击提交留言a标签，则提交表单
</p>
<p>
  			$(&#8216;.submit&#8217;).click(function(){
</p>
<p>
  				//判断用户名和密码不能为空
</p>
<p>
  				var uname = $(&#8216;#uname&#8217;).val();
</p>
<p>
  				var content = $(&#8216;#content&#8217;).val();
</p>
<p>
  				if (uname == &#8221; || content == &#8221;) {
</p>
<p>
  					alert(&#8216;请输入昵称或留言内容&#8217;);
</p>
<p>
  					return;
</p>
<p>
  				}
</p>
<p>
  				//提交表单
</p>
<p>
  				$(&#8216;.form1&#8217;).submit();
</p>
<p>
  			});
</p>
<p>
  		});
</p>
<p>
  	&lt;/script&gt;
</p>
<p>
  &lt;/body&gt;
</p>
<p>
  &lt;/html&gt;
</p>
<h3>添加功能</h3>
<ul>
<li>
    定义路由处理添加数据
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="756" height="472" src="/wp-content/uploads/2018/05/word-image-5771.png" class="wp-image-6330" srcset="/wp-content/uploads/2018/05/word-image-5771.png 756w, /wp-content/uploads/2018/05/word-image-5771-300x187.png 300w" sizes="(max-width: 756px) 100vw, 756px" /></p>
<ul>
<li>
    创建控制器方法处理数据
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="818" height="661" src="/wp-content/uploads/2018/05/word-image-5772.png" class="wp-image-6331" srcset="/wp-content/uploads/2018/05/word-image-5772.png 818w, /wp-content/uploads/2018/05/word-image-5772-300x242.png 300w, /wp-content/uploads/2018/05/word-image-5772-768x621.png 768w" sizes="(max-width: 818px) 100vw, 818px" /></p>
<p>
  &lt;?php
</p>
<p>
  namespace frontend\controllers;
</p>
<p>
  use Yii;
</p>
<p>
  use common\models\Msg;
</p>
<p>
  use yii\web\Controller;
</p>
<p>
  /**
</p>
<p>
   * 测试控制器
</p>
<p>
   */
</p>
<p>
  class MsgController extends Controller
</p>
<p>
  {
</p>
<p>
      //说明laravel框架有layout模板机制
</p>
<p>
      //声明属性决定layout是否使用
</p>
<p>
      //当前控制器都生效
</p>
<p>
      public $layout = false;
</p>
<p>
      //关闭cstf验证
</p>
<p>
      public $enableCsrfValidation = false;
</p>
<p>
      //添加
</p>
<p>
      public function actionCreate()
</p>
<p>
      {
</p>
<p>
          //1.判断是否post提交
</p>
<p>
          if (Yii::$app-&gt;request-&gt;isPost) {
</p>
<p>
              //2.接受数据
</p>
<p>
              $title = Yii::$app-&gt;request-&gt;post(&#8216;uname&#8217;);
</p>
<p>
              $desc = Yii::$app-&gt;request-&gt;post(&#8216;content&#8217;);
</p>
<p>
              //3.实例化对象并保存数据
</p>
<p>
              $msg = new Msg;
</p>
<p>
              $msg-&gt;title = $title;
</p>
<p>
              $msg-&gt;desc = $desc;
</p>
<p>
              $msg-&gt;created_at = time();
</p>
<p>
              $msg-&gt;updated_at = time();
</p>
<p>
              $rs = $msg-&gt;save();
</p>
<p>
              return $this-&gt;redirect([&#8216;/msg&#8217;]);
</p>
<p>
          }
</p>
<p>
      }
</p>
<p>
      //列表
</p>
<p>
      public function actionIndex()
</p>
<p>
      {
</p>
<p>
          //1.查询数据通过模型
</p>
<p>
          $msgs = Msg::find()-&gt;all();
</p>
<p>
          //2.加载视图并传递数据
</p>
<p>
          return $this-&gt;render(&#8216;index&#8217;, [
</p>
<p>
              &#8216;msgs&#8217; =&gt; $msgs
</p>
<p>
          ]);
</p>
<p>
      }
</p>
<p>
  }
</p>
<p><img loading="lazy" decoding="async" width="717" height="382" src="/wp-content/uploads/2018/05/word-image-5773.png" class="wp-image-6332" srcset="/wp-content/uploads/2018/05/word-image-5773.png 717w, /wp-content/uploads/2018/05/word-image-5773-300x160.png 300w" sizes="(max-width: 717px) 100vw, 717px" /><br />
<img loading="lazy" decoding="async" width="792" height="446" src="/wp-content/uploads/2018/05/word-image-5774.png" class="wp-image-6333" srcset="/wp-content/uploads/2018/05/word-image-5774.png 792w, /wp-content/uploads/2018/05/word-image-5774-300x169.png 300w, /wp-content/uploads/2018/05/word-image-5774-768x432.png 768w" sizes="(max-width: 792px) 100vw, 792px" /></p>
<p>
  多学一招：
</p>
<p>
  Yii::$app-&gt;request-&gt;isPost
</p>
<p>
  Yii::$app-&gt;request-&gt;post(键)</p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6297.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Laravel框架（一）安装、Composer、目录结构、路由、模型、视图、控制器</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6202.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6202.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 16:19:00 +0000</pubDate>
				<category><![CDATA[Laravel]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[Composer]]></category>
		<category><![CDATA[安装]]></category>
		<category><![CDATA[控制器]]></category>
		<category><![CDATA[模型]]></category>
		<category><![CDATA[目录结构]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[路由]]></category>
		<guid isPermaLink="false">/?p=6202</guid>

					<description><![CDATA[Laravel框架第1天 一、Laravel概述 1、Laravel框架简介 Laravel是一套简洁、优雅的 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>Laravel框架第1天</h1>
<h1>一、Laravel概述</h1>
<h2>1、Laravel框架简介</h2>
<ul>
<li>
    Laravel是一套简洁、优雅的PHP WEB开发框架（目前最流行的PHP框架，
  </li>
</ul>
<p>
  基于symfony开发）
</p>
<ul>
<li>
    具有富于表达性且简洁的语法。更加语意化
  </li>
<li>
    Laravel是易于理解且强大的，它提供了强大的工具用于开发大型、健壮的应用，如：
  </li>
</ul>
<p>
  验证、反向路由、会话技术、缓存、数据迁移、单元测试等等常用工具和功能
</p>
<h2>2、什么是Laravel</h2>
<p>
  就是用PHP写的框架
</p>
<h2>3、Laravel框架相对于其他框架优势</h2>
<p>
  强大路由（route）
</p>
<p>
  命令行工具（artisan）：加快项目开发（很多手动的工作都自动了）
</p>
<p>
  blade模版：可继承、渲染速度快、简化view开发和管理
</p>
<p>
  数据迁移（Migrations）: 管理数据库和版本控制
</p>
<p>
  单元测试（PHPUnit）：保证稳定性（便于发现问题，无论是需求更变还是代码本
</p>
<p>
  身的bug及代码重构）
</p>
<p>
  支持Composer：项目组件管理工具
</p>
<h1>二、Laravel的安装</h1>
<h2> 准备：PHP运行环境</h2>
<h3>a. 环境要求</h3>
<p><img loading="lazy" decoding="async" width="321" height="133" src="/wp-content/uploads/2018/05/word-image-5647.png" class="wp-image-6203" srcset="/wp-content/uploads/2018/05/word-image-5647.png 321w, /wp-content/uploads/2018/05/word-image-5647-300x124.png 300w" sizes="(max-width: 321px) 100vw, 321px" /></p>
<h3>b. 通过phpStudy搭建PHP运行环境</h3>
<p><img loading="lazy" decoding="async" width="557" height="339" src="/wp-content/uploads/2018/05/word-image-5648.png" class="wp-image-6204" srcset="/wp-content/uploads/2018/05/word-image-5648.png 557w, /wp-content/uploads/2018/05/word-image-5648-300x183.png 300w" sizes="(max-width: 557px) 100vw, 557px" /><br />
<img loading="lazy" decoding="async" width="290" height="125" src="/wp-content/uploads/2018/05/word-image-5649.png" class="wp-image-6205" /><br />
<img loading="lazy" decoding="async" width="395" height="346" src="/wp-content/uploads/2018/05/word-image-5650.png" class="wp-image-6206" srcset="/wp-content/uploads/2018/05/word-image-5650.png 395w, /wp-content/uploads/2018/05/word-image-5650-300x263.png 300w" sizes="(max-width: 395px) 100vw, 395px" /></p>
<h3>c. PHP相关配置（修改并保存）</h3>
<p><strong>1）切换PHP版本</strong>
</p>
<p><img loading="lazy" decoding="async" width="890" height="659" src="/wp-content/uploads/2018/05/word-image-5651.png" class="wp-image-6207" srcset="/wp-content/uploads/2018/05/word-image-5651.png 890w, /wp-content/uploads/2018/05/word-image-5651-300x222.png 300w, /wp-content/uploads/2018/05/word-image-5651-768x569.png 768w" sizes="(max-width: 890px) 100vw, 890px" /></p>
<p><strong>2）开启openssl、mbstring、pdo、fileinfo扩展</strong>
</p>
<p><img loading="lazy" decoding="async" width="1022" height="405" src="/wp-content/uploads/2018/05/word-image-5652.png" class="wp-image-6208" srcset="/wp-content/uploads/2018/05/word-image-5652.png 1022w, /wp-content/uploads/2018/05/word-image-5652-300x119.png 300w, /wp-content/uploads/2018/05/word-image-5652-768x304.png 768w" sizes="(max-width: 1022px) 100vw, 1022px" /><br />
<img loading="lazy" decoding="async" width="393" height="373" src="/wp-content/uploads/2018/05/word-image-5653.png" class="wp-image-6209" srcset="/wp-content/uploads/2018/05/word-image-5653.png 393w, /wp-content/uploads/2018/05/word-image-5653-300x285.png 300w" sizes="(max-width: 393px) 100vw, 393px" /></p>
<ol>
<li><strong>修改时区</strong>
</li>
</ol>
<p><img loading="lazy" decoding="async" width="417" height="214" src="/wp-content/uploads/2018/05/word-image-5654.png" class="wp-image-6210" srcset="/wp-content/uploads/2018/05/word-image-5654.png 417w, /wp-content/uploads/2018/05/word-image-5654-300x154.png 300w" sizes="(max-width: 417px) 100vw, 417px" /></p>
<ol>
<li><strong>验证</strong>
</li>
</ol>
<p><img loading="lazy" decoding="async" width="386" height="320" src="/wp-content/uploads/2018/05/word-image-5655.png" class="wp-image-6211" srcset="/wp-content/uploads/2018/05/word-image-5655.png 386w, /wp-content/uploads/2018/05/word-image-5655-300x249.png 300w" sizes="(max-width: 386px) 100vw, 386px" /><br />
<img loading="lazy" decoding="async" width="540" height="486" src="/wp-content/uploads/2018/05/word-image-5656.png" class="wp-image-6212" srcset="/wp-content/uploads/2018/05/word-image-5656.png 540w, /wp-content/uploads/2018/05/word-image-5656-300x270.png 300w" sizes="(max-width: 540px) 100vw, 540px" /><br />
<img loading="lazy" decoding="async" width="1081" height="216" src="/wp-content/uploads/2018/05/word-image-5657.png" class="wp-image-6213" srcset="/wp-content/uploads/2018/05/word-image-5657.png 1081w, /wp-content/uploads/2018/05/word-image-5657-300x60.png 300w, /wp-content/uploads/2018/05/word-image-5657-768x153.png 768w, /wp-content/uploads/2018/05/word-image-5657-1024x205.png 1024w" sizes="(max-width: 1081px) 100vw, 1081px" /><br />
<img loading="lazy" decoding="async" width="1086" height="289" src="/wp-content/uploads/2018/05/word-image-5658.png" class="wp-image-6214" srcset="/wp-content/uploads/2018/05/word-image-5658.png 1086w, /wp-content/uploads/2018/05/word-image-5658-300x80.png 300w, /wp-content/uploads/2018/05/word-image-5658-768x204.png 768w, /wp-content/uploads/2018/05/word-image-5658-1024x273.png 1024w" sizes="(max-width: 1086px) 100vw, 1086px" /><br />
<img loading="lazy" decoding="async" width="938" height="336" src="/wp-content/uploads/2018/05/word-image-5659.png" class="wp-image-6215" srcset="/wp-content/uploads/2018/05/word-image-5659.png 938w, /wp-content/uploads/2018/05/word-image-5659-300x107.png 300w, /wp-content/uploads/2018/05/word-image-5659-768x275.png 768w" sizes="(max-width: 938px) 100vw, 938px" /></p>
<h3>d. 设置PHP环境变量</h3>
<p><img loading="lazy" decoding="async" width="260" height="362" src="/wp-content/uploads/2018/05/word-image-5660.png" class="wp-image-6216" srcset="/wp-content/uploads/2018/05/word-image-5660.png 260w, /wp-content/uploads/2018/05/word-image-5660-215x300.png 215w" sizes="(max-width: 260px) 100vw, 260px" /><br />
<img loading="lazy" decoding="async" width="1267" height="711" src="/wp-content/uploads/2018/05/word-image-5661.png" class="wp-image-6217" srcset="/wp-content/uploads/2018/05/word-image-5661.png 1267w, /wp-content/uploads/2018/05/word-image-5661-300x168.png 300w, /wp-content/uploads/2018/05/word-image-5661-768x431.png 768w, /wp-content/uploads/2018/05/word-image-5661-1024x575.png 1024w" sizes="(max-width: 1267px) 100vw, 1267px" /></p>
<p>
  验证是否设置成功
</p>
<p><img loading="lazy" decoding="async" width="500" height="185" src="/wp-content/uploads/2018/05/word-image-5662.png" class="wp-image-6218" srcset="/wp-content/uploads/2018/05/word-image-5662.png 500w, /wp-content/uploads/2018/05/word-image-5662-300x111.png 300w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<h3>e. 创建虚拟主机</h3>
<ol>
<li>
  修改C:\Windows\System32\drivers\etc\hosts文件
</li>
</ol>
<p><img loading="lazy" decoding="async" width="432" height="156" src="/wp-content/uploads/2018/05/word-image-5663.png" class="wp-image-6219" srcset="/wp-content/uploads/2018/05/word-image-5663.png 432w, /wp-content/uploads/2018/05/word-image-5663-300x108.png 300w" sizes="(max-width: 432px) 100vw, 432px" /></p>
<ol>
<li>
  创建文件e:\www\test.php文件
</li>
</ol>
<p><img loading="lazy" decoding="async" width="478" height="224" src="/wp-content/uploads/2018/05/word-image-5664.png" class="wp-image-6220" srcset="/wp-content/uploads/2018/05/word-image-5664.png 478w, /wp-content/uploads/2018/05/word-image-5664-300x141.png 300w" sizes="(max-width: 478px) 100vw, 478px" /></p>
<ol>
<li>
  新增虚拟主机
</li>
</ol>
<p><img loading="lazy" decoding="async" width="1001" height="638" src="/wp-content/uploads/2018/05/word-image-5665.png" class="wp-image-6221" srcset="/wp-content/uploads/2018/05/word-image-5665.png 1001w, /wp-content/uploads/2018/05/word-image-5665-300x191.png 300w, /wp-content/uploads/2018/05/word-image-5665-768x489.png 768w" sizes="(max-width: 1001px) 100vw, 1001px" /></p>
<p>
  发现：直接输入网址不加具体访问的php文件名则显示403 Forbidden
</p>
<p>
  解决：
</p>
<p><img loading="lazy" decoding="async" width="1173" height="421" src="/wp-content/uploads/2018/05/word-image-5666.png" class="wp-image-6222" srcset="/wp-content/uploads/2018/05/word-image-5666.png 1173w, /wp-content/uploads/2018/05/word-image-5666-300x108.png 300w, /wp-content/uploads/2018/05/word-image-5666-768x276.png 768w, /wp-content/uploads/2018/05/word-image-5666-1024x368.png 1024w" sizes="(max-width: 1173px) 100vw, 1173px" /></p>
<h2>1、安装方式</h2>
<ul>
<li>
    方法1：直接下载源代码安装
  </li>
<li>
    方法2：通过composer安装
  </li>
</ul>
<h2>2、直接下载源代码安装【方法1】</h2>
<h3>步骤1：下载</h3>
<p>
  下载地址：<a href="http://laravelacademy.org/resources-download">http://laravelacademy.org/resources-download</a>
</p>
<p><img loading="lazy" decoding="async" width="121" height="126" src="/wp-content/uploads/2018/05/word-image-5667.png" class="wp-image-6223" /></p>
<h3>步骤2：解压到指定虚拟主机目录</h3>
<p><img loading="lazy" decoding="async" width="682" height="348" src="/wp-content/uploads/2018/05/word-image-5668.png" class="wp-image-6224" srcset="/wp-content/uploads/2018/05/word-image-5668.png 682w, /wp-content/uploads/2018/05/word-image-5668-300x153.png 300w" sizes="(max-width: 682px) 100vw, 682px" /></p>
<h3>步骤3：访问（注：入口文件在public目录下）</h3>
<p><img loading="lazy" decoding="async" width="533" height="396" src="/wp-content/uploads/2018/05/word-image-5669.png" class="wp-image-6225" srcset="/wp-content/uploads/2018/05/word-image-5669.png 533w, /wp-content/uploads/2018/05/word-image-5669-300x223.png 300w" sizes="(max-width: 533px) 100vw, 533px" /></p>
<h2>3、通过Composer安装Laravel【方法2】</h2>
<h3>1）什么是Composer</h3>
<p><img loading="lazy" decoding="async" width="233" height="272" src="/wp-content/uploads/2018/05/word-image-5670.png" class="wp-image-6226" /></p>
<ul>
<li>
    介绍：是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中
  </li>
</ul>
<p>
  声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。
</p>
<ul>
<li>
    理解：
  </li>
<li>
    如果PHP是win操作系统，composer就是杀毒软件的软件管家
  </li>
<li>
    如果PHP是Linux操作系统，composer就是yum
  </li>
</ul>
<p>
  之前：项目中需要发送邮件、验证码等功能必须自己去网上下载整合到项目中
</p>
<p>
  现在：通过composer命令安装自动整合到项目中
</p>
<ul>
<li>
    总结：
  </li>
<li>
    Composer是为PHP准备的软件管家，项目所需工具库都可以通过Composer下载
  </li>
</ul>
<h3>2）下载Composer</h3>
<ul>
<li>
    官方网站：<a href="https://getcomposer.org/">https://getcomposer.org/</a>
  </li>
<li>
    中文网站：<a href="http://www.phpcomposer.com/">http://www.phpcomposer.com/</a>
  </li>
</ul>
<p><strong>【方法1】</strong>
</p>
<ul>
<li>
    下载composer-setup.exe文件安装
  </li>
<li>
    好处：傻瓜式、安装简单
  </li>
<li>
    坏处：容易报错、仅win操作系统使用
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="568" height="380" src="/wp-content/uploads/2018/05/word-image-5671.png" class="wp-image-6227" srcset="/wp-content/uploads/2018/05/word-image-5671.png 568w, /wp-content/uploads/2018/05/word-image-5671-300x201.png 300w" sizes="(max-width: 568px) 100vw, 568px" /></p>
<p><strong>【方法2】</strong>
</p>
<ul>
<li>
    下载composer.phar文件安装
  </li>
<li>
    好处：跨平台
  </li>
<li>
    坏处：渣渣上手难
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="678" height="313" src="/wp-content/uploads/2018/05/word-image-5672.png" class="wp-image-6228" srcset="/wp-content/uploads/2018/05/word-image-5672.png 678w, /wp-content/uploads/2018/05/word-image-5672-300x138.png 300w" sizes="(max-width: 678px) 100vw, 678px" /></p>
<h3>■ 方法1：通过composer-setup.exe安装</h3>
<p><strong>步骤1：双击</strong>
</p>
<p><img loading="lazy" decoding="async" width="425" height="144" src="/wp-content/uploads/2018/05/word-image-5673.png" class="wp-image-6229" srcset="/wp-content/uploads/2018/05/word-image-5673.png 425w, /wp-content/uploads/2018/05/word-image-5673-300x102.png 300w" sizes="(max-width: 425px) 100vw, 425px" /></p>
<p><strong>步骤2：安装（注：除下图选择php.exe其余直接下一步next）:</strong>
</p>
<p><img loading="lazy" decoding="async" width="553" height="271" src="/wp-content/uploads/2018/05/word-image-5674.png" class="wp-image-6230" srcset="/wp-content/uploads/2018/05/word-image-5674.png 553w, /wp-content/uploads/2018/05/word-image-5674-300x147.png 300w" sizes="(max-width: 553px) 100vw, 553px" /></p>
<p><strong>步骤3：检查是否安装成功（在DOS窗口输入 composer出现下图字样则安装成功）</strong>
</p>
<p><img loading="lazy" decoding="async" width="647" height="318" src="/wp-content/uploads/2018/05/word-image-5675.png" class="wp-image-6231" srcset="/wp-content/uploads/2018/05/word-image-5675.png 647w, /wp-content/uploads/2018/05/word-image-5675-300x147.png 300w" sizes="(max-width: 647px) 100vw, 647px" /></p>
<h3>■ 方法2：通过composer.phar文件安装</h3>
<p><strong>步骤1：该文件免安装所以可以直接使用</strong>
</p>
<p><strong>步骤2：检查是否安装成功（在DOS窗口输入 composer出现下图字样则安装成功）</strong>
</p>
<p><img loading="lazy" decoding="async" width="806" height="318" src="/wp-content/uploads/2018/05/word-image-5676.png" class="wp-image-6232" srcset="/wp-content/uploads/2018/05/word-image-5676.png 806w, /wp-content/uploads/2018/05/word-image-5676-300x118.png 300w, /wp-content/uploads/2018/05/word-image-5676-768x303.png 768w" sizes="(max-width: 806px) 100vw, 806px" /></p>
<h3>3）Composer命令</h3>
<ul>
<li>
    复杂：php composer.phar 指令
  </li>
<li>
    简化：composer 指令
  </li>
</ul>
<p>
  说明：后期大量使用composer命令，语法：【php composer.phar 指令】
</p>
<p>
  发现：每次重复敲【php composer.phar】太长
</p>
<p>
  解决：
</p>
<ol>
<li>
  将composer.phar放到www目录中然后输入DOS命令
</li>
</ol>
<p>
  【echo @php &#8220;%~dp0composer.phar&#8221; %*&gt;composer.bat】后发现www目录下新增了.bat文件将其加入环境变量即可
</p>
<p><img loading="lazy" decoding="async" width="722" height="190" src="/wp-content/uploads/2018/05/word-image-5677.png" class="wp-image-6233" srcset="/wp-content/uploads/2018/05/word-image-5677.png 722w, /wp-content/uploads/2018/05/word-image-5677-300x79.png 300w" sizes="(max-width: 722px) 100vw, 722px" /></p>
<p>
  2）将composer.bat将去环境变量
</p>
<p><img loading="lazy" decoding="async" width="1248" height="717" src="/wp-content/uploads/2018/05/word-image-5678.png" class="wp-image-6234" srcset="/wp-content/uploads/2018/05/word-image-5678.png 1248w, /wp-content/uploads/2018/05/word-image-5678-300x172.png 300w, /wp-content/uploads/2018/05/word-image-5678-768x441.png 768w, /wp-content/uploads/2018/05/word-image-5678-1024x588.png 1024w" sizes="(max-width: 1248px) 100vw, 1248px" /></p>
<p>
  3）验证
</p>
<p><img loading="lazy" decoding="async" width="464" height="255" src="/wp-content/uploads/2018/05/word-image-5679.png" class="wp-image-6235" srcset="/wp-content/uploads/2018/05/word-image-5679.png 464w, /wp-content/uploads/2018/05/word-image-5679-300x165.png 300w" sizes="(max-width: 464px) 100vw, 464px" /></p>
<h3>安装Laravel（后天详细讲解）</h3>
<p>
  步骤1：配置通过国内镜像下载
</p>
<p>
  composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com/">https://packagist.phpcomposer.com/</a>
</p>
<p>
  步骤2：通过Composer下载框架
</p>
<p>
  composer create-project laravel/laravel test_laravel
</p>
<p><img loading="lazy" decoding="async" width="1135" height="509" src="/wp-content/uploads/2018/05/word-image-5680.png" class="wp-image-6236" srcset="/wp-content/uploads/2018/05/word-image-5680.png 1135w, /wp-content/uploads/2018/05/word-image-5680-300x135.png 300w, /wp-content/uploads/2018/05/word-image-5680-768x344.png 768w, /wp-content/uploads/2018/05/word-image-5680-1024x459.png 1024w" sizes="(max-width: 1135px) 100vw, 1135px" /><br />
<img loading="lazy" decoding="async" width="777" height="518" src="/wp-content/uploads/2018/05/word-image-5681.png" class="wp-image-6237" srcset="/wp-content/uploads/2018/05/word-image-5681.png 777w, /wp-content/uploads/2018/05/word-image-5681-300x200.png 300w, /wp-content/uploads/2018/05/word-image-5681-768x512.png 768w" sizes="(max-width: 777px) 100vw, 777px" /></p>
<h1>三、Laravel目录结构分析</h1>
<h2>1、整体目录</h2>
<p><img loading="lazy" decoding="async" width="440" height="606" src="/wp-content/uploads/2018/05/word-image-5682.png" class="wp-image-6238" srcset="/wp-content/uploads/2018/05/word-image-5682.png 440w, /wp-content/uploads/2018/05/word-image-5682-218x300.png 218w" sizes="(max-width: 440px) 100vw, 440px" /></p>
<h2>2、app目录</h2>
<p><img loading="lazy" decoding="async" width="451" height="265" src="/wp-content/uploads/2018/05/word-image-5683.png" class="wp-image-6239" srcset="/wp-content/uploads/2018/05/word-image-5683.png 451w, /wp-content/uploads/2018/05/word-image-5683-300x176.png 300w" sizes="(max-width: 451px) 100vw, 451px" /></p>
<h2>3、Http目录</h2>
<p><img loading="lazy" decoding="async" width="551" height="493" src="/wp-content/uploads/2018/05/word-image-5684.png" class="wp-image-6240" srcset="/wp-content/uploads/2018/05/word-image-5684.png 551w, /wp-content/uploads/2018/05/word-image-5684-300x268.png 300w" sizes="(max-width: 551px) 100vw, 551px" /></p>
<h2>4、boostrap目录</h2>
<p><img loading="lazy" decoding="async" width="1004" height="489" src="/wp-content/uploads/2018/05/word-image-5685.png" class="wp-image-6241" srcset="/wp-content/uploads/2018/05/word-image-5685.png 1004w, /wp-content/uploads/2018/05/word-image-5685-300x146.png 300w, /wp-content/uploads/2018/05/word-image-5685-768x374.png 768w" sizes="(max-width: 1004px) 100vw, 1004px" /></p>
<h2>5、config目录</h2>
<p><img loading="lazy" decoding="async" width="432" height="452" src="/wp-content/uploads/2018/05/word-image-5686.png" class="wp-image-6242" srcset="/wp-content/uploads/2018/05/word-image-5686.png 432w, /wp-content/uploads/2018/05/word-image-5686-287x300.png 287w" sizes="(max-width: 432px) 100vw, 432px" /></p>
<h2>6、database目录</h2>
<p><img loading="lazy" decoding="async" width="403" height="276" src="/wp-content/uploads/2018/05/word-image-5687.png" class="wp-image-6243" srcset="/wp-content/uploads/2018/05/word-image-5687.png 403w, /wp-content/uploads/2018/05/word-image-5687-300x205.png 300w, /wp-content/uploads/2018/05/word-image-5687-220x150.png 220w" sizes="(max-width: 403px) 100vw, 403px" /></p>
<h2>7、public目录</h2>
<p><img loading="lazy" decoding="async" width="438" height="469" src="/wp-content/uploads/2018/05/word-image-5688.png" class="wp-image-6244" srcset="/wp-content/uploads/2018/05/word-image-5688.png 438w, /wp-content/uploads/2018/05/word-image-5688-280x300.png 280w" sizes="(max-width: 438px) 100vw, 438px" /></p>
<p>
  为什么public下比tp32安全
</p>
<p>
  为什么tp32每个目录下都要新建index.html文件
</p>
<h2>8、resource目录</h2>
<p><img loading="lazy" decoding="async" width="496" height="498" src="/wp-content/uploads/2018/05/word-image-5689.png" class="wp-image-6245" srcset="/wp-content/uploads/2018/05/word-image-5689.png 496w, /wp-content/uploads/2018/05/word-image-5689-150x150.png 150w, /wp-content/uploads/2018/05/word-image-5689-300x300.png 300w" sizes="(max-width: 496px) 100vw, 496px" /></p>
<h2>9、storage目录</h2>
<p><img loading="lazy" decoding="async" width="484" height="315" src="/wp-content/uploads/2018/05/word-image-5690.png" class="wp-image-6246" srcset="/wp-content/uploads/2018/05/word-image-5690.png 484w, /wp-content/uploads/2018/05/word-image-5690-300x195.png 300w" sizes="(max-width: 484px) 100vw, 484px" /></p>
<h2>10、vendor目录</h2>
<p><img loading="lazy" decoding="async" width="518" height="510" src="/wp-content/uploads/2018/05/word-image-5691.png" class="wp-image-6247" srcset="/wp-content/uploads/2018/05/word-image-5691.png 518w, /wp-content/uploads/2018/05/word-image-5691-300x295.png 300w" sizes="(max-width: 518px) 100vw, 518px" /></p>
<h2>11、.env文件</h2>
<p><img loading="lazy" decoding="async" width="992" height="643" src="/wp-content/uploads/2018/05/word-image-5692.png" class="wp-image-6248" srcset="/wp-content/uploads/2018/05/word-image-5692.png 992w, /wp-content/uploads/2018/05/word-image-5692-300x194.png 300w, /wp-content/uploads/2018/05/word-image-5692-768x498.png 768w" sizes="(max-width: 992px) 100vw, 992px" /></p>
<h1>︴思考：通过框架完成下属功能需要哪些知识点？</h1>
<h2>1、留言列表显示</h2>
<p><img loading="lazy" decoding="async" width="397" height="436" src="/wp-content/uploads/2018/05/word-image-5693.png" class="wp-image-6249" srcset="/wp-content/uploads/2018/05/word-image-5693.png 397w, /wp-content/uploads/2018/05/word-image-5693-273x300.png 273w" sizes="(max-width: 397px) 100vw, 397px" /></p>
<p>
  【展示视图】
</p>
<p>
  如何创建路由
</p>
<p>
  如何创建控制器
</p>
<p>
  如何创建视图
</p>
<p>
  【循环显示数据】
</p>
<p>
  控制器如何操作数据库
</p>
<p>
  视图如何循环
</p>
<h2>添加留言</h2>
<p><img loading="lazy" decoding="async" width="386" height="315" src="/wp-content/uploads/2018/05/word-image-5694.png" class="wp-image-6250" srcset="/wp-content/uploads/2018/05/word-image-5694.png 386w, /wp-content/uploads/2018/05/word-image-5694-300x245.png 300w" sizes="(max-width: 386px) 100vw, 386px" /></p>
<p>
  【页面显示】如何创建路由 -&gt; 如何创建控制器 -&gt; 如何创建添加表单视图
</p>
<p>
  【数据处理】如何接口提交的数据，如何保存到数据库
</p>
<h2>总结（新框架快速上手原则）</h2>
<p>
  如何创建路由
</p>
<p>
  如何创建控制器
</p>
<p>
  如何创建视图
</p>
<h1>四、Laravel框架中的控制器</h1>
<h2>1、控制器的存放目录</h2>
<p>
  app\Http\Controllers\平台名\控制器名Controller.php
</p>
<h2>控制器的命名规则</h2>
<p>
  规    则：大驼峰命名法（单词首字母大写）
</p>
<p>
  举个栗子：UserController.php 或 GoodsController.php
</p>
<h2>3、创建控制器</h2>
<h3>方法1：artisan命令创建 （使用代码生成器创建控制器）</h3>
<p>
  命令：php artisan make:controller 平台名\控制器名Controller
</p>
<p>
  说明：必须在项目根目录下执行，因为artisan在根目录下
</p>
<p><img loading="lazy" decoding="async" width="1129" height="659" src="/wp-content/uploads/2018/05/word-image-5695.png" class="wp-image-6251" srcset="/wp-content/uploads/2018/05/word-image-5695.png 1129w, /wp-content/uploads/2018/05/word-image-5695-300x175.png 300w, /wp-content/uploads/2018/05/word-image-5695-768x448.png 768w, /wp-content/uploads/2018/05/word-image-5695-1024x598.png 1024w" sizes="(max-width: 1129px) 100vw, 1129px" /></p>
<h3>方法2：手动创建</h3>
<p>
  直接复制已经创建的控制器即可
</p>
<p><img loading="lazy" decoding="async" width="875" height="378" src="/wp-content/uploads/2018/05/word-image-5696.png" class="wp-image-6252" srcset="/wp-content/uploads/2018/05/word-image-5696.png 875w, /wp-content/uploads/2018/05/word-image-5696-300x130.png 300w, /wp-content/uploads/2018/05/word-image-5696-768x332.png 768w" sizes="(max-width: 875px) 100vw, 875px" /></p>
<h1>路由1</h1>
<h2>准备：PHP闭包</h2>
<h3>1）JS闭包</h3>
<ul>
<li>
    概念：在JS中当一个函数执行时可以让其内部局部变量不受其他作用域影响，同
  </li>
</ul>
<p>
  时当前函数执行完毕后还可能让其内部变量常驻内存不销毁的运行机制被称为JavaScript的闭包。
</p>
<ul>
<li>
    定义：两个函数彼此嵌套，并返回内部函数
  </li>
</ul>
<p>
  function f1() {
</p>
<p>
  function f2() {
</p>
<p>
  }
</p>
<p>
  return f2;
</p>
<p>
  }
</p>
<p>
  &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;
</p>
<p>
  &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;
</p>
<p>
  var arr = new Array();
</p>
<p>
  for (var i = 1; i &lt; 3; i++) {
</p>
</p>
<p>
  	//arr[i] = function(i) {
</p>
<p>
  	//	alert(i);
</p>
<p>
  	//}
</p>
<p>
  	arr[i] = f1(i);
</p>
<p>
  }
</p>
<p>
  function f1(num) {
</p>
<p>
  	function f2() {
</p>
<p>
  		alert(num);
</p>
<p>
  	}
</p>
<p>
  	return f2;
</p>
<p>
  }
</p>
<h3>PHP闭包函数（php5.3+）</h3>
<p><img loading="lazy" decoding="async" width="747" height="175" src="/wp-content/uploads/2018/05/word-image-5697.png" class="wp-image-6253" srcset="/wp-content/uploads/2018/05/word-image-5697.png 747w, /wp-content/uploads/2018/05/word-image-5697-300x70.png 300w" sizes="(max-width: 747px) 100vw, 747px" /><br />
<img loading="lazy" decoding="async" width="958" height="471" src="/wp-content/uploads/2018/05/word-image-5698.png" class="wp-image-6254" srcset="/wp-content/uploads/2018/05/word-image-5698.png 958w, /wp-content/uploads/2018/05/word-image-5698-300x147.png 300w, /wp-content/uploads/2018/05/word-image-5698-768x378.png 768w" sizes="(max-width: 958px) 100vw, 958px" /></p>
<h2>1、路由的作用</h2>
<ul>
<li>
    概念：路由就是网址的参数
  </li>
<li>
    作用：将用户发送的HTTP请求，交给指定的控制器方法处理
  </li>
</ul>
<h2>2、路由配置文件</h2>
<p><img loading="lazy" decoding="async" width="886" height="387" src="/wp-content/uploads/2018/05/word-image-5699.png" class="wp-image-6255" srcset="/wp-content/uploads/2018/05/word-image-5699.png 886w, /wp-content/uploads/2018/05/word-image-5699-300x131.png 300w, /wp-content/uploads/2018/05/word-image-5699-768x335.png 768w" sizes="(max-width: 886px) 100vw, 886px" /></p>
<h2><a id="post-6202-_Toc487903151"></a>3、配置路由（routes\web.php）</h2>
<h3><a id="post-6202-_Toc487903152"></a>1、路由定义格式（语法）</h3>
<p>
  Route::HTTP请求方法（路径，闭包函数或者控制器方法）
</p>
<p>
  响应多个HTTP请求
</p>
<p>
  Route::match（[请求类型，请求类型&#8230;.], 路径，闭包函数或者控制器方法）
</p>
<p>
  响应任意HTTP请求
</p>
<p>
  Route::any（路径，闭包函数或者控制器方法）
</p>
<h3><a id="post-6202-_Toc487903153"></a>2、请求方式有哪些？</h3>
<p>
  可以是HTTP的8种请求类型之一，如：get、put、post、delete&#8230;等，常用get和post
</p>
<h3>︴练习</h3>
<ul>
<li>
    不同的请求响应
  </li>
<li>
    get请求，闭包函数响应
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1212" height="610" src="/wp-content/uploads/2018/05/word-image-5700.png" class="wp-image-6256" srcset="/wp-content/uploads/2018/05/word-image-5700.png 1212w, /wp-content/uploads/2018/05/word-image-5700-300x151.png 300w, /wp-content/uploads/2018/05/word-image-5700-768x387.png 768w, /wp-content/uploads/2018/05/word-image-5700-1024x515.png 1024w" sizes="(max-width: 1212px) 100vw, 1212px" /></p>
<ul>
<li>
    get请求，控制器响应
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1335" height="635" src="/wp-content/uploads/2018/05/word-image-5701.png" class="wp-image-6257" srcset="/wp-content/uploads/2018/05/word-image-5701.png 1335w, /wp-content/uploads/2018/05/word-image-5701-300x143.png 300w, /wp-content/uploads/2018/05/word-image-5701-768x365.png 768w, /wp-content/uploads/2018/05/word-image-5701-1024x487.png 1024w" sizes="(max-width: 1335px) 100vw, 1335px" /></p>
<ul>
<li>
    post请求，闭包函数响应（注：app\Http\Kernel.php注释VerifyCsrfToken）
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1087" height="672" src="/wp-content/uploads/2018/05/word-image-5702.png" class="wp-image-6258" srcset="/wp-content/uploads/2018/05/word-image-5702.png 1087w, /wp-content/uploads/2018/05/word-image-5702-300x185.png 300w, /wp-content/uploads/2018/05/word-image-5702-768x475.png 768w, /wp-content/uploads/2018/05/word-image-5702-1024x633.png 1024w" sizes="(max-width: 1087px) 100vw, 1087px" /><br />
<img loading="lazy" decoding="async" width="1251" height="510" src="/wp-content/uploads/2018/05/word-image-5703.png" class="wp-image-6259" srcset="/wp-content/uploads/2018/05/word-image-5703.png 1251w, /wp-content/uploads/2018/05/word-image-5703-300x122.png 300w, /wp-content/uploads/2018/05/word-image-5703-768x313.png 768w, /wp-content/uploads/2018/05/word-image-5703-1024x417.png 1024w" sizes="(max-width: 1251px) 100vw, 1251px" /></p>
<ul>
<li>
    post请求，控制器响应
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1334" height="659" src="/wp-content/uploads/2018/05/word-image-5704.png" class="wp-image-6260" srcset="/wp-content/uploads/2018/05/word-image-5704.png 1334w, /wp-content/uploads/2018/05/word-image-5704-300x148.png 300w, /wp-content/uploads/2018/05/word-image-5704-768x379.png 768w, /wp-content/uploads/2018/05/word-image-5704-1024x506.png 1024w" sizes="(max-width: 1334px) 100vw, 1334px" /></p>
<ul>
<li>
    响应<strong>多个</strong>HTTP请求
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="622" height="159" src="/wp-content/uploads/2018/05/word-image-5705.png" class="wp-image-6261" srcset="/wp-content/uploads/2018/05/word-image-5705.png 622w, /wp-content/uploads/2018/05/word-image-5705-300x77.png 300w" sizes="(max-width: 622px) 100vw, 622px" /></p>
<ul>
<li>
    响应<strong>所有</strong>HTTP请求
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="477" height="176" src="/wp-content/uploads/2018/05/word-image-5706.png" class="wp-image-6262" srcset="/wp-content/uploads/2018/05/word-image-5706.png 477w, /wp-content/uploads/2018/05/word-image-5706-300x111.png 300w" sizes="(max-width: 477px) 100vw, 477px" /></p>
<h2>4、路由参数</h2>
<h3>1）语法</h3>
<p>
  Route::HTTP请求方式（路径/{参数}，闭包函数或控制器方法名）-&gt;where（参数名,正则表达式）
</p>
<p>
  多个参数： 路径/{参数}/{参数}   或者   路径/{参数}-{参数}/{参数}
</p>
<p>
  多个限制：-&gt;where（[参数=&gt;正则，&#8230;，参数n-&gt;正则n]）
</p>
<p>
  多学一招：{参数名？} 表示可以设置默认值
</p>
<h3>2）闭包函数操作参数</h3>
<ul>
<li>
    一个参数
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="663" height="213" src="/wp-content/uploads/2018/05/word-image-5707.png" class="wp-image-6263" srcset="/wp-content/uploads/2018/05/word-image-5707.png 663w, /wp-content/uploads/2018/05/word-image-5707-300x96.png 300w" sizes="(max-width: 663px) 100vw, 663px" /></p>
<p>
  #一个参数
</p>
<p>
  Route::get(&#8216;/test7/{id}&#8217;, function($id){
</p>
<p>
      echo $id;
</p>
<p>
  });
</p>
<ul>
<li>
    多个参数
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="793" height="236" src="/wp-content/uploads/2018/05/word-image-5708.png" class="wp-image-6264" srcset="/wp-content/uploads/2018/05/word-image-5708.png 793w, /wp-content/uploads/2018/05/word-image-5708-300x89.png 300w, /wp-content/uploads/2018/05/word-image-5708-768x229.png 768w" sizes="(max-width: 793px) 100vw, 793px" /></p>
<p>
  #多个参数
</p>
<p>
  Route::get(&#8216;/test7/{id}/{name}&#8217;, function($id, $name){
</p>
<p>
      echo $id . &#8216;__&#8217; . $name;
</p>
<p>
  });
</p>
<ul>
<li>
    默认参数
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="802" height="332" src="/wp-content/uploads/2018/05/word-image-5709.png" class="wp-image-6265" srcset="/wp-content/uploads/2018/05/word-image-5709.png 802w, /wp-content/uploads/2018/05/word-image-5709-300x124.png 300w, /wp-content/uploads/2018/05/word-image-5709-768x318.png 768w" sizes="(max-width: 802px) 100vw, 802px" /></p>
<h3>3）控制器操作参数</h3>
<p><img loading="lazy" decoding="async" width="814" height="541" src="/wp-content/uploads/2018/05/word-image-5710.png" class="wp-image-6266" srcset="/wp-content/uploads/2018/05/word-image-5710.png 814w, /wp-content/uploads/2018/05/word-image-5710-300x199.png 300w, /wp-content/uploads/2018/05/word-image-5710-768x510.png 768w" sizes="(max-width: 814px) 100vw, 814px" /><br />
<img loading="lazy" decoding="async" width="1120" height="527" src="/wp-content/uploads/2018/05/word-image-5711.png" class="wp-image-6267" srcset="/wp-content/uploads/2018/05/word-image-5711.png 1120w, /wp-content/uploads/2018/05/word-image-5711-300x141.png 300w, /wp-content/uploads/2018/05/word-image-5711-768x361.png 768w, /wp-content/uploads/2018/05/word-image-5711-1024x482.png 1024w" sizes="(max-width: 1120px) 100vw, 1120px" /></p>
<h3>4）正则表达式限制参数</h3>
<ul>
<li>
    限制一个参数
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="544" height="152" src="/wp-content/uploads/2018/05/word-image-5712.png" class="wp-image-6268" srcset="/wp-content/uploads/2018/05/word-image-5712.png 544w, /wp-content/uploads/2018/05/word-image-5712-300x84.png 300w" sizes="(max-width: 544px) 100vw, 544px" /></p>
<ul>
<li>
    限制多个参数
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="751" height="252" src="/wp-content/uploads/2018/05/word-image-5713.png" class="wp-image-6269" srcset="/wp-content/uploads/2018/05/word-image-5713.png 751w, /wp-content/uploads/2018/05/word-image-5713-300x101.png 300w" sizes="(max-width: 751px) 100vw, 751px" /></p>
<h2>5、路由群组</h2>
<h3>1）概念</h3>
<p>
  多个路由之间共享路由属性，减少冗余。
</p>
<h3>语法</h3>
<p>
  Route::group（[属性名=&gt;属性值n,&#8230;,属性名=&gt;属性值n]，function（）{
</p>
<p>
       将其他路由放进来即可&#8230;.
</p>
<p>
  }）
</p>
<h3>3）案例</h3>
<p><img loading="lazy" decoding="async" width="1154" height="640" src="/wp-content/uploads/2018/05/word-image-5714.png" class="wp-image-6270" srcset="/wp-content/uploads/2018/05/word-image-5714.png 1154w, /wp-content/uploads/2018/05/word-image-5714-300x166.png 300w, /wp-content/uploads/2018/05/word-image-5714-768x426.png 768w, /wp-content/uploads/2018/05/word-image-5714-1024x568.png 1024w" sizes="(max-width: 1154px) 100vw, 1154px" /></p>
<p>
  #路由群组举个栗子（需求：完成用户增删改查）
</p>
<p>
  Route::group([&#8216;namespace&#8217;=&gt;&#8217;Admin&#8217;, &#8216;prefix&#8217; =&gt; &#8216;/user&#8217;], function(){
</p>
<p>
      #Route::get(&#8216;/user/index&#8217;, &#8216;Admin\UserController@index&#8217;);
</p>
<p>
      #Route::get(&#8216;/user/create&#8217;, &#8216;Admin\UserController@create&#8217;);
</p>
<p>
      #Route::get(&#8216;/user/delete/{id}&#8217;, &#8216;Admin\UserController@delete&#8217;);
</p>
<p>
      #Route::get(&#8216;/user/update&#8217;, &#8216;Admin\UserController@update&#8217;);
</p>
<p>
      Route::get(&#8216;index&#8217;, &#8216;UserController@index&#8217;);
</p>
<p>
      Route::get(&#8216;create&#8217;, &#8216;UserController@create&#8217;);
</p>
<p>
      Route::get(&#8216;delete/{id}&#8217;, &#8216;UserController@delete&#8217;);
</p>
<p>
      Route::get(&#8216;update&#8217;, &#8216;UserController@update&#8217;);
</p>
<p>
  });
</p>
<h2>6、路由别名</h2>
<p><img loading="lazy" decoding="async" width="863" height="621" src="/wp-content/uploads/2018/05/word-image-5715.png" class="wp-image-6271" srcset="/wp-content/uploads/2018/05/word-image-5715.png 863w, /wp-content/uploads/2018/05/word-image-5715-300x216.png 300w, /wp-content/uploads/2018/05/word-image-5715-768x553.png 768w" sizes="(max-width: 863px) 100vw, 863px" /></p>
<p>
  #路由别名：同MySQL需要别名因为名字太长或者不好记等情况
</p>
<p>
  //Route::get(&#8216;/jintainwofeichangkaixinsdfadsf&#8217;, function() {
</p>
<p>
  //    echo &#8216;test11&#8217;;
</p>
<p>
  //});
</p>
<p>
  Route::get(&#8216;/jintainwofeichangkaixinsdfadsf&#8217;, [
</p>
<p>
      &#8216;as&#8217; =&gt; &#8216;bieming&#8217;,
</p>
<p>
      &#8216;uses&#8217; =&gt; function() {
</p>
<p>
          echo &#8216;我们都不容易&#8217;;
</p>
<p>
      }
</p>
<p>
  ]);
</p>
<p>
  Route::get(&#8216;/test11&#8217;, function() {
</p>
<p>
  //    {{ U（&#8217;user/index&#8217;） }}
</p>
<p>
  //    {{ url(‘/jintainwofeichangkaixinsdfadsf’) }}
</p>
<p>
      echo route(&#8216;bieming&#8217;); //通过路由别名替换url方法，放到表单action属性中
</p>
<p>
  });
</p>
<h2>小总结</h2>
<ul>
<li>
    什么是路由：就是网址
  </li>
<li>
    路由作用：将用户的请求交给指定的控制器方法处理
  </li>
<li>
    路由在哪：routes\web.php
  </li>
<li>
    路由语法
  </li>
<li>
    基        本：Route::HTTP类型（路径，闭包函数或控制器方法）
  </li>
<li>
    响应指定请求：Route::match（[类型，..，类型]，路径，闭包函数或控制器方法）
  </li>
<li>
    响应多有请求：Route::any（路径，闭包函数或控制器方法）
  </li>
<li>
    路由参数语法
  </li>
<li>
    Route::HTTP类型（路径/{参数}，闭包函数或控制器方法）-&gt;where（参数，正则）
  </li>
</ul>
<p>
  多个参数：就是写多个{}
</p>
<p>
  多个限制：则where使用数组 [参数=&gt;正则, &#8230;, 参数n=&gt;正则n]
</p>
<ul>
<li>
    路由群组
  </li>
<li>
    概念：就是给多个路由设置相同的属性，减少冗余
  </li>
<li>
    语法
  </li>
</ul>
<p>
  Route::group（[&#8216;namespace&#8217; =&gt; &#8221;, &#8216;preifx&#8217;=&gt;&#8221;]， function（）{
</p>
<p>
       写其他路由&#8230;
</p>
<p>
  }）
</p>
<ul>
<li>
    路由别名
  </li>
<li>
    概念：就是路由名称太长，则写个别名，后期可以通过方法route获取别名的真实
  </li>
</ul>
<p>
  路由地址
</p>
<ul>
<li>
    语法
  </li>
</ul>
<p>
  Route::请求类型（路径，[
</p>
<p>
      ‘as’ =&gt; 别名,
</p>
<p>
      ‘uses’ =&gt;  闭包函数 或者 控制器方法
</p>
<p>
  ]）
</p>
<h1>视图1</h1>
<h2>控制器调用视图</h2>
<h3>1）语法</h3>
<ul>
<li>
    方法1：return‘字符串’
  </li>
<li>
    方法2：return view（视图文件，compact（变量名，&#8230;，变量名n））；
  </li>
</ul>
<p>
  return view加载视图会去resources/views下面找（ps. view所有名称统一小写）
</p>
<p>
  return view（&#8217;php12&#8217;）会优先找blade模板引擎
</p>
<p>
  如果需要调用resources/views/子目录中的文件则用“.”拼接
</p>
<h3>2）练习（调用视图）</h3>
<p>
  步骤1：
</p>
<p><img loading="lazy" decoding="async" width="1045" height="409" src="/wp-content/uploads/2018/05/word-image-5716.png" class="wp-image-6272" srcset="/wp-content/uploads/2018/05/word-image-5716.png 1045w, /wp-content/uploads/2018/05/word-image-5716-300x117.png 300w, /wp-content/uploads/2018/05/word-image-5716-768x301.png 768w, /wp-content/uploads/2018/05/word-image-5716-1024x401.png 1024w" sizes="(max-width: 1045px) 100vw, 1045px" /></p>
<p>
  步骤2：
</p>
<p><img loading="lazy" decoding="async" width="1048" height="656" src="/wp-content/uploads/2018/05/word-image-5717.png" class="wp-image-6273" srcset="/wp-content/uploads/2018/05/word-image-5717.png 1048w, /wp-content/uploads/2018/05/word-image-5717-300x188.png 300w, /wp-content/uploads/2018/05/word-image-5717-768x481.png 768w, /wp-content/uploads/2018/05/word-image-5717-1024x641.png 1024w" sizes="(max-width: 1048px) 100vw, 1048px" /><br />
<img loading="lazy" decoding="async" width="1255" height="534" src="/wp-content/uploads/2018/05/word-image-5718.png" class="wp-image-6274" srcset="/wp-content/uploads/2018/05/word-image-5718.png 1255w, /wp-content/uploads/2018/05/word-image-5718-300x128.png 300w, /wp-content/uploads/2018/05/word-image-5718-768x327.png 768w, /wp-content/uploads/2018/05/word-image-5718-1024x436.png 1024w" sizes="(max-width: 1255px) 100vw, 1255px" /></p>
<h2><a id="post-6202-_Toc487903182"></a>基本用法视图传参</h2>
<h3>认识compact函数</h3>
<ul>
<li>
    语法：compact（变量名，&#8230;.，变量名n）
  </li>
<li>
    作用：将多个变量组成数组
  </li>
<li>
    代码：
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="785" height="420" src="/wp-content/uploads/2018/05/word-image-5719.png" class="wp-image-6275" srcset="/wp-content/uploads/2018/05/word-image-5719.png 785w, /wp-content/uploads/2018/05/word-image-5719-300x161.png 300w, /wp-content/uploads/2018/05/word-image-5719-768x411.png 768w" sizes="(max-width: 785px) 100vw, 785px" /></p>
<p>
  &lt;?php
</p>
<p>
  $a = &#8216;h1&#8217;;
</p>
<p>
  $b = &#8216;h2&#8217;;
</p>
<p>
  $c = &#8216;hd&#8217;;
</p>
<p>
  $data = compact(&#8216;a&#8217;,&#8217;b&#8217;,&#8217;fasdfasd&#8217;);
</p>
<p>
  echo &#8216;&lt;pre&gt;&#8217;;
</p>
<p>
  print_r($data);
</p>
<h3>2）数组方式</h3>
<p><img loading="lazy" decoding="async" width="1316" height="707" src="/wp-content/uploads/2018/05/word-image-5720.png" class="wp-image-6276" srcset="/wp-content/uploads/2018/05/word-image-5720.png 1316w, /wp-content/uploads/2018/05/word-image-5720-300x161.png 300w, /wp-content/uploads/2018/05/word-image-5720-768x413.png 768w, /wp-content/uploads/2018/05/word-image-5720-1024x550.png 1024w" sizes="(max-width: 1316px) 100vw, 1316px" /></p>
<h3>3）工作常用</h3>
<p><img loading="lazy" decoding="async" width="1306" height="712" src="/wp-content/uploads/2018/05/word-image-5721.png" class="wp-image-6277" srcset="/wp-content/uploads/2018/05/word-image-5721.png 1306w, /wp-content/uploads/2018/05/word-image-5721-300x164.png 300w, /wp-content/uploads/2018/05/word-image-5721-768x419.png 768w, /wp-content/uploads/2018/05/word-image-5721-1024x558.png 1024w" sizes="(max-width: 1306px) 100vw, 1306px" /></p>
<h2><a id="post-6202-_Toc487903184"></a>4、【★】blade模板</h2>
<h3>1）什么是blade模板</h3>
<ul>
<li>
    blade模板同smarty模板一样都是PHP模板引擎
  </li>
<li>
    blade模板是laravel自带模板引擎（推荐使用也可以使用原声php）
  </li>
</ul>
<p>
  问：什么是模板引擎
</p>
<p>
  答：就是用PHP写的一个类
</p>
<p>
  问：是个类就是模板引擎吗
</p>
<p>
  答：非也，具备将php代码和html代码分离类称之为模板引擎
</p>
<h3>2）blade模板标签</h3>
<ul>
<li>
    注释（同Smarty注释响应时不含注释内容）
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="992" height="506" src="/wp-content/uploads/2018/05/word-image-5722.png" class="wp-image-6278" srcset="/wp-content/uploads/2018/05/word-image-5722.png 992w, /wp-content/uploads/2018/05/word-image-5722-300x153.png 300w, /wp-content/uploads/2018/05/word-image-5722-768x392.png 768w" sizes="(max-width: 992px) 100vw, 992px" /></p>
<ul>
<li>
    展示变量数据
  </li>
</ul>
<p>
  {{ $变量名 }}
</p>
<p><img loading="lazy" decoding="async" width="717" height="447" src="/wp-content/uploads/2018/05/word-image-5723.png" class="wp-image-6279" srcset="/wp-content/uploads/2018/05/word-image-5723.png 717w, /wp-content/uploads/2018/05/word-image-5723-300x187.png 300w" sizes="(max-width: 717px) 100vw, 717px" /></p>
<ul>
<li>
    循环
  </li>
</ul>
<p>
  @foreach（变量名 as  键=&gt;值）
</p>
<p>
  @endforeach
</p>
<p><img loading="lazy" decoding="async" width="701" height="427" src="/wp-content/uploads/2018/05/word-image-5724.png" class="wp-image-6280" srcset="/wp-content/uploads/2018/05/word-image-5724.png 701w, /wp-content/uploads/2018/05/word-image-5724-300x183.png 300w" sizes="(max-width: 701px) 100vw, 701px" /></p>
<ul>
<li>
    判断
  </li>
</ul>
<p>
  @if ()
</p>
<p>
  @else if ()
</p>
<p>
  @else
</p>
<p>
  @endif
</p>
<p><img loading="lazy" decoding="async" width="665" height="510" src="/wp-content/uploads/2018/05/word-image-5725.png" class="wp-image-6281" srcset="/wp-content/uploads/2018/05/word-image-5725.png 665w, /wp-content/uploads/2018/05/word-image-5725-300x230.png 300w" sizes="(max-width: 665px) 100vw, 665px" /></p>
<ul>
<li>
    指定原声PHP（少用）
  </li>
</ul>
<p>
  @php
</p>
<p>
  @endphp
</p>
<p><img loading="lazy" decoding="async" width="720" height="444" src="/wp-content/uploads/2018/05/word-image-5726.png" class="wp-image-6282" srcset="/wp-content/uploads/2018/05/word-image-5726.png 720w, /wp-content/uploads/2018/05/word-image-5726-300x185.png 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<h1>获取请求输入</h1>
<h2>1、语法</h2>
<h3>1）方法1</h3>
<ul>
<li>
    步骤1：导入类【use Illuminate\Http\Request;】
  </li>
<li>
    步骤2：在控制器方法中声明使用，如
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="470" height="65" src="/wp-content/uploads/2018/05/word-image-5727.png" class="wp-image-6283" srcset="/wp-content/uploads/2018/05/word-image-5727.png 470w, /wp-content/uploads/2018/05/word-image-5727-300x41.png 300w" sizes="(max-width: 470px) 100vw, 470px" /></p>
<ul>
<li>
    步骤3：最后使用下属语法获取数据
  </li>
<li>
    $request-&gt;all（）										获取所有数据
  </li>
<li>
    $request-&gt;input（键 [,默认值]）					获取GET数据
  </li>
<li>
    $request-&gt;only（[参数名1，&#8230;，参数名n]）    获取指定数据
  </li>
<li>
    $request-&gt;except（[参数名1，&#8230;，参数名n]）   获取指定数据外的所有数据
  </li>
<li>
    查看更多：<a href="http://laravelacademy.org/post/6750.html#toc_4">http://laravelacademy.org/post/6750.html#toc_4</a>
  </li>
</ul>
<h3>方法2</h3>
<ul>
<li>
    步骤1：导入类【Illuminate\Support\Facades\Input;】
  </li>
<li>
    步骤2：最后使用下属语法获取数据
  </li>
<li>
    Input::all（）										获取所有数据
  </li>
<li>
    Input::get（参数名[，默认值]）  				获取单个数据
  </li>
<li>
    Input::only（[键1，&#8230;，键n]）   				获取指定数据
  </li>
<li>
    Input::except（[键1，&#8230;，键n]） 				获取指定数据外的所有数据
  </li>
</ul>
<h2>2、练习</h2>
<p>
  步骤1：定义路由
</p>
<p><img loading="lazy" decoding="async" width="1156" height="361" src="/wp-content/uploads/2018/05/word-image-5728.png" class="wp-image-6284" srcset="/wp-content/uploads/2018/05/word-image-5728.png 1156w, /wp-content/uploads/2018/05/word-image-5728-300x94.png 300w, /wp-content/uploads/2018/05/word-image-5728-768x240.png 768w, /wp-content/uploads/2018/05/word-image-5728-1024x320.png 1024w" sizes="(max-width: 1156px) 100vw, 1156px" /></p>
<p>
  步骤2：创建控制器方法
</p>
<p><img loading="lazy" decoding="async" width="1319" height="536" src="/wp-content/uploads/2018/05/word-image-5729.png" class="wp-image-6285" srcset="/wp-content/uploads/2018/05/word-image-5729.png 1319w, /wp-content/uploads/2018/05/word-image-5729-300x122.png 300w, /wp-content/uploads/2018/05/word-image-5729-768x312.png 768w, /wp-content/uploads/2018/05/word-image-5729-1024x416.png 1024w" sizes="(max-width: 1319px) 100vw, 1319px" /></p>
<p>
  步骤3:创建视图
</p>
<p><img loading="lazy" decoding="async" width="1196" height="617" src="/wp-content/uploads/2018/05/word-image-5730.png" class="wp-image-6286" srcset="/wp-content/uploads/2018/05/word-image-5730.png 1196w, /wp-content/uploads/2018/05/word-image-5730-300x155.png 300w, /wp-content/uploads/2018/05/word-image-5730-768x396.png 768w, /wp-content/uploads/2018/05/word-image-5730-1024x528.png 1024w" sizes="(max-width: 1196px) 100vw, 1196px" /></p>
<h1>八、留言板功能</h1>
<h2>︴准备（数据库初体验，明天详细讲）</h2>
<ul>
<li>
    语法
  </li>
</ul>
<p>
  查询所有数据语法：DB::table（表名）-&gt;get（）
</p>
<p>
  插入数据语法：DB::table（表名）-&gt;insert（关联数组）
</p>
<ul>
<li>
    练习
  </li>
</ul>
<p>
  步骤1：创建数据库和留言表并插入数据
</p>
<p>
  create database laravel54;
</p>
<p>
  use laravel54;
</p>
<p>
  #标准写法
</p>
<p>
  &#8212; create table msg (
</p>
<p>
  &#8212; id int primary key auto_increment comment &#8216;编号&#8217;,
</p>
<p>
  &#8212; uname varchar(45) not null comment &#8216;用户名&#8217;,
</p>
<p>
  &#8212; content text not null comment &#8216;内容&#8217;,
</p>
<p>
  &#8212; created_at int not null default 0 comment &#8216;创建于&#8217;,
</p>
<p>
  &#8212; updated_at int not null default 0 comment &#8216;更新于&#8217;
</p>
<p>
  &#8212; )engine=myisam charset=utf8;
</p>
<p>
  #为铺垫后面课程修改
</p>
<p>
  create table msg (
</p>
<p>
  id int primary key auto_increment comment &#8216;编号&#8217;,
</p>
<p>
  uname varchar(45) comment &#8216;用户名&#8217;,
</p>
<p>
  content text comment &#8216;内容&#8217;,
</p>
<p>
  created_at int not null default 0 comment &#8216;创建于&#8217;,
</p>
<p>
  updated_at int not null default 0 comment &#8216;更新于&#8217;
</p>
<p>
  )engine=myisam charset=utf8;
</p>
<p>
  insert into msg values
</p>
<p>
  (null,&#8217;a&#8217;,&#8217;aaaa&#8217;,0,0),
</p>
<p>
  (null,&#8217;a&#8217;,&#8217;aaaa&#8217;,0,0),
</p>
<p>
  (null,&#8217;a&#8217;,&#8217;aaaa&#8217;,0,0);
</p>
<p>
  步骤2：修改laravel数据库配置文件
</p>
<p><img loading="lazy" decoding="async" width="678" height="509" src="/wp-content/uploads/2018/05/word-image-5731.png" class="wp-image-6287" srcset="/wp-content/uploads/2018/05/word-image-5731.png 678w, /wp-content/uploads/2018/05/word-image-5731-300x225.png 300w" sizes="(max-width: 678px) 100vw, 678px" /></p>
<h2>1、留言列表</h2>
<h3>1）思路</h3>
<ul>
<li>
    步骤1：定义路由访问列表页（Admin\MsgController@index）
  </li>
<li>
    步骤2：创建控制器MsgController和方法index 并且调用视图
  </li>
<li>
    步骤3：调用视图
  </li>
<li>
    步骤4：获取数据并循环显示
  </li>
</ul>
<h3>2）代码</h3>
<ul>
<li>
    步骤1：定义路由访问列表页（Admin\MsgController@index）
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1033" height="425" src="/wp-content/uploads/2018/05/word-image-5732.png" class="wp-image-6288" srcset="/wp-content/uploads/2018/05/word-image-5732.png 1033w, /wp-content/uploads/2018/05/word-image-5732-300x123.png 300w, /wp-content/uploads/2018/05/word-image-5732-768x316.png 768w, /wp-content/uploads/2018/05/word-image-5732-1024x421.png 1024w" sizes="(max-width: 1033px) 100vw, 1033px" /></p>
<ul>
<li>
    步骤2：创建控制器MsgController和方法index 并且调用视图
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1027" height="638" src="/wp-content/uploads/2018/05/word-image-5733.png" class="wp-image-6289" srcset="/wp-content/uploads/2018/05/word-image-5733.png 1027w, /wp-content/uploads/2018/05/word-image-5733-300x186.png 300w, /wp-content/uploads/2018/05/word-image-5733-768x477.png 768w, /wp-content/uploads/2018/05/word-image-5733-1024x636.png 1024w" sizes="(max-width: 1027px) 100vw, 1027px" /></p>
<ul>
<li>
    步骤3：调用视图
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1189" height="721" src="/wp-content/uploads/2018/05/word-image-5734.png" class="wp-image-6290" srcset="/wp-content/uploads/2018/05/word-image-5734.png 1189w, /wp-content/uploads/2018/05/word-image-5734-300x182.png 300w, /wp-content/uploads/2018/05/word-image-5734-768x466.png 768w, /wp-content/uploads/2018/05/word-image-5734-1024x621.png 1024w" sizes="(max-width: 1189px) 100vw, 1189px" /></p>
<ul>
<li>
    步骤4：获取数据并循环显示
  </li>
</ul>
<p>
  控制器
</p>
<p><img loading="lazy" decoding="async" width="1157" height="460" src="/wp-content/uploads/2018/05/word-image-5735.png" class="wp-image-6291" srcset="/wp-content/uploads/2018/05/word-image-5735.png 1157w, /wp-content/uploads/2018/05/word-image-5735-300x119.png 300w, /wp-content/uploads/2018/05/word-image-5735-768x305.png 768w, /wp-content/uploads/2018/05/word-image-5735-1024x407.png 1024w" sizes="(max-width: 1157px) 100vw, 1157px" /></p>
<p>
  视图
</p>
<p><img loading="lazy" decoding="async" width="1171" height="549" src="/wp-content/uploads/2018/05/word-image-5736.png" class="wp-image-6292" srcset="/wp-content/uploads/2018/05/word-image-5736.png 1171w, /wp-content/uploads/2018/05/word-image-5736-300x141.png 300w, /wp-content/uploads/2018/05/word-image-5736-768x360.png 768w, /wp-content/uploads/2018/05/word-image-5736-1024x480.png 1024w" sizes="(max-width: 1171px) 100vw, 1171px" /><br />
<img loading="lazy" decoding="async" width="1365" height="604" src="/wp-content/uploads/2018/05/word-image-5737.png" class="wp-image-6293" srcset="/wp-content/uploads/2018/05/word-image-5737.png 1365w, /wp-content/uploads/2018/05/word-image-5737-300x133.png 300w, /wp-content/uploads/2018/05/word-image-5737-768x340.png 768w, /wp-content/uploads/2018/05/word-image-5737-1024x453.png 1024w" sizes="(max-width: 1365px) 100vw, 1365px" /></p>
<h2>2、添加留言</h2>
<h3>1）思路</h3>
<ul>
<li>
    说 明：因为添加特殊（其和列表在同一个页面所以不需要重新加载视图）
  </li>
<li>
    步骤1：修改路由
  </li>
<li>
    步骤2：控制器接受数据，并添加到数据库
  </li>
</ul>
<h3>2）代码</h3>
<ul>
<li>
    步骤1：修改路由
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1050" height="396" src="/wp-content/uploads/2018/05/word-image-5738.png" class="wp-image-6294" srcset="/wp-content/uploads/2018/05/word-image-5738.png 1050w, /wp-content/uploads/2018/05/word-image-5738-300x113.png 300w, /wp-content/uploads/2018/05/word-image-5738-768x290.png 768w, /wp-content/uploads/2018/05/word-image-5738-1024x386.png 1024w" sizes="(max-width: 1050px) 100vw, 1050px" /></p>
<ul>
<li>
    步骤2：控制器接受数据，并添加到数据库
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1160" height="650" src="/wp-content/uploads/2018/05/word-image-5739.png" class="wp-image-6295" srcset="/wp-content/uploads/2018/05/word-image-5739.png 1160w, /wp-content/uploads/2018/05/word-image-5739-300x168.png 300w, /wp-content/uploads/2018/05/word-image-5739-768x430.png 768w, /wp-content/uploads/2018/05/word-image-5739-1024x574.png 1024w" sizes="(max-width: 1160px) 100vw, 1160px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6202.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Laravel框架（四）视图、会话、中间价、防翻墙、数据验证、多表查询、扩展：PHP use使用场景、钻石设计软件</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6079.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6079.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 16:03:50 +0000</pubDate>
				<category><![CDATA[Laravel]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[中间价]]></category>
		<category><![CDATA[会话]]></category>
		<category><![CDATA[多表查询]]></category>
		<category><![CDATA[扩展：PHP use使用场景]]></category>
		<category><![CDATA[数据验证]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[钻石设计软件]]></category>
		<category><![CDATA[防翻墙]]></category>
		<guid isPermaLink="false">/?p=6079</guid>

					<description><![CDATA[Laravel框架第4天 复习 composer：就是PHP的软件管家，帮助PHP下载项目所需组件（类），如： [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1><a id="post-6079-_Toc487903166"></a>Laravel框架第4天</h1>
<h1>复习</h1>
<p>
  composer：就是PHP的软件管家，帮助PHP下载项目所需组件（类），如：验证码类、上传文件类等等
</p>
<p>
  数据迁移：就是用PHP管理数据库
</p>
<p>
  创建迁移：php artisan make:migration 数据迁移名称
</p>
<p>
  创建迁移：php artisan make:migration create_表名_table  &#8211;create=表名
</p>
<p>
  创建迁移：php artisan make:migration update_表名_table  &#8211;table=表名
</p>
<p>
  运行迁移：php artisan migrate
</p>
<p>
  撤销迁移：php artisan migrate:rollback
</p>
<p>
  数据填充：就是用PHP快速插入测试数据
</p>
<p>
  创建填充：php artisan make:seeder 填充器名称
</p>
<p>
  运行填充：php artisan db:seed &#8211;class=填充器名称
</p>
<p>
  faker说明：就是PHP的一个库（类）
</p>
<p>
  faker作用：生成假数据
</p>
<h1><a id="post-6079-_Toc487990951"></a>一、视图2（页面布局） </h1>
<h2>1、说明</h2>
<p>
  一般在做网站的时候，我们会将网页中公共的部分提取出来，形成一个公共的布局文件（父模板，提取公共的区域），然后在让其他的页面继承该文件以获取公共的区域内容。同时在子页面我们可以定义好自己的内容，然后在公共的页面进行调用显示。
</p>
<p><img loading="lazy" decoding="async" width="1055" height="388" src="/wp-content/uploads/2018/05/word-image-5530.png" class="wp-image-6080" srcset="/wp-content/uploads/2018/05/word-image-5530.png 1055w, /wp-content/uploads/2018/05/word-image-5530-300x110.png 300w, /wp-content/uploads/2018/05/word-image-5530-768x282.png 768w, /wp-content/uploads/2018/05/word-image-5530-1024x377.png 1024w" sizes="(max-width: 1055px) 100vw, 1055px" /></p>
<h2>2、语法</h2>
<p>
  @yield(&#8216;标识&#8217;)  	 			父（公共区域）定义内容片段，子填充
</p>
<p>
  @extends(&#8216;标识&#8217;) 	 		子继承父（公共区域）
</p>
<p>
  @section(&#8216;标识&#8217;, &#8216;默认值&#8217;)   子填充父（公共区域）文字
</p>
<p>
  @section(&#8216;标识&#8217;) 				子填充父（公共区域）HTML代码
</p>
<p>
  存放子页面内容
</p>
<p>
  @endsection
</p>
<p>
  @include(&#8216;视图标识&#8217;, [&#8216;key&#8217; =&gt; &#8216;value变量值&#8217;]) 调取公共页面（一般多个子页面提取）
</p>
<h2>3、代码</h2>
<h3>resources\views\layouts\common.blade.php</h3>
<p>
  &lt;!DOCTYPE html&gt;
</p>
<p>
  &lt;html lang=&#8221;zh-CN&#8221;&gt;
</p>
<p>
  &lt;head&gt;
</p>
<p>
      &lt;meta charset=&#8221;utf-8&#8243;&gt;
</p>
<p>
      &lt;meta http-equiv=&#8221;X-UA-Compatible&#8221; content=&#8221;IE=edge&#8221;&gt;
</p>
<p>
      &lt;meta name=&#8221;viewport&#8221; content=&#8221;width=device-width, initial-scale=1&#8243;&gt;
</p>
<p>
      &lt;title&gt;laravel&lt;/title&gt;
</p>
<p>
      &lt;!&#8211; Bootstrap CSS 文件 &#8211;&gt;
</p>
<p>
      &lt;link rel=&#8221;stylesheet&#8221; href=&#8221;{{ asset(&#8216;asset/static&#8217;) }}/bootstrap/css/bootstrap.min.css&#8221;&gt;
</p>
<p><strong>    @yield(&#8216;css&#8217;)</strong>
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div class=&#8221;navbar navbar-default&#8221;&gt;
</p>
<p>
      &lt;div class=&#8221;container&#8221;&gt;
</p>
<p>
          &lt;div class=&#8221;navbar-header&#8221;&gt;
</p>
<p>
              &lt;a href=&#8221;/&#8221; class=&#8221;navbar-brand&#8221;&gt;首页&lt;/a&gt;
</p>
<p>
              &lt;button type=&#8221;button&#8221; class=&#8221;navbar-toggle collapsed&#8221; data-toggle=&#8221;collapse&#8221; data-target=&#8221;#menu&#8221; aria-expanded=&#8221;false&#8221;&gt;
</p>
<p>
                  &lt;span class=&#8221;sr-only&#8221;&gt;菜单折叠&lt;/span&gt;
</p>
<p>
                  &lt;span class=&#8221;icon-bar&#8221;&gt;&lt;/span&gt;
</p>
<p>
                  &lt;span class=&#8221;icon-bar&#8221;&gt;&lt;/span&gt;
</p>
<p>
                  &lt;span class=&#8221;icon-bar&#8221;&gt;&lt;/span&gt;
</p>
<p>
              &lt;/button&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;div class=&#8221;collapse navbar-collapse&#8221; id=&#8221;menu&#8221;&gt;
</p>
<p>
              &lt;ul class=&#8221;nav navbar-nav&#8221;&gt;
</p>
<p>
                  &lt;li class=&#8221;active&#8221;&gt;&lt;a href=&#8221;/&#8221;&gt;开发&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                  &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;列表&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                  &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;头条&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                  &lt;li class=&#8221;dropdown&#8221;&gt;
</p>
<p>
                      &lt;a href=&#8221;#&#8221; class=&#8221;dropdown-toggle&#8221; data-toggle=&#8221;dropdown&#8221;&gt;资讯 &lt;span class=&#8221;caret&#8221;&gt;&lt;/span&gt;&lt;/a&gt;
</p>
<p>
                      &lt;ul class=&#8221;dropdown-menu&#8221;&gt;
</p>
<p>
                          &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;学习一&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;学习二&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li class=&#8221;divider&#8221;&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;技术学习&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li class=&#8221;divider&#8221;&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;jq学习&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                      &lt;/ul&gt;
</p>
<p>
                  &lt;/li&gt;
</p>
<p>
              &lt;/ul&gt;
</p>
<p>
              &lt;form class=&#8221;navbar-form navbar-left&#8221;&gt;
</p>
<p>
                  &lt;div class=&#8221;form-group&#8221;&gt;
</p>
<p>
                      &lt;input type=&#8221;text&#8221; class=&#8221;form-control&#8221; placeholder=&#8221;Search&#8230;&#8221;&gt;
</p>
<p>
                  &lt;/div&gt;
</p>
<p>
                  &lt;button type=&#8221;submit&#8221; class=&#8221;btn btn-default&#8221;&gt;搜索&lt;/button&gt;
</p>
<p>
              &lt;/form&gt;
</p>
<p>
              &lt;ul class=&#8221;nav navbar-nav navbar-right&#8221;&gt;
</p>
<p>
                  &lt;li&gt;&lt;a href=&#8221;./login.html&#8221;&gt;登录&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                  &lt;li&gt;&lt;a href=&#8221;./register.html&#8221;&gt;注册&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                  &lt;li class=&#8221;dropdown&#8221;&gt;
</p>
<p>
                      &lt;a href=&#8221;#&#8221; class=&#8221;dropdown-toggle&#8221; data-toggle=&#8221;dropdown&#8221;&gt;相关&lt;span class=&#8221;caret&#8221;&gt;&lt;/span&gt;&lt;/a&gt;
</p>
<p>
                      &lt;ul class=&#8221;dropdown-menu&#8221;&gt;
</p>
<p>
                          &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;系列一&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li class=&#8221;divider&#8221;&gt;&lt;/li&gt;
</p>
<p>
                          &lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;系列二&lt;/a&gt;&lt;/li&gt;
</p>
<p>
                      &lt;/ul&gt;
</p>
<p>
                  &lt;/li&gt;
</p>
<p>
              &lt;/ul&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
  &lt;/div&gt;
</p>
<p>
  &lt;!&#8211; 头部 &#8211;&gt;
</p>
<p>
  &lt;div class=&#8221;jumbotron jump&#8221;&gt;
</p>
<p>
      &lt;div class=&#8221;container&#8221;&gt;
</p>
<p><strong>        &lt;h2&gt;@yield(&#8216;title&#8217;)&lt;/h2&gt;</strong>
</p>
<p>
          &lt;p&gt; 玩转- laravel&lt;/p&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
  &lt;/div&gt;
</p>
<p><strong>&lt;!&#8211; 中间内容区局 &#8211;&gt;</strong>
</p>
<p><strong>&lt;div class=&#8221;container&#8221;&gt;</strong>
</p>
<p><strong>    @yield(&#8216;main&#8217;)</strong>
</p>
<p><strong>&lt;/div&gt;</strong>
</p>
<p>
  &lt;!&#8211; 尾部 &#8211;&gt;
</p>
<p>
  &lt;div class=&#8221;jumbotron&#8221; style=&#8221;margin:0;&#8221;&gt;
</p>
<p>
      &lt;div class=&#8221;container&#8221;&gt;
</p>
<p>
          &lt;span&gt;  @2017 laravel&lt;/span&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
  &lt;/div&gt;
</p>
<p>
  &lt;!&#8211; jQuery 文件 &#8211;&gt;
</p>
<p>
  &lt;script src=&#8221;{{ asset(&#8216;asset/static&#8217;) }}/jquery/jquery.min.js&#8221;&gt;&lt;/script&gt;
</p>
<p>
  &lt;!&#8211; Bootstrap JavaScript 文件 &#8211;&gt;
</p>
<p>
  &lt;script src=&#8221;{{ asset(&#8216;asset/static&#8217;) }}/bootstrap/js/bootstrap.min.js&#8221;&gt;&lt;/script&gt;
</p>
<p>
  &lt;link href=&#8221;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert.min.css&#8221; rel=&#8221;stylesheet&#8221;&gt;
</p>
<p>
  &lt;script src=&#8221;https://cdn.bootcss.com/sweetalert/1.1.3/sweetalert-dev.js&#8221;&gt;&lt;/script&gt;
</p>
<p>
  &lt;script type=&#8221;text/javascript&#8221;&gt;
</p>
<p>
      @if (Session::has(&#8216;tips&#8217;))
</p>
<p>
      swal(&#8220;{{ Session::get(&#8216;tips&#8217;) }}！&#8221;, &#8220;操作提示！&#8221;,&#8221;{{ Session::get(&#8216;state&#8217;) }}&#8221;)
</p>
<p>
      @endif
</p>
<p>
  &lt;/script&gt;
</p>
<p>
  &lt;/body&gt;
</p>
<p>
  &lt;/html&gt;
</p>
<h3>resources\views\layouts\form.blade.php</h3>
<p>
  &lt;form  action=&#8221;{{ url(&#8216;student/add&#8217;) }}&#8221; class=&#8221;form-horizontal&#8221; method=&#8221;post&#8221;&gt;
</p>
<p>
      {{ csrf_field() }}
</p>
<p>
      &lt;div class=&#8221;form-group&#8221;&gt;
</p>
<p>
          &lt;label for=&#8221;name&#8221; class=&#8221;col-sm-2 control-label&#8221;&gt;姓名&lt;/label&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;input type=&#8221;text&#8221; name=&#8221;uname&#8221; class=&#8221;form-control&#8221; id=&#8221;name&#8221; placeholder=&#8221;请输入学生姓名&#8221;&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;p class=&#8221;form-control-static text-danger&#8221;&gt;姓名不能为空&lt;/p&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;div class=&#8221;form-group&#8221;&gt;
</p>
<p>
          &lt;label for=&#8221;age&#8221; class=&#8221;col-sm-2 control-label&#8221;&gt;密码&lt;/label&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;input type=&#8221;text&#8221; name=&#8221;pwd&#8221; class=&#8221;form-control&#8221; id=&#8221;age&#8221; placeholder=&#8221;请输入学生年龄&#8221;&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;p class=&#8221;form-control-static text-danger&#8221;&gt;密码不能为空&lt;/p&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;div class=&#8221;form-group&#8221;&gt;
</p>
<p>
          &lt;label for=&#8221;age&#8221; class=&#8221;col-sm-2 control-label&#8221;&gt;年龄&lt;/label&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;input type=&#8221;text&#8221; name=&#8221;age&#8221; class=&#8221;form-control&#8221; id=&#8221;age&#8221; placeholder=&#8221;请输入学生年龄&#8221;&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;p class=&#8221;form-control-static text-danger&#8221;&gt;年龄只能为整数&lt;/p&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;div class=&#8221;form-group&#8221;&gt;
</p>
<p>
          &lt;label class=&#8221;col-sm-2 control-label&#8221;&gt;性别&lt;/label&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;label class=&#8221;radio-inline&#8221;&gt;
</p>
<p>
                  &lt;input type=&#8221;radio&#8221; name=&#8221;sex&#8221; value=&#8221;1&#8243;&gt; 男
</p>
<p>
              &lt;/label&gt;
</p>
<p>
              &lt;label class=&#8221;radio-inline&#8221;&gt;
</p>
<p>
                  &lt;input type=&#8221;radio&#8221; name=&#8221;sex&#8221; value=&#8221;2&#8243;&gt; 女
</p>
<p>
              &lt;/label&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-5&#8243;&gt;
</p>
<p>
              &lt;p class=&#8221;form-control-static text-danger&#8221;&gt;请选择性别&lt;/p&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;div class=&#8221;form-group&#8221;&gt;
</p>
<p>
          &lt;div class=&#8221;col-sm-offset-2 col-sm-10&#8243;&gt;
</p>
<p>
              &lt;button type=&#8221;submit&#8221; class=&#8221;btn btn-primary&#8221;&gt;提交&lt;/button&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
  &lt;/form&gt;
</p>
<h3>resources\views\student\add.blade.php</h3>
<p>
  @extends(&#8216;student.layout.common&#8217;)
</p>
<p>
  @section(&#8216;title&#8217;, &#8216;添加&#8217;)
</p>
<p>
  @section(&#8216;css&#8217;)
</p>
<p>
      &lt;link rel=&#8221;stylesheet&#8221; href=&#8221;{{ asset(&#8216;asset/static&#8217;) }}/bootstrap/css/form.css&#8221;&gt;
</p>
<p>
  @endsection
</p>
<p><strong>@section(&#8216;main&#8217;)</strong>
</p>
<p>
      &lt;div class=&#8221;row&#8221;&gt;
</p>
<p>
          &lt;!&#8211; 左侧菜单区域   &#8211;&gt;
</p>
<p>
          &lt;div class=&#8221;col-md-3&#8243;&gt;
</p>
<p>
              &lt;div class=&#8221;list-group&#8221;&gt;
</p>
<p>
                  &lt;a href=&#8221;./index.html&#8221; class=&#8221;list-group-item &#8220;&gt;学生列表&lt;/a&gt;
</p>
<p>
                  &lt;a href=&#8221;./form.html&#8221; class=&#8221;list-group-item active&#8221;&gt;新增学生&lt;/a&gt;
</p>
<p>
              &lt;/div&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;!&#8211; 右侧内容区域 &#8211;&gt;
</p>
<p>
          &lt;div class=&#8221;col-md-9&#8243;&gt;
</p>
<p>
              &lt;!&#8211; 所有的错误提示 &#8211;&gt;
</p>
<p>
              &lt;div class=&#8221;alert alert-danger&#8221;&gt;
</p>
<p>
                  &lt;ul&gt;
</p>
<p>
                      &lt;li&gt;姓名不能为空&lt;/li&gt;
</p>
<p>
                      &lt;li&gt;年龄只能为整数&lt;/li&gt;
</p>
<p>
                      &lt;li&gt;请选择性别&lt;/li&gt;
</p>
<p>
                  &lt;/ul&gt;
</p>
<p>
              &lt;/div&gt;
</p>
<p>
              &lt;!&#8211; 自定义内容区域 &#8211;&gt;
</p>
<p>
              &lt;div class=&#8221;panel panel-default&#8221;&gt;
</p>
<p>
                  &lt;div class=&#8221;panel-heading&#8221;&gt;新增学生&lt;/div&gt;
</p>
<p>
                  &lt;div class=&#8221;panel-body&#8221;&gt;
</p>
<p>
                      @include(&#8216;student.layout.form&#8217;)
</p>
<p>
                  &lt;/div&gt;
</p>
<p>
              &lt;/div&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p><strong>@endsection</strong>
</p>
<h3>resources\views\student\index.blade.php</h3>
<p>
  @extends(&#8216;student.layout.common&#8217;)
</p>
<p>
  @section(&#8216;title&#8217;, &#8216;首页&#8217;)
</p>
<p>
  @section(&#8216;css&#8217;)
</p>
<p>
      &lt;link rel=&#8221;stylesheet&#8221; href=&#8221;{{ asset(&#8216;asset/static&#8217;) }}/bootstrap/css/index.css&#8221;&gt;
</p>
<p>
  @endsection
</p>
<p>
  @section(&#8216;main&#8217;)
</p>
<p>
      &lt;div class=&#8221;row&#8221;&gt;
</p>
<p>
          &lt;!&#8211; 左侧菜单区域   &#8211;&gt;
</p>
<p>
          &lt;div class=&#8221;col-md-3&#8243;&gt;
</p>
<p>
              &lt;div class=&#8221;list-group&#8221;&gt;
</p>
<p>
                  &lt;a href=&#8221;index.blade.php&#8221; class=&#8221;list-group-item active&#8221;&gt;学生列表&lt;/a&gt;
</p>
<p>
                  &lt;a href=&#8221;./form.html&#8221; class=&#8221;list-group-item&#8221;&gt;新增学生&lt;/a&gt;
</p>
<p>
              &lt;/div&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
          &lt;!&#8211; 右侧内容区域 &#8211;&gt;
</p>
<p>
          &lt;div class=&#8221;col-md-9&#8243;&gt;
</p>
<p>
              &lt;!&#8211; 成功提示框 &#8211;&gt;
</p>
<p>
              &lt;div class=&#8221;alert alert-success alert-dismissible&#8221; role=&#8221;alert&#8221;&gt;
</p>
<p>
                  &lt;button type=&#8221;button&#8221; class=&#8221;close&#8221; data-dismiss=&#8221;alert&#8221; aria-label=&#8221;Close&#8221;&gt;
</p>
<p>
                      &lt;span aria-hidden=&#8221;true&#8221;&gt;&amp;times;&lt;/span&gt;
</p>
<p>
                  &lt;/button&gt;
</p>
<p>
                  &lt;strong&gt;成功!&lt;/strong&gt; 操作成功提示！
</p>
<p>
              &lt;/div&gt;
</p>
<p>
              &lt;!&#8211; 失败提示框 &#8211;&gt;
</p>
<p>
              &lt;div class=&#8221;alert alert-danger alert-dismissible&#8221; role=&#8221;alert&#8221;&gt;
</p>
<p>
                  &lt;button type=&#8221;button&#8221; class=&#8221;close&#8221; data-dismiss=&#8221;alert&#8221; aria-label=&#8221;Close&#8221;&gt;
</p>
<p>
                      &lt;span aria-hidden=&#8221;true&#8221;&gt;&amp;times;&lt;/span&gt;
</p>
<p>
                  &lt;/button&gt;
</p>
<p>
                  &lt;strong&gt;失败!&lt;/strong&gt; 操作失败提示！
</p>
<p>
              &lt;/div&gt;
</p>
<p>
              &lt;!&#8211; 自定义内容区域 &#8211;&gt;
</p>
<p>
              &lt;div class=&#8221;panel panel-default&#8221;&gt;
</p>
<p>
                  &lt;div class=&#8221;panel-heading&#8221;&gt;学生列表&lt;/div&gt;
</p>
<p>
                  &lt;table class=&#8221;table table-striped table-hover table-responsive&#8221;&gt;
</p>
<p>
                      &lt;thead&gt;
</p>
<p>
                      &lt;tr&gt;
</p>
<p>
                          &lt;th&gt;ID&lt;/th&gt;
</p>
<p>
                          &lt;th&gt;姓名&lt;/th&gt;
</p>
<p>
                          &lt;th&gt;年龄&lt;/th&gt;
</p>
<p>
                          &lt;th&gt;性别&lt;/th&gt;
</p>
<p>
                          &lt;th&gt;添加时间&lt;/th&gt;
</p>
<p>
                          &lt;th width=&#8221;120&#8243;&gt;操作&lt;/th&gt;
</p>
<p>
                      &lt;/tr&gt;
</p>
<p>
                      &lt;/thead&gt;
</p>
<p>
                      &lt;tbody&gt;
</p>
<p>
                      @foreach ($student as $item)
</p>
<p>
                          &lt;tr&gt;
</p>
<p>
                              &lt;th scope=&#8221;row&#8221;&gt;{{ $item-&gt;id }}&lt;/th&gt;
</p>
<p>
                              &lt;td&gt;{{ $item-&gt;uname }}&lt;/td&gt;
</p>
<p>
                              &lt;td&gt;{{ $item-&gt;age }}&lt;/td&gt;
</p>
<p>
                              &lt;td&gt;
</p>
<p>
                                  @if ($item-&gt;sex === 1)
</p>
<p>
                                      公
</p>
<p>
                                  @else
</p>
<p>
                                      母
</p>
<p>
                                  @endif
</p>
<p>
                              &lt;/td&gt;
</p>
<p>
                              &lt;td&gt;{{ $item-&gt;created_at }}&lt;/td&gt;
</p>
<p>
                              &lt;td&gt;
</p>
<p>
                                  &lt;a href=&#8221;&#8221;&gt;详情&lt;/a&gt;
</p>
<p>
                                  &lt;a href=&#8221;&#8221;&gt;修改&lt;/a&gt;
</p>
<p>
                                  &lt;a href=&#8221;&#8221;&gt;删除&lt;/a&gt;
</p>
<p>
                              &lt;/td&gt;
</p>
<p>
                          &lt;/tr&gt;
</p>
<p>
                      @endforeach
</p>
<p>
                      &lt;/tbody&gt;
</p>
<p>
                  &lt;/table&gt;
</p>
<p>
              &lt;/div&gt;
</p>
<p>
              &lt;!&#8211; 分页  &#8211;&gt;
</p>
<p>
              &lt;div style=&#8221;text-align: right;&#8221;&gt;
</p>
<p>
                  {{ $student-&gt;links() }}
</p>
<p>
                  {{&#8211;&lt;ul class=&#8221;pagination pull-right&#8221;&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;a href=&#8221;#&#8221; aria-label=&#8221;Previous&#8221;&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;span aria-hidden=&#8221;true&#8221;&gt;&amp;laquo;&lt;/span&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;/a&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li class=&#8221;active&#8221;&gt;&lt;a href=&#8221;#&#8221;&gt;1&lt;/a&gt;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;2&lt;/a&gt;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;3&lt;/a&gt;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;4&lt;/a&gt;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li&gt;&lt;a href=&#8221;#&#8221;&gt;5&lt;/a&gt;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;a href=&#8221;#&#8221; aria-label=&#8221;Next&#8221;&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;span aria-hidden=&#8221;true&#8221;&gt;&amp;raquo;&lt;/span&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;/a&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;/li&gt;&#8211;}}
</p>
<p>
                  {{&#8211;&lt;/ul&gt;&#8211;}}
</p>
<p>
              &lt;/div&gt;
</p>
<p>
          &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
  @endsection
</p>
<h1>二、会话技术</h1>
<h2>1、session会话</h2>
<h3>1）语法</h3>
<ul>
<li><strong>位置：</strong>config\session.php存储了session的相关配置说明（注：非php.ini）
  </li>
</ul>
<p>
  脚下留心
</p>
<p><img loading="lazy" decoding="async" width="995" height="368" src="/wp-content/uploads/2018/05/word-image-5531.png" class="wp-image-6081" srcset="/wp-content/uploads/2018/05/word-image-5531.png 995w, /wp-content/uploads/2018/05/word-image-5531-300x111.png 300w, /wp-content/uploads/2018/05/word-image-5531-768x284.png 768w" sizes="(max-width: 995px) 100vw, 995px" /></p>
<ul>
<li><strong>说明：Laravel中支持三种方式操作session</strong>
  </li>
<li>
    Http Request类的session方法
  </li>
</ul>
<p>
  设置：    $request-&gt;session()-&gt;put（键，值）
</p>
<p>
  获取指定：$request-&gt;session()-&gt;get（键 [，默认值]）
</p>
<p>
  获取所有：$request-&gt;session()-&gt;all（）
</p>
<p>
  判断：    $request-&gt;session()-&gt;has(键);
</p>
<ul>
<li>
    session辅助函数
  </li>
</ul>
<p>
  设置：session（[键1=&gt;值1,&#8230;,键n=&gt;值n]）
</p>
<p>
  获取：session（键）
</p>
<ul>
<li>
    Session facade门面 （通过Session类调用静态方法）
  </li>
</ul>
<p>
  设置：			   Session::put（键，值）;
</p>
<p>
  获取指定：		   Session::get（键 [，默认值]）
</p>
<p>
  获取所有：		   Session::all（）
</p>
<p>
  删除指定：	 	   Session::forget(key)
</p>
<p>
  判断：		  	   Session::has(key)
</p>
<p>
  删除所有：  	   Session::flush()
</p>
<p>
  压入session数组：Session::push(key, value)
</p>
<p>
  获取后删除：	   Session::pull(key)
</p>
<p>
  闪存：			   Session::flash(key, value)
</p>
<h3>2）练习</h3>
<p>
  设置
</p>
<p>
  获取全部
</p>
<p>
  压入
</p>
<p>
  获取指定
</p>
<p>
  获取全部
</p>
<p>
  闪存
</p>
<p>
  查看
</p>
<p><img loading="lazy" decoding="async" width="686" height="578" src="/wp-content/uploads/2018/05/word-image-5532.png" class="wp-image-6082" srcset="/wp-content/uploads/2018/05/word-image-5532.png 686w, /wp-content/uploads/2018/05/word-image-5532-300x253.png 300w" sizes="(max-width: 686px) 100vw, 686px" /></p>
<h2>2、cookie会话</h2>
<h3>1）语法</h3>
<ul>
<li>
    设置：Cookie::make（键，值）
  </li>
<li>
    设置：Cookie::forever（键，键）							   #理论上的永久设置
  </li>
<li>
    获取：Cookie::get（键）
  </li>
</ul>
<p>
  Laravel中必须通过withCookie使响应头中携带cookie信息
</p>
<h3>2）练习</h3>
<p>
  设置cookie
</p>
<p><img loading="lazy" decoding="async" width="1189" height="433" src="/wp-content/uploads/2018/05/word-image-5533.png" class="wp-image-6083" srcset="/wp-content/uploads/2018/05/word-image-5533.png 1189w, /wp-content/uploads/2018/05/word-image-5533-300x109.png 300w, /wp-content/uploads/2018/05/word-image-5533-768x280.png 768w, /wp-content/uploads/2018/05/word-image-5533-1024x373.png 1024w" sizes="(max-width: 1189px) 100vw, 1189px" /></p>
<p>
  控制器
</p>
<p><img loading="lazy" decoding="async" width="1227" height="661" src="/wp-content/uploads/2018/05/word-image-5534.png" class="wp-image-6084" srcset="/wp-content/uploads/2018/05/word-image-5534.png 1227w, /wp-content/uploads/2018/05/word-image-5534-300x162.png 300w, /wp-content/uploads/2018/05/word-image-5534-768x414.png 768w, /wp-content/uploads/2018/05/word-image-5534-1024x552.png 1024w" sizes="(max-width: 1227px) 100vw, 1227px" /></p>
<h1>三、中间件（middleware）</h1>
<h2>概念</h2>
<ul>
<li>
      中间件：就是将HTTP请求交给控制器方法处理前的过滤层
  </li>
<li>
    简单理解：
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="1033" height="467" src="/wp-content/uploads/2018/05/word-image-5535.png" class="wp-image-6085" srcset="/wp-content/uploads/2018/05/word-image-5535.png 1033w, /wp-content/uploads/2018/05/word-image-5535-300x136.png 300w, /wp-content/uploads/2018/05/word-image-5535-768x347.png 768w, /wp-content/uploads/2018/05/word-image-5535-1024x463.png 1024w" sizes="(max-width: 1033px) 100vw, 1033px" /></p>
<h2>语法</h2>
<ul>
<li>
    语法：php artisan make:middleware 中间件名称
  </li>
<li>
    位置：Http\Middleware\中间件名称
  </li>
<li>
    使用步骤
  </li>
<li>
    步骤1：创建中间件，并书写过滤代码
  </li>
<li>
    步骤2：注册激活中间件（app\Http\Kernel.php）
  </li>
<li>
    步骤3：路由声明使用哪个中间件过滤
  </li>
</ul>
<p>
  Route::HTTP请求类型(路径，闭包函数或控制器方法)-&gt;middleware（中间件名称）
</p>
<p>
  Route::group([&#8216;namespace&#8217;=&gt;, &#8216;prefix&#8217;=&gt;&#8221;, &#8216;middleware&#8217;=&gt;中间件名称], function(){
</p>
<p>
  })
</p>
<h2>练习（需求：访问 /test时闭包函数输出111，中间件输出222）</h2>
<p>
  步骤1：创建中间件并书写逻辑代码
</p>
<p><img loading="lazy" decoding="async" width="1341" height="573" src="/wp-content/uploads/2018/05/word-image-5536.png" class="wp-image-6086" srcset="/wp-content/uploads/2018/05/word-image-5536.png 1341w, /wp-content/uploads/2018/05/word-image-5536-300x128.png 300w, /wp-content/uploads/2018/05/word-image-5536-768x328.png 768w, /wp-content/uploads/2018/05/word-image-5536-1024x438.png 1024w" sizes="(max-width: 1341px) 100vw, 1341px" /></p>
<p>
  步骤2；激活
</p>
<p><img loading="lazy" decoding="async" width="1212" height="422" src="/wp-content/uploads/2018/05/word-image-5537.png" class="wp-image-6087" srcset="/wp-content/uploads/2018/05/word-image-5537.png 1212w, /wp-content/uploads/2018/05/word-image-5537-300x104.png 300w, /wp-content/uploads/2018/05/word-image-5537-768x267.png 768w, /wp-content/uploads/2018/05/word-image-5537-1024x357.png 1024w" sizes="(max-width: 1212px) 100vw, 1212px" /></p>
<p>
  步骤3：路由使用
</p>
<p><img loading="lazy" decoding="async" width="530" height="214" src="/wp-content/uploads/2018/05/word-image-5538.png" class="wp-image-6088" srcset="/wp-content/uploads/2018/05/word-image-5538.png 530w, /wp-content/uploads/2018/05/word-image-5538-300x121.png 300w" sizes="(max-width: 530px) 100vw, 530px" /></p>
<h2>防翻墙</h2>
<p>
  步骤1：保存用户信息到session中
</p>
<p><img loading="lazy" decoding="async" width="978" height="448" src="/wp-content/uploads/2018/05/word-image-5539.png" class="wp-image-6089" srcset="/wp-content/uploads/2018/05/word-image-5539.png 978w, /wp-content/uploads/2018/05/word-image-5539-300x137.png 300w, /wp-content/uploads/2018/05/word-image-5539-768x352.png 768w" sizes="(max-width: 978px) 100vw, 978px" /></p>
<p>
  步骤2：创建中间件
</p>
<p><img loading="lazy" decoding="async" width="1323" height="579" src="/wp-content/uploads/2018/05/word-image-5540.png" class="wp-image-6090" srcset="/wp-content/uploads/2018/05/word-image-5540.png 1323w, /wp-content/uploads/2018/05/word-image-5540-300x131.png 300w, /wp-content/uploads/2018/05/word-image-5540-768x336.png 768w, /wp-content/uploads/2018/05/word-image-5540-1024x448.png 1024w" sizes="(max-width: 1323px) 100vw, 1323px" /></p>
<p>
  //判断用户是否登录
</p>
<p>
  if (!Session::has(&#8216;userinfo&#8217;)) {
</p>
<p>
      return redirect(&#8216;/student/login&#8217;)-&gt;with([&#8216;state&#8217;=&gt;&#8217;error&#8217;, &#8216;tips&#8217;=&gt;&#8217;犊子，去登录&#8217;]);
</p>
<p>
  }
</p>
<p>
  步骤3：激活中间件
</p>
<p><img loading="lazy" decoding="async" width="1073" height="475" src="/wp-content/uploads/2018/05/word-image-5541.png" class="wp-image-6091" srcset="/wp-content/uploads/2018/05/word-image-5541.png 1073w, /wp-content/uploads/2018/05/word-image-5541-300x133.png 300w, /wp-content/uploads/2018/05/word-image-5541-768x340.png 768w, /wp-content/uploads/2018/05/word-image-5541-1024x453.png 1024w" sizes="(max-width: 1073px) 100vw, 1073px" /></p>
<p>
  步骤4：使用
</p>
<p><img loading="lazy" decoding="async" width="1278" height="592" src="/wp-content/uploads/2018/05/word-image-5542.png" class="wp-image-6092" srcset="/wp-content/uploads/2018/05/word-image-5542.png 1278w, /wp-content/uploads/2018/05/word-image-5542-300x139.png 300w, /wp-content/uploads/2018/05/word-image-5542-768x356.png 768w, /wp-content/uploads/2018/05/word-image-5542-1024x474.png 1024w" sizes="(max-width: 1278px) 100vw, 1278px" /></p>
<p>
  步骤5：修改laravel的session机制
</p>
<p><img loading="lazy" decoding="async" width="1041" height="372" src="/wp-content/uploads/2018/05/word-image-5543.png" class="wp-image-6093" srcset="/wp-content/uploads/2018/05/word-image-5543.png 1041w, /wp-content/uploads/2018/05/word-image-5543-300x107.png 300w, /wp-content/uploads/2018/05/word-image-5543-768x274.png 768w, /wp-content/uploads/2018/05/word-image-5543-1024x366.png 1024w" sizes="(max-width: 1041px) 100vw, 1041px" /></p>
<h1><a id="post-6079-_Toc487990952"></a>四、Laravel控制器数据验证</h1>
<h2>1、概念</h2>
<h3>1）说明</h3>
<p>
  为了保证项目安全除前段必须验证外后端也必须进行数据验证，Laravel提供了一套完善的验证机制。
</p>
<h3>2）分类（Laravel提供了三种方式验证）</h3>
<ul>
<li>
    控制器直接使用validate方法
  </li>
<li>
    单独创建验证类
  </li>
<li>
    使用validator门面验证
  </li>
</ul>
<p>
  验证规则
</p>
<p>
  required: 不能为空
</p>
<p>
  max:255最长255个字符，
</p>
<p>
  min:1最少1个字符
</p>
<p>
  email:验证邮箱是否合法
</p>
<p>
  confirmed:验证两个字段是否相同，如果验证的字段是password,则必须输入一个与之匹配的password_confirmation字段
</p>
<p>
  integer:验证字段必须是整型
</p>
<p>
  ip:验证字段必须是IP地址
</p>
<p>
  numeric 验证字段必须是数值
</p>
<p>
  max:value 验证字段必须小于等于最大值，和字符串，数值，文件字段的size规则一起使用。
</p>
<p>
  min:value 验证字段的最小值，对字符串、数值、文件字段而言，和size规则使用方式一致。
</p>
<p>
  size:value 验证字段必须有和给定值value想匹配的尺寸，对字符串而言，value是相应的字符数目，对数值而言，value是给定整型值；对文件而言，value是相应的文件字节数。
</p>
<p>
  string 验证字段必须是字符串
</p>
<p>
  unique:表名，字段，需要排除的ID
</p>
<p>
  验证规则手册：<a href="http://laravelacademy.org/post/6768.html#toc_17">http://laravelacademy.org/post/6768.html#toc_17</a>
</p>
<p>
  多学一招：多个验证规则可以通过 &#8220;|&#8221; 字符进行隔开
</p>
<h2>方法1：控制器使用validate方法</h2>
<h3>语法</h3>
<ul>
<li>
    $this-&gt;validate（$request，验证规则 [，提示信息]）
  </li>
</ul>
<h3>练习</h3>
<p>
  控制器
</p>
<p><img loading="lazy" decoding="async" width="985" height="555" src="/wp-content/uploads/2018/05/word-image-5544.png" class="wp-image-6094" srcset="/wp-content/uploads/2018/05/word-image-5544.png 985w, /wp-content/uploads/2018/05/word-image-5544-300x169.png 300w, /wp-content/uploads/2018/05/word-image-5544-768x433.png 768w" sizes="(max-width: 985px) 100vw, 985px" /></p>
<p>
  //数据验证
</p>
<p>
  $this-&gt;validate($request, [
</p>
<p>
      &#8216;uname&#8217; =&gt; &#8216;required&#8217;,
</p>
<p>
      &#8216;pwd&#8217; =&gt; &#8216;required&#8217;,
</p>
<p>
      &#8216;age&#8217; =&gt; &#8216;required|integer&#8217;,
</p>
<p>
      &#8216;sex&#8217; =&gt; &#8216;required|integer&#8217;,
</p>
<p>
  ], [
</p>
<p>
      &#8216;age.integer&#8217; =&gt; &#8216;年龄必须是整型&#8217;,
</p>
<p>
      &#8216;age.required&#8217; =&gt; &#8216;年龄必须&#8217;,
</p>
<p>
  ]);
</p>
<p>
  视图
</p>
<p><img loading="lazy" decoding="async" width="989" height="434" src="/wp-content/uploads/2018/05/word-image-5545.png" class="wp-image-6095" srcset="/wp-content/uploads/2018/05/word-image-5545.png 989w, /wp-content/uploads/2018/05/word-image-5545-300x132.png 300w, /wp-content/uploads/2018/05/word-image-5545-768x337.png 768w" sizes="(max-width: 989px) 100vw, 989px" /></p>
<p>
  @if (count($errors) &gt; 0)
</p>
<p>
      &lt;div class=&#8221;alert alert-danger&#8221;&gt;
</p>
<p>
          &lt;ul&gt;
</p>
<p>
              @foreach ($errors-&gt;all() as $error)
</p>
<p>
                  &lt;li&gt;{{ $error }}&lt;/li&gt;
</p>
<p>
              @endforeach
</p>
<p>
          &lt;/ul&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
  @endif
</p>
<p>
  多学一招：验证提示信息汉化
</p>
<ol>
<li>
  下载：https://github.com/caouecs/Laravel-lang
</li>
<li>
  将下载的汉化包放到项目中
</li>
</ol>
<p><img loading="lazy" decoding="async" width="782" height="395" src="/wp-content/uploads/2018/05/word-image-5546.png" class="wp-image-6096" srcset="/wp-content/uploads/2018/05/word-image-5546.png 782w, /wp-content/uploads/2018/05/word-image-5546-300x152.png 300w, /wp-content/uploads/2018/05/word-image-5546-768x388.png 768w" sizes="(max-width: 782px) 100vw, 782px" /></p>
<ol>
<li>
  修改config\app.php
</li>
</ol>
<p><img loading="lazy" decoding="async" width="789" height="210" src="/wp-content/uploads/2018/05/word-image-5547.png" class="wp-image-6097" srcset="/wp-content/uploads/2018/05/word-image-5547.png 789w, /wp-content/uploads/2018/05/word-image-5547-300x80.png 300w, /wp-content/uploads/2018/05/word-image-5547-768x204.png 768w" sizes="(max-width: 789px) 100vw, 789px" /></p>
<p>
  4）重新提交测试即可
</p>
<h2>方法2：单独创建验证类</h2>
<h3>语法</h3>
<ul>
<li>
    语法：php artisan make:request 验证类名称
  </li>
<li>
    位置：app\Http\Requests
  </li>
</ul>
<h3>2）练习</h3>
<p>
  步骤1：创建验证类并书写规则
</p>
<p><img loading="lazy" decoding="async" width="1063" height="624" src="/wp-content/uploads/2018/05/word-image-5548.png" class="wp-image-6098" srcset="/wp-content/uploads/2018/05/word-image-5548.png 1063w, /wp-content/uploads/2018/05/word-image-5548-300x176.png 300w, /wp-content/uploads/2018/05/word-image-5548-768x451.png 768w, /wp-content/uploads/2018/05/word-image-5548-1024x601.png 1024w" sizes="(max-width: 1063px) 100vw, 1063px" /></p>
<p>
  &lt;?php
</p>
<p>
  namespace App\Http\Requests;
</p>
<p>
  use Illuminate\Foundation\Http\FormRequest;
</p>
<p>
  class CheckStudent extends FormRequest
</p>
<p>
  {
</p>
<p>
      public function authorize()
</p>
<p>
      {
</p>
<p>
          return true; //开启验证
</p>
<p>
      }
</p>
<p>
      public function rules()
</p>
<p>
      {
</p>
<p>
          if ($this-&gt;isMethod(&#8216;get&#8217;)) return [];
</p>
<p>
          return [
</p>
<p>
              &#8216;uname&#8217; =&gt; &#8216;required&#8217;,
</p>
<p>
              &#8216;pwd&#8217; =&gt; &#8216;required&#8217;,
</p>
<p>
              &#8216;age&#8217; =&gt; &#8216;required|integer&#8217;,
</p>
<p>
              &#8216;sex&#8217; =&gt; &#8216;required|integer&#8217;,
</p>
<p>
          ];
</p>
<p>
      }
</p>
<p>
      public function messages()
</p>
<p>
      {
</p>
<p>
          return [
</p>
<p>
              &#8216;uname.required&#8217; =&gt; &#8216;用户名有消磁&#8217;
</p>
<p>
          ];
</p>
<p>
      }
</p>
<p>
  }
</p>
<p>
  步骤2：在控制器中使用
</p>
<p><img loading="lazy" decoding="async" width="1050" height="544" src="/wp-content/uploads/2018/05/word-image-5549.png" class="wp-image-6099" srcset="/wp-content/uploads/2018/05/word-image-5549.png 1050w, /wp-content/uploads/2018/05/word-image-5549-300x155.png 300w, /wp-content/uploads/2018/05/word-image-5549-768x398.png 768w, /wp-content/uploads/2018/05/word-image-5549-1024x531.png 1024w" sizes="(max-width: 1050px) 100vw, 1050px" /></p>
<h2>方法3：使用Validator门面验证器（类）</h2>
<h3>1）语法</h3>
<ul>
<li>
    $validator = Validator::make（待验证的数据，验证规则 [，提示信息]）
  </li>
<li>
    $validator-&gt;passes()   		是否成功：成功-true，失败-false
  </li>
<li>
    $validator-&gt;fails()    		是否失败：失败-true，成功-false
  </li>
<li>
    $validator-&gt;messages()     获取错误信息
  </li>
</ul>
<h3>2）练习</h3>
<p><img loading="lazy" decoding="async" width="1206" height="522" src="/wp-content/uploads/2018/05/word-image-5550.png" class="wp-image-6100" srcset="/wp-content/uploads/2018/05/word-image-5550.png 1206w, /wp-content/uploads/2018/05/word-image-5550-300x130.png 300w, /wp-content/uploads/2018/05/word-image-5550-768x332.png 768w, /wp-content/uploads/2018/05/word-image-5550-1024x443.png 1024w" sizes="(max-width: 1206px) 100vw, 1206px" /></p>
<p>
  $validator = Validator::make($request-&gt;all(), [
</p>
<p>
      &#8216;uname&#8217; =&gt; &#8216;required&#8217;,
</p>
<p>
      &#8216;pwd&#8217; =&gt; &#8216;required&#8217;,
</p>
<p>
      &#8216;age&#8217; =&gt; &#8216;required|integer&#8217;,
</p>
<p>
      &#8216;sex&#8217; =&gt; &#8216;required|integer&#8217;,
</p>
<p>
  ]);
</p>
<p>
  if ($validator-&gt;fails()) {
</p>
<p>
      //如果异步请求则响应json    dd($validator-&gt;messages());
</p>
<p>
      return redirect(&#8216;student/add&#8217;)-&gt;withErrors($validator);
</p>
<p>
  }
</p>
<h2>︴显示单个错误</h2>
<p>
  语法：{{ $errors-&gt;first(键) }}
</p>
<p><img loading="lazy" decoding="async" width="1243" height="592" src="/wp-content/uploads/2018/05/word-image-5551.png" class="wp-image-6101" srcset="/wp-content/uploads/2018/05/word-image-5551.png 1243w, /wp-content/uploads/2018/05/word-image-5551-300x143.png 300w, /wp-content/uploads/2018/05/word-image-5551-768x366.png 768w, /wp-content/uploads/2018/05/word-image-5551-1024x488.png 1024w" sizes="(max-width: 1243px) 100vw, 1243px" /></p>
<h1>多表查询【★★★★★★★★★★★★★★】</h1>
<h2>︴测试数据准备</h2>
<p>
  DROP TABLE IF EXISTS `article`;
</p>
<p>
  CREATE TABLE `article` (
</p>
<p>
    `aid` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#8216;编号&#8217;,
</p>
<p>
    `title` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#8216;用户名&#8217;,
</p>
<p>
    `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#8216;密码&#8217;,
</p>
<p>
    `uid` int(11) DEFAULT NULL,
</p>
<p>
    PRIMARY KEY (`aid`)
</p>
<p>
  ) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
</p>
<p>
  INSERT INTO `article` VALUES (&#8216;1&#8217;, &#8216;文章1&#8217;, &#8216;内容1&#8217;, &#8216;1&#8217;);
</p>
<p>
  INSERT INTO `article` VALUES (&#8216;2&#8217;, &#8216;文章2&#8217;, &#8216;内容2&#8217;, &#8216;1&#8217;);
</p>
<p>
  INSERT INTO `article` VALUES (&#8216;3&#8217;, &#8216;文章3&#8217;, &#8216;内容3&#8217;, &#8216;2&#8217;);
</p>
<p>
  INSERT INTO `article` VALUES (&#8216;4&#8217;, &#8216;文章4&#8217;, &#8216;内容4&#8217;, &#8216;3&#8217;);
</p>
<p>
  DROP TABLE IF EXISTS `student`;
</p>
<p>
  CREATE TABLE `student` (
</p>
<p>
    `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#8216;编号&#8217;,
</p>
<p>
    `uname` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#8216;用户名&#8217;,
</p>
<p>
    `pwd` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#8216;密码&#8217;,
</p>
<p>
    `age` tinyint(3) unsigned NOT NULL DEFAULT &#8216;0&#8217; COMMENT &#8216;年龄&#8217;,
</p>
<p>
    `sex` tinyint(3) unsigned NOT NULL DEFAULT &#8216;1&#8217; COMMENT &#8216;性别：1-男,2-女&#8217;,
</p>
<p>
    `created_at` int(11) NOT NULL DEFAULT &#8216;0&#8217; COMMENT &#8216;创建于&#8217;,
</p>
<p>
    `updated_at` int(11) NOT NULL DEFAULT &#8216;0&#8217; COMMENT &#8216;更新于&#8217;,
</p>
<p>
    PRIMARY KEY (`id`)
</p>
<p>
  ) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
</p>
<p>
  INSERT INTO `student` VALUES
</p>
<p>
  (&#8216;1&#8217;, &#8216;test&#8217;, &#8216;$2y$10$0.wXoff3zfaqM4DSMzlzbOEkDfk5ztnJn32vilBAS/WEWSWLcZcrK&#8217;, &#8217;64&#8217;, &#8216;1&#8217;, &#8216;1515226698&#8217;, &#8216;1515226698&#8217;),
</p>
<p>
  (&#8216;2&#8217;, &#8216;Kariane Shields&#8217;, &#8216;$2y$10$xM5YmEL5D3jpomMvqIH/5eS.W.F0o.9oqfNr/FhlmTInRJFEBc9Wi&#8217;, &#8217;94&#8217;, &#8216;2&#8217;, &#8216;1515226713&#8217;, &#8216;1515226713&#8217;),
</p>
<p>
  (&#8216;3&#8217;, &#8216;Prof. Dino Brakus&#8217;, &#8216;$2y$10$hhSBJh69wyAO9wK.JABiEO02rxOzz2MfjHZVbfbLE5RiI7ZRuw6qa&#8217;, &#8216;107&#8217;, &#8216;1&#8217;, &#8216;1515226713&#8217;, &#8216;1515226713&#8217;),
</p>
<p>
  (&#8216;4&#8217;, &#8216;Miss Vivienne Senger V&#8217;, &#8216;$2y$10$CgsLmcYEmYukWKV4i/qAtOHnnnLvUSlJ/NU46.Tke/OuNRgrRES9W&#8217;, &#8217;15&#8217;, &#8216;1&#8217;, &#8216;1515226713&#8217;, &#8216;1515226713&#8217;);
</p>
<h2>1、概念</h2>
<p>
  一对一关系：一篇文章属于一个用户
</p>
<p>
  一对多关系：一个用户有多篇文章
</p>
<h2>查询构建器</h2>
<h3>1）语法</h3>
<p>
  DB::table（表1）
</p>
<p>
  -&gt;leftJoin（表2， &#8216;表1.公共字段&#8217;, &#8216;=&#8217;, &#8216;表2.公共字段&#8217;）
</p>
<p>
  -&gt;get()
</p>
<h3>2）练习</h3>
<p>
  #一对一关系：一遍文章属于一个用户
</p>
<p><img loading="lazy" decoding="async" width="1330" height="643" src="/wp-content/uploads/2018/05/word-image-5552.png" class="wp-image-6102" srcset="/wp-content/uploads/2018/05/word-image-5552.png 1330w, /wp-content/uploads/2018/05/word-image-5552-300x145.png 300w, /wp-content/uploads/2018/05/word-image-5552-768x371.png 768w, /wp-content/uploads/2018/05/word-image-5552-1024x495.png 1024w" sizes="(max-width: 1330px) 100vw, 1330px" /></p>
<p>
  public function test()
</p>
<p>
  {
</p>
<p>
      #一对一关系：一遍文章属于一个用户
</p>
<p>
      $data = DB::table(&#8216;article&#8217;)
</p>
<p>
      -&gt;leftJoin(&#8216;student&#8217;, &#8216;article.uid&#8217;, &#8216;=&#8217;, &#8216;student.id&#8217;)
</p>
<p>
      -&gt;get();
</p>
<p>
      echo &#8216;&lt;pre&gt;&#8217;;
</p>
<p>
      print_r($data);
</p>
<p>
      #一对多关系：一个用户拥有多篇文章
</p>
<p>
  }
</p>
<p>
  #一对多关系：一个用户拥有多篇文章
</p>
<p><img loading="lazy" decoding="async" width="1365" height="512" src="/wp-content/uploads/2018/05/word-image-5553.png" class="wp-image-6103" srcset="/wp-content/uploads/2018/05/word-image-5553.png 1365w, /wp-content/uploads/2018/05/word-image-5553-300x113.png 300w, /wp-content/uploads/2018/05/word-image-5553-768x288.png 768w, /wp-content/uploads/2018/05/word-image-5553-1024x384.png 1024w" sizes="(max-width: 1365px) 100vw, 1365px" /></p>
<p>
  #一对多关系：一个用户拥有多篇文章
</p>
<p>
  $data = DB::table(&#8216;student&#8217;)
</p>
<p>
      -&gt;leftJoin(&#8216;article&#8217;, &#8216;article.uid&#8217;, &#8216;=&#8217;, &#8216;student.id&#8217;)
</p>
<p>
      -&gt;get();
</p>
<p>
  echo &#8216;&lt;pre&gt;&#8217;;
</p>
<p>
  print_r($data);
</p>
<h2>模型</h2>
<h3>1）语法</h3>
<ul>
<li>
    一对一
  </li>
</ul>
<p>
  步骤1：模型定义
</p>
<p>
  public function 推荐写表名()
</p>
<p>
  {
</p>
<p>
  return $this-&gt;hasOne(关联模型，关联模型公共字段, 本模型公共字段);
</p>
<p>
  }
</p>
<p>
  步骤2：控制器调用【模型名::with(&#8216;推荐写表名&#8217;)-&gt;get()】
</p>
<ul>
<li>
    一对多
  </li>
</ul>
<p>
  步骤1：模型定义
</p>
<p>
  public function 推荐写表名s()
</p>
<p>
  {
</p>
<p>
  return  $this-&gt;hasMany(关联模型，关联模型公共字段, 本模型公共字段);
</p>
<p>
  }
</p>
<p>
  步骤2：控制器调用【模型名::with(&#8216;推荐写表名&#8217;)-&gt;get()】
</p>
<h3>2）练习</h3>
<p>
  #一对一关系：一遍文章属于一个用户
</p>
<p>
  步骤1：设置模型
</p>
<p><img loading="lazy" decoding="async" width="1290" height="474" src="/wp-content/uploads/2018/05/word-image-5554.png" class="wp-image-6104" srcset="/wp-content/uploads/2018/05/word-image-5554.png 1290w, /wp-content/uploads/2018/05/word-image-5554-300x110.png 300w, /wp-content/uploads/2018/05/word-image-5554-768x282.png 768w, /wp-content/uploads/2018/05/word-image-5554-1024x376.png 1024w" sizes="(max-width: 1290px) 100vw, 1290px" /></p>
<p>
  步骤2：控制器调用
</p>
<p><img loading="lazy" decoding="async" width="873" height="601" src="/wp-content/uploads/2018/05/word-image-5555.png" class="wp-image-6105" srcset="/wp-content/uploads/2018/05/word-image-5555.png 873w, /wp-content/uploads/2018/05/word-image-5555-300x207.png 300w, /wp-content/uploads/2018/05/word-image-5555-768x529.png 768w, /wp-content/uploads/2018/05/word-image-5555-220x150.png 220w" sizes="(max-width: 873px) 100vw, 873px" /></p>
<p>
  public function test()
</p>
<p>
  {
</p>
<p>
      #潜规则：
</p>
<p>
      #单模型直接查询，  则$v是一个小对象  通过$v-&gt;字段名可以获取数据
</p>
<p>
      #with模型关联查询，则$v是一个小对象
</p>
<p>
      #                  获取本模型数据： 通过$v-&gt;本模型的字段
</p>
<p>
      #                  获取其他模型数据：通过$v-&gt;with的名称-&gt;其他模型的字段
</p>
<p>
      echo &#8216;&lt;pre&gt;&#8217;;
</p>
<p>
      #一对一关系：一遍文章属于一个用户
</p>
<p>
      $articles = Article::with(&#8216;student&#8217;)-&gt;get();
</p>
<p>
      print_r($articles);
</p>
<p>
      foreach ($articles as $article) {
</p>
<p>
          echo &#8216;学生表ID：&#8217;.$article-&gt;student-&gt;id . &#8216;&lt;br /&gt;&#8217;;
</p>
<p>
          echo &#8216;文章表ID：&#8217;.$article-&gt;aid . &#8216;&lt;br /&gt;&#8217;;
</p>
<p>
          echo &#8216;&lt;hr /&gt;&#8217;;
</p>
<p>
      }
</p>
<p>
  }
</p>
<p>
  #一对多关系：一个用户拥有多篇文章
</p>
<p>
  模型
</p>
<p><img loading="lazy" decoding="async" width="1055" height="554" src="/wp-content/uploads/2018/05/word-image-5556.png" class="wp-image-6106" srcset="/wp-content/uploads/2018/05/word-image-5556.png 1055w, /wp-content/uploads/2018/05/word-image-5556-300x158.png 300w, /wp-content/uploads/2018/05/word-image-5556-768x403.png 768w, /wp-content/uploads/2018/05/word-image-5556-1024x538.png 1024w" sizes="(max-width: 1055px) 100vw, 1055px" /></p>
<p>
  控制器
</p>
<p><img loading="lazy" decoding="async" width="1148" height="613" src="/wp-content/uploads/2018/05/word-image-5557.png" class="wp-image-6107" srcset="/wp-content/uploads/2018/05/word-image-5557.png 1148w, /wp-content/uploads/2018/05/word-image-5557-300x160.png 300w, /wp-content/uploads/2018/05/word-image-5557-768x410.png 768w, /wp-content/uploads/2018/05/word-image-5557-1024x547.png 1024w" sizes="(max-width: 1148px) 100vw, 1148px" /></p>
<p>
      public function test()
</p>
<p>
      {
</p>
<p>
          #潜规则：
</p>
<p>
          #单模型直接查询，  则$v是一个小对象  通过$v-&gt;字段名可以获取数据
</p>
<p>
          #with模型关联查询，则$v是一个小对象（1：N）
</p>
<p>
          #                  获取本模型数据： 通过$v-&gt;本模型的字段
</p>
<p>
          #                  获取其他模型数据：通过$v-&gt;with的名称  （数组，需要foreach   第二次foreach的$v是关联模型的一个个小对象）
</p>
<p>
          echo &#8216;&lt;pre&gt;&#8217;;
</p>
<p>
          #一对多关系：一个用户拥有多篇文章
</p>
<p>
          $students = Student::with(&#8216;articles&#8217;)-&gt;get();
</p>
<p>
          foreach ($students as $student) {
</p>
<p>
              echo $student-&gt;id . &#8216;&lt;br /&gt;&#8217;;
</p>
<p>
              //显示学生信息（脚下留心：relations是数组，没有关联数据则空数组）
</p>
<p>
              foreach ($student-&gt;articles as $student) {
</p>
<p>
                  echo  $student-&gt;aid. &#8220;&lt;br /&gt;&#8221;;
</p>
<p>
              }
</p>
<p>
              echo &#8216;&lt;hr /&gt;&#8217;;
</p>
<p>
          }
</p>
<p>
      }
</p>
<h1>路由2</h1>
<h2>理解RESTful</h2>
<ul>
<li>
    说    明：RESTful是目前最流行的一种互联网软件架构（思想）
  </li>
<li>
    架构规则：
  </li>
</ul>
<p><img loading="lazy" decoding="async" width="746" height="380" src="/wp-content/uploads/2018/05/word-image-5558.png" class="wp-image-6108" srcset="/wp-content/uploads/2018/05/word-image-5558.png 746w, /wp-content/uploads/2018/05/word-image-5558-300x153.png 300w" sizes="(max-width: 746px) 100vw, 746px" /><br />
<img loading="lazy" decoding="async" width="727" height="373" src="/wp-content/uploads/2018/05/word-image-5559.png" class="wp-image-6109" srcset="/wp-content/uploads/2018/05/word-image-5559.png 727w, /wp-content/uploads/2018/05/word-image-5559-300x154.png 300w" sizes="(max-width: 727px) 100vw, 727px" /><br />
<img loading="lazy" decoding="async" width="782" height="502" src="/wp-content/uploads/2018/05/word-image-5560.png" class="wp-image-6110" srcset="/wp-content/uploads/2018/05/word-image-5560.png 782w, /wp-content/uploads/2018/05/word-image-5560-300x193.png 300w, /wp-content/uploads/2018/05/word-image-5560-768x493.png 768w" sizes="(max-width: 782px) 100vw, 782px" /></p>
<h2>Laravel资源控制器语法（RESTful）</h2>
<ul>
<li>
    创建资源控制器：php artisan make:controller Home\Day3Controler  &#8211;resource
  </li>
<li>
    创建资源控制器路由：Route::resource(URL信息，控制器);
  </li>
</ul>
<p>
  资源控制器指会自定帮我们按照restful规则创建好方法
</p>
<h2>︴练习</h2>
<h3>创建资源控制器</h3>
<p><img loading="lazy" decoding="async" width="1268" height="538" src="/wp-content/uploads/2018/05/word-image-5561.png" class="wp-image-6111" srcset="/wp-content/uploads/2018/05/word-image-5561.png 1268w, /wp-content/uploads/2018/05/word-image-5561-300x127.png 300w, /wp-content/uploads/2018/05/word-image-5561-768x326.png 768w, /wp-content/uploads/2018/05/word-image-5561-1024x434.png 1024w" sizes="(max-width: 1268px) 100vw, 1268px" /></p>
<h3>2）创建资源控制器路由</h3>
<p><img loading="lazy" decoding="async" width="1022" height="537" src="/wp-content/uploads/2018/05/word-image-5562.png" class="wp-image-6112" srcset="/wp-content/uploads/2018/05/word-image-5562.png 1022w, /wp-content/uploads/2018/05/word-image-5562-300x158.png 300w, /wp-content/uploads/2018/05/word-image-5562-768x404.png 768w" sizes="(max-width: 1022px) 100vw, 1022px" /></p>
<h3>3）访问</h3>
<p><img loading="lazy" decoding="async" width="1022" height="537" src="/wp-content/uploads/2018/05/word-image-5563.png" class="wp-image-6113" srcset="/wp-content/uploads/2018/05/word-image-5563.png 1022w, /wp-content/uploads/2018/05/word-image-5563-300x158.png 300w, /wp-content/uploads/2018/05/word-image-5563-768x404.png 768w" sizes="(max-width: 1022px) 100vw, 1022px" /></p>
<h2>扩展</h2>
<p><a href="https://www.cnblogs.com/CraryPrimitiveMan/p/6242167.html?utm_source=itdadao&amp;utm_medium=referral">https://www.cnblogs.com/CraryPrimitiveMan/p/6242167.html?utm_source=itdadao&amp;utm_medium=referral</a>
</p>
<h1>︴其他扩展</h1>
<h2>1、PHP use 使用场景（or  or and 数据库操作）</h2>
<p><img loading="lazy" decoding="async" width="930" height="375" src="/wp-content/uploads/2018/05/word-image-5564.png" class="wp-image-6114" srcset="/wp-content/uploads/2018/05/word-image-5564.png 930w, /wp-content/uploads/2018/05/word-image-5564-300x121.png 300w, /wp-content/uploads/2018/05/word-image-5564-768x310.png 768w" sizes="(max-width: 930px) 100vw, 930px" /><br />
<img loading="lazy" decoding="async" width="681" height="285" src="/wp-content/uploads/2018/05/word-image-5565.png" class="wp-image-6115" srcset="/wp-content/uploads/2018/05/word-image-5565.png 681w, /wp-content/uploads/2018/05/word-image-5565-300x126.png 300w" sizes="(max-width: 681px) 100vw, 681px" /></p>
<h2>2、钻石设计软件</h2>
<p><img loading="lazy" decoding="async" width="767" height="457" src="/wp-content/uploads/2018/05/word-image-5566.png" class="wp-image-6116" srcset="/wp-content/uploads/2018/05/word-image-5566.png 767w, /wp-content/uploads/2018/05/word-image-5566-300x179.png 300w" sizes="(max-width: 767px) 100vw, 767px" /><br />
<img loading="lazy" decoding="async" width="273" height="54" src="/wp-content/uploads/2018/05/word-image-5567.png" class="wp-image-6117" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/6079.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>TP 3.2 （一）配置、路由、模型、视图、控制器、商城后台首页展示</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/4022.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/4022.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 13:08:24 +0000</pubDate>
				<category><![CDATA[TP3.2]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[商城后台首页展示]]></category>
		<category><![CDATA[控制器]]></category>
		<category><![CDATA[模型]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[路由]]></category>
		<category><![CDATA[配置]]></category>
		<guid isPermaLink="false">/?p=4022</guid>

					<description><![CDATA[框架概述 1.1、回顾MVC(重点理解) MVC是一个编程思想。将业务拆分成为三个板块分别为模型、视图以及控制 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>框架概述</h1>
<h2>1.1、回顾MVC(重点理解)</h2>
<p>
  MVC是一个编程思想。将业务拆分成为三个板块分别为模型、视图以及控制器
</p>
<p>
  M代表是的模型主要是进行数据交互
</p>
<p>
  V代表的就是视图主要是与用户进行交互
</p>
<p>
  C代表是控制器作用作用是进行中间的协同工作。调度模型或者视图完成工作
</p>
<p><img loading="lazy" decoding="async" width="1159" height="486" src="/wp-content/uploads/2018/05/word-image-3566.png" class="wp-image-4023" srcset="/wp-content/uploads/2018/05/word-image-3566.png 1159w, /wp-content/uploads/2018/05/word-image-3566-300x126.png 300w, /wp-content/uploads/2018/05/word-image-3566-768x322.png 768w, /wp-content/uploads/2018/05/word-image-3566-1024x429.png 1024w" sizes="(max-width: 1159px) 100vw, 1159px" /></p>
<h2>1.2、什么是框架</h2>
<p>
  框架就是一个半成品的代码库。包括很多的基础功能，能够方便进行项目的开发。使用框架进行项目开发可以节省开发时间。
</p>
<p>
  例如：在前端页面上进行dom操作。可以使用原生的js进行。也可以使用jQuery来进行dom操作。此处jQuery就是前端的一款框架
</p>
<h2>1.3、PHP的常用框架</h2>
<ol>
<li>
  zendframework：由zend公司开发的一款重量级的框架
</li>
<li>
  YII：基于组件的一款框架
</li>
<li>
  CI框架：一款比较轻量的框架
</li>
<li>
  laravel框架：最优雅的框架
</li>
</ol>
<p>
  5、thinkPHP框架：国产框架
</p>
<h2>1.4、TP框架的优点</h2>
<p>
  国产思想符合国人、代码注释都是中文。并且使用量比较大。社区活跃(问题能够及时解决)
</p>
<h1>TP框架的基本使用</h1>
<h2>2.1、TP源码下载</h2>
<p>
  官方网址：<a href="/goto/hl2v" rel="nofollow">http://www.thinkphp.cn/</a>
</p>
<h3>2.1.1、关于版本的选择</h3>
<p>
  3.2版本：主要是针对于web项目(有前台后台)
</p>
<p>
  5.0版本：主要针对api接口项目(全部都是写接口)
</p>
<p>
  关于实际在开发项目中版本的选择没有严格的界限。例如web项目也可以使用5.0版本。写接口也可以使用3.2版本
</p>
<h3>2.1.2、下载TP3.2版本源代码</h3>
<p><img loading="lazy" decoding="async" width="1117" height="405" src="/wp-content/uploads/2018/05/word-image-3567.png" class="wp-image-4024" srcset="/wp-content/uploads/2018/05/word-image-3567.png 1117w, /wp-content/uploads/2018/05/word-image-3567-300x109.png 300w, /wp-content/uploads/2018/05/word-image-3567-768x278.png 768w, /wp-content/uploads/2018/05/word-image-3567-1024x371.png 1024w" sizes="(max-width: 1117px) 100vw, 1117px" /></p>
<p>
  关于核心版本与完整版的区别。对于核心版本只包括了框架的基本功能。对于完整版本除了框架基本内容之外还包括其他的功能。例如分页、文件上传等
</p>
<h2>2.2、TP框架项目部署(实现)</h2>
<h3>2.2.1、解析下载的源代码目录文件</h3>
<p>
  ①解析下载的源码
</p>
<p><img loading="lazy" decoding="async" width="769" height="274" src="/wp-content/uploads/2018/05/word-image-3568.png" class="wp-image-4025" srcset="/wp-content/uploads/2018/05/word-image-3568.png 769w, /wp-content/uploads/2018/05/word-image-3568-300x107.png 300w, /wp-content/uploads/2018/05/word-image-3568-768x274.png 768w" sizes="(max-width: 769px) 100vw, 769px" /></p>
<p>
  Application:TP默认的应用代码存储的目录(存储自己编写的代码)
</p>
<p>
  Public：TP推荐的存储资源文件的目录
</p>
<p>
  ThinkPHP:TP框架的源代码目录
</p>
<p>
  .htaccess:Apache的重写规则文件
</p>
<p>
  composer.json：composer的配置文件。composer是PHP的代码管理工具
</p>
<p>
  Index.php：项目的入口文件(非常重要)
</p>
<p>
  ②TP框架的源码目录
</p>
<p><img loading="lazy" decoding="async" width="939" height="382" src="/wp-content/uploads/2018/05/word-image-3569.png" class="wp-image-4026" srcset="/wp-content/uploads/2018/05/word-image-3569.png 939w, /wp-content/uploads/2018/05/word-image-3569-300x122.png 300w, /wp-content/uploads/2018/05/word-image-3569-768x312.png 768w" sizes="(max-width: 939px) 100vw, 939px" /></p>
<p>
  Common：存储TP所提供的公共函数文件。对于此目录下的functions.php中的函数可以在任何位置直接使用
</p>
<p>
  Conf:TP的默认配置信息目录
</p>
<p>
  Lang:TP的语言包
</p>
<p>
  Library：TP框架的核心的类库目录
</p>
<p>
  Mode：TP所支持的模式
</p>
<p>
  Tpl：TP默认的系统模板目录
</p>
<p>
  ThinkPHP.php:tp框架的入口文件(在项目的入口文件中必须要载入此文件来载入整个TP框架)
</p>
<h3>2.2.2、创建项目</h3>
<p>
  ①创建项目目录
</p>
<p><img loading="lazy" decoding="async" width="643" height="100" src="/wp-content/uploads/2018/05/word-image-3570.png" class="wp-image-4027" srcset="/wp-content/uploads/2018/05/word-image-3570.png 643w, /wp-content/uploads/2018/05/word-image-3570-300x47.png 300w" sizes="(max-width: 643px) 100vw, 643px" /></p>
<p>
  ②拷贝TP的框架源代码
</p>
<p><img loading="lazy" decoding="async" width="1232" height="332" src="/wp-content/uploads/2018/05/word-image-3571.png" class="wp-image-4028" srcset="/wp-content/uploads/2018/05/word-image-3571.png 1232w, /wp-content/uploads/2018/05/word-image-3571-300x81.png 300w, /wp-content/uploads/2018/05/word-image-3571-768x207.png 768w, /wp-content/uploads/2018/05/word-image-3571-1024x276.png 1024w" sizes="(max-width: 1232px) 100vw, 1232px" /></p>
<h3>2.2.3、创建虚拟主机</h3>
<p>
  ①修改Apache的虚拟主机配置文件
</p>
<p><img loading="lazy" decoding="async" width="934" height="516" src="/wp-content/uploads/2018/05/word-image-3572.png" class="wp-image-4029" srcset="/wp-content/uploads/2018/05/word-image-3572.png 934w, /wp-content/uploads/2018/05/word-image-3572-300x166.png 300w, /wp-content/uploads/2018/05/word-image-3572-768x424.png 768w" sizes="(max-width: 934px) 100vw, 934px" /></p>
<p>
  ②修改本机的hosts文件
</p>
<p><img loading="lazy" decoding="async" width="800" height="444" src="/wp-content/uploads/2018/05/word-image-3573.png" class="wp-image-4030" srcset="/wp-content/uploads/2018/05/word-image-3573.png 800w, /wp-content/uploads/2018/05/word-image-3573-300x167.png 300w, /wp-content/uploads/2018/05/word-image-3573-768x426.png 768w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>
  ③重启Apache访问测试
</p>
<p><img loading="lazy" decoding="async" width="881" height="297" src="/wp-content/uploads/2018/05/word-image-3574.png" class="wp-image-4031" srcset="/wp-content/uploads/2018/05/word-image-3574.png 881w, /wp-content/uploads/2018/05/word-image-3574-300x101.png 300w, /wp-content/uploads/2018/05/word-image-3574-768x259.png 768w" sizes="(max-width: 881px) 100vw, 881px" /></p>
<h3>2.2.4、创建应用</h3>
<p>
  ①编写入口文件
</p>
<p><img loading="lazy" decoding="async" width="1188" height="451" src="/wp-content/uploads/2018/05/word-image-3575.png" class="wp-image-4032" srcset="/wp-content/uploads/2018/05/word-image-3575.png 1188w, /wp-content/uploads/2018/05/word-image-3575-300x114.png 300w, /wp-content/uploads/2018/05/word-image-3575-768x292.png 768w, /wp-content/uploads/2018/05/word-image-3575-1024x389.png 1024w" sizes="(max-width: 1188px) 100vw, 1188px" /></p>
<p>
  ②访问测试
</p>
<p><img loading="lazy" decoding="async" width="998" height="465" src="/wp-content/uploads/2018/05/word-image-3576.png" class="wp-image-4033" srcset="/wp-content/uploads/2018/05/word-image-3576.png 998w, /wp-content/uploads/2018/05/word-image-3576-300x140.png 300w, /wp-content/uploads/2018/05/word-image-3576-768x358.png 768w" sizes="(max-width: 998px) 100vw, 998px" /></p>
<p>
  ③查看效果
</p>
<p><img loading="lazy" decoding="async" width="336" height="365" src="/wp-content/uploads/2018/05/word-image-3577.png" class="wp-image-4034" srcset="/wp-content/uploads/2018/05/word-image-3577.png 336w, /wp-content/uploads/2018/05/word-image-3577-276x300.png 276w" sizes="(max-width: 336px) 100vw, 336px" /></p>
<p>
  ④解释应用中的目录
</p>
<p><img loading="lazy" decoding="async" width="1057" height="362" src="/wp-content/uploads/2018/05/word-image-3578.png" class="wp-image-4035" srcset="/wp-content/uploads/2018/05/word-image-3578.png 1057w, /wp-content/uploads/2018/05/word-image-3578-300x103.png 300w, /wp-content/uploads/2018/05/word-image-3578-768x263.png 768w, /wp-content/uploads/2018/05/word-image-3578-1024x351.png 1024w" sizes="(max-width: 1057px) 100vw, 1057px" /></p>
<p>
  ⑤进入Home解释目录<br />
  
</p>
<p><img loading="lazy" decoding="async" width="883" height="299" src="/wp-content/uploads/2018/05/word-image-3579.png" class="wp-image-4036" srcset="/wp-content/uploads/2018/05/word-image-3579.png 883w, /wp-content/uploads/2018/05/word-image-3579-300x102.png 300w, /wp-content/uploads/2018/05/word-image-3579-768x260.png 768w" sizes="(max-width: 883px) 100vw, 883px" /></p>
<p>
  优化小技巧：
</p>
<ol>
<li>
  解决自己项目中的死链接。如果死链接比较多。会影响到项目的加载速度
</li>
</ol>
<p>
  2、更换磁盘为固态
</p>
<ol>
<li>
  磁盘冗余阵列。买raid卡挂载多块磁盘
</li>
</ol>
<h1>控制器及URL模式</h1>
<h2>3.1、创建控制器</h2>
<h3>3.1.1、控制器的存储方式</h3>
<ol>
<li>
  存储地址
</li>
</ol>
<p>
  应用(application)/模块(Home)/Controller
</p>
<ol>
<li>
  文件命名
</li>
</ol>
<p>
  控制器名称(满足驼峰式规范)+Controller+.class.php
</p>
<h3>3.1.2、控制器的创建规则</h3>
<ol>
<li>
  申明命名空间(按照目录地址规则)
</li>
<li>
  引入TP的控制器的基类
</li>
<li>
  编写自定义的控制器的类
</li>
</ol>
<h3>3.1.3、具体创建控制器</h3>
<p><img loading="lazy" decoding="async" width="1248" height="696" src="/wp-content/uploads/2018/05/word-image-3580.png" class="wp-image-4037" srcset="/wp-content/uploads/2018/05/word-image-3580.png 1248w, /wp-content/uploads/2018/05/word-image-3580-300x167.png 300w, /wp-content/uploads/2018/05/word-image-3580-768x428.png 768w, /wp-content/uploads/2018/05/word-image-3580-1024x571.png 1024w" sizes="(max-width: 1248px) 100vw, 1248px" /></p>
<h2>3.2、URL地址解析</h2>
<p>
  默认情况下TP访问的完整地址：<a href="/goto/hd8t" rel="nofollow">http://域名/入口文件?m=模块名称&amp;c=控制器名称&amp;a=方法名称(操作)</a>
</p>
<p>
  ①在控制器中增加方法
</p>
<p><img loading="lazy" decoding="async" width="1163" height="563" src="/wp-content/uploads/2018/05/word-image-3581.png" class="wp-image-4038" srcset="/wp-content/uploads/2018/05/word-image-3581.png 1163w, /wp-content/uploads/2018/05/word-image-3581-300x145.png 300w, /wp-content/uploads/2018/05/word-image-3581-768x372.png 768w, /wp-content/uploads/2018/05/word-image-3581-1024x496.png 1024w" sizes="(max-width: 1163px) 100vw, 1163px" /></p>
<p>
  ②访问测试
</p>
<p><img loading="lazy" decoding="async" width="862" height="277" src="/wp-content/uploads/2018/05/word-image-3582.png" class="wp-image-4039" srcset="/wp-content/uploads/2018/05/word-image-3582.png 862w, /wp-content/uploads/2018/05/word-image-3582-300x96.png 300w, /wp-content/uploads/2018/05/word-image-3582-768x247.png 768w" sizes="(max-width: 862px) 100vw, 862px" /></p>
<h2>3.3、默认访问(理解)</h2>
<h3>3.3.1、分析默认访问的情况</h3>
<p><img loading="lazy" decoding="async" width="1011" height="481" src="/wp-content/uploads/2018/05/word-image-3583.png" class="wp-image-4040" srcset="/wp-content/uploads/2018/05/word-image-3583.png 1011w, /wp-content/uploads/2018/05/word-image-3583-300x143.png 300w, /wp-content/uploads/2018/05/word-image-3583-768x365.png 768w" sizes="(max-width: 1011px) 100vw, 1011px" /></p>
<p>
  对于上述直接访问首先Apache的默认访问页为index.php因此就进入到项目的入口文件。由于TP默认的配置项设置默认的模块为Home默认的控制器为Index默认的方法为index因此可以看到上述效果
</p>
<h3>3.3.2、修改默认访问</h3>
<p>
  ①查看TP中的默认配置项
</p>
<p><img loading="lazy" decoding="async" width="1018" height="410" src="/wp-content/uploads/2018/05/word-image-3584.png" class="wp-image-4041" srcset="/wp-content/uploads/2018/05/word-image-3584.png 1018w, /wp-content/uploads/2018/05/word-image-3584-300x121.png 300w, /wp-content/uploads/2018/05/word-image-3584-768x309.png 768w" sizes="(max-width: 1018px) 100vw, 1018px" /></p>
<p>
  ②修改配置项
</p>
<p><img loading="lazy" decoding="async" width="1024" height="385" src="/wp-content/uploads/2018/05/word-image-3585.png" class="wp-image-4042" srcset="/wp-content/uploads/2018/05/word-image-3585.png 1024w, /wp-content/uploads/2018/05/word-image-3585-300x113.png 300w, /wp-content/uploads/2018/05/word-image-3585-768x289.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /></p>
<p>
  ③删除缓存文件
</p>
<p><img loading="lazy" decoding="async" width="843" height="267" src="/wp-content/uploads/2018/05/word-image-3586.png" class="wp-image-4043" srcset="/wp-content/uploads/2018/05/word-image-3586.png 843w, /wp-content/uploads/2018/05/word-image-3586-300x95.png 300w, /wp-content/uploads/2018/05/word-image-3586-768x243.png 768w" sizes="(max-width: 843px) 100vw, 843px" /></p>
<p>
  ④查看效果如下
</p>
<p><img loading="lazy" decoding="async" width="866" height="349" src="/wp-content/uploads/2018/05/word-image-3587.png" class="wp-image-4044" srcset="/wp-content/uploads/2018/05/word-image-3587.png 866w, /wp-content/uploads/2018/05/word-image-3587-300x121.png 300w, /wp-content/uploads/2018/05/word-image-3587-768x310.png 768w" sizes="(max-width: 866px) 100vw, 866px" /></p>
<p>
  此时产生报错的原因是因为默认的方法不存在
</p>
<h2>3.4、调试模式</h2>
<p>
  通过定义一个常量操作TP所处的模式。调试默认每次都会自动的加载最新的配置文件以及公共函数。跟调试模式对应的叫做生产模式
</p>
<p>
  在实际开发的过程中开启调试模式。当项目上线运行的过程中需要使用生产模式。在生成模式下会缓存(临时存储信息)对于的文件信息也会减少日志文件的生成
</p>
<p>
  ①开启调试模式
</p>
<p><img loading="lazy" decoding="async" width="976" height="522" src="/wp-content/uploads/2018/05/word-image-3588.png" class="wp-image-4045" srcset="/wp-content/uploads/2018/05/word-image-3588.png 976w, /wp-content/uploads/2018/05/word-image-3588-300x160.png 300w, /wp-content/uploads/2018/05/word-image-3588-768x411.png 768w" sizes="(max-width: 976px) 100vw, 976px" /></p>
<p>
  ②查看访问效果
</p>
<p><img loading="lazy" decoding="async" width="1277" height="567" src="/wp-content/uploads/2018/05/word-image-3589.png" class="wp-image-4046" srcset="/wp-content/uploads/2018/05/word-image-3589.png 1277w, /wp-content/uploads/2018/05/word-image-3589-300x133.png 300w, /wp-content/uploads/2018/05/word-image-3589-768x341.png 768w, /wp-content/uploads/2018/05/word-image-3589-1024x455.png 1024w" sizes="(max-width: 1277px) 100vw, 1277px" /></p>
<p>
  ③查看runtime下的目录
</p>
<p><img loading="lazy" decoding="async" width="896" height="364" src="/wp-content/uploads/2018/05/word-image-3590.png" class="wp-image-4047" srcset="/wp-content/uploads/2018/05/word-image-3590.png 896w, /wp-content/uploads/2018/05/word-image-3590-300x122.png 300w, /wp-content/uploads/2018/05/word-image-3590-768x312.png 768w" sizes="(max-width: 896px) 100vw, 896px" /></p>
<h2>3.5、TP中的模块</h2>
<p>
  在TP中的应用目录下每一个文件就是一个模块只是Common跟Runtime比较特殊。不能参与项目中其他”访问功能业务”。想要增加模块可以直接在应用目录下去增加目录即可
</p>
<p>
  例如如下增加后台模块
</p>
<p>
  ①创建目录
</p>
<p><img loading="lazy" decoding="async" width="912" height="241" src="/wp-content/uploads/2018/05/word-image-3591.png" class="wp-image-4048" srcset="/wp-content/uploads/2018/05/word-image-3591.png 912w, /wp-content/uploads/2018/05/word-image-3591-300x79.png 300w, /wp-content/uploads/2018/05/word-image-3591-768x203.png 768w" sizes="(max-width: 912px) 100vw, 912px" /></p>
<p>
  ②创建控制器
</p>
<p><img loading="lazy" decoding="async" width="1022" height="659" src="/wp-content/uploads/2018/05/word-image-3592.png" class="wp-image-4049" srcset="/wp-content/uploads/2018/05/word-image-3592.png 1022w, /wp-content/uploads/2018/05/word-image-3592-300x193.png 300w, /wp-content/uploads/2018/05/word-image-3592-768x495.png 768w" sizes="(max-width: 1022px) 100vw, 1022px" /></p>
<p>
  ③访问测试
</p>
<p><img loading="lazy" decoding="async" width="682" height="226" src="/wp-content/uploads/2018/05/word-image-3593.png" class="wp-image-4050" srcset="/wp-content/uploads/2018/05/word-image-3593.png 682w, /wp-content/uploads/2018/05/word-image-3593-300x99.png 300w" sizes="(max-width: 682px) 100vw, 682px" /></p>
<h2>3.6、TP中的配置文件</h2>
<h3>3.6.1、配置文件地址</h3>
<ol>
<li>
  Tp框架中惯例配置文件(ThinkPHP\Conf\convention.php)
</li>
<li>
  公共模块的配置文件(Application\Common\Conf\config.php)
</li>
<li>
  某一个模块的配置文件(Application\模块\Conf\config.php)
</li>
</ol>
<p>
  对于配置文件TP是自动载入的。因此可以在项目中直接使用配置文件
</p>
<h3>3.6.2、TP中配置文件的优先级</h3>
<p>
  配置文件优先级含义：当同一个配置项在三个文件中同时出现最终使用哪一个配置文件中的内容
</p>
<p>
  模块配置文件&gt;公共模块配置文件&gt;TP惯例配置文件
</p>
<h3>3.6.3、演示配置文件优先级</h3>
<p>
  ①修改公共模块的配置文件
</p>
<p><img loading="lazy" decoding="async" width="1279" height="336" src="/wp-content/uploads/2018/05/word-image-3594.png" class="wp-image-4051" srcset="/wp-content/uploads/2018/05/word-image-3594.png 1279w, /wp-content/uploads/2018/05/word-image-3594-300x79.png 300w, /wp-content/uploads/2018/05/word-image-3594-768x202.png 768w, /wp-content/uploads/2018/05/word-image-3594-1024x269.png 1024w" sizes="(max-width: 1279px) 100vw, 1279px" /></p>
<p>
  ②修改Home模块下的配置
</p>
<p><img loading="lazy" decoding="async" width="970" height="343" src="/wp-content/uploads/2018/05/word-image-3595.png" class="wp-image-4052" srcset="/wp-content/uploads/2018/05/word-image-3595.png 970w, /wp-content/uploads/2018/05/word-image-3595-300x106.png 300w, /wp-content/uploads/2018/05/word-image-3595-768x272.png 768w" sizes="(max-width: 970px) 100vw, 970px" /></p>
<p>
  ③增加测试方法
</p>
<p><img loading="lazy" decoding="async" width="913" height="452" src="/wp-content/uploads/2018/05/word-image-3596.png" class="wp-image-4053" srcset="/wp-content/uploads/2018/05/word-image-3596.png 913w, /wp-content/uploads/2018/05/word-image-3596-300x149.png 300w, /wp-content/uploads/2018/05/word-image-3596-768x380.png 768w" sizes="(max-width: 913px) 100vw, 913px" /></p>
<p>
  ④查看效果
</p>
<p><img loading="lazy" decoding="async" width="565" height="251" src="/wp-content/uploads/2018/05/word-image-3597.png" class="wp-image-4054" srcset="/wp-content/uploads/2018/05/word-image-3597.png 565w, /wp-content/uploads/2018/05/word-image-3597-300x133.png 300w" sizes="(max-width: 565px) 100vw, 565px" /></p>
<h2>3.7、TP中的四种URL模式（重点）</h2>
<h3>3.7.1、四种URL模式介绍</h3>
<p>
  ①普通模式
</p>
<p>
  直接通过给入口文件传递m、c、a三个参数
</p>
<p>
  m对应模块名称
</p>
<p>
  c对应控制器名称
</p>
<p>
  a对应方法名称
</p>
<p>
  格式：<a href="/goto/zx7y" rel="nofollow">http://tp.com/index.php?m=Home&amp;c=Index&amp;a=test2</a>
</p>
<p>
  任何情况下都可以访问
</p>
<p>
  ②pathinfo模式
</p>
<p>
  Pathinfo模式从URL地址栏上看上去像一个目录的格式。
</p>
<p>
  格式为：<a href="/goto/itit" rel="nofollow">http://tp.com/index.php/Home/Index/test2</a>
</p>
<p>
  对于上述的地址格式入口文件后的每一个“/”分隔的就是一个参数
</p>
<p>
  Home(第一个参数)对应的模块名称
</p>
<p>
  Index(第二个参数)对应的控制器名称
</p>
<p>
  Test2(第三个参数)对应的方法名称
</p>
<p>
  注意：pathinfo模式需要有web服务器的支持 Apache支持此模式。Nginx就不支持
</p>
<p>
  ③重写模式
</p>
<p>
  将原本的URL访问改写成其他的URL形式。重写模式根据不同的web服务器决定。最常见的重写就是隐藏项目的入口文件
</p>
<p>
  例如
</p>
<p>
  访问:http://tp.com/Home/Index/test2=&gt;解析的地址为http://tp.com、index.php/Home/Index/test2
</p>
<p>
  ④兼容模式
</p>
<p>
  考虑部分web服务器不支持pathinfo。又想要去使用类似pathinfo的格式。就可以使用兼容模式
</p>
<p>
  格式：<a href="/goto/dc8y" rel="nofollow">http://tp.com/index.php?s=/Home/Index/test2</a>
</p>
<p>
  兼容模式没有任何其他的外界要求
</p>
<h3>3.7.2、实现隐藏入口文件</h3>
<p>
  ①开启Apache的重写模块
</p>
<p><img loading="lazy" decoding="async" width="1012" height="473" src="/wp-content/uploads/2018/05/word-image-3598.png" class="wp-image-4055" srcset="/wp-content/uploads/2018/05/word-image-3598.png 1012w, /wp-content/uploads/2018/05/word-image-3598-300x140.png 300w, /wp-content/uploads/2018/05/word-image-3598-768x359.png 768w" sizes="(max-width: 1012px) 100vw, 1012px" /></p>
<p>
  ②设置虚拟主机可以重写
</p>
<p><img loading="lazy" decoding="async" width="1126" height="545" src="/wp-content/uploads/2018/05/word-image-3599.png" class="wp-image-4056" srcset="/wp-content/uploads/2018/05/word-image-3599.png 1126w, /wp-content/uploads/2018/05/word-image-3599-300x145.png 300w, /wp-content/uploads/2018/05/word-image-3599-768x372.png 768w, /wp-content/uploads/2018/05/word-image-3599-1024x496.png 1024w" sizes="(max-width: 1126px) 100vw, 1126px" /></p>
<p>
  ③拷贝重写规则文件
</p>
<p><img loading="lazy" decoding="async" width="1172" height="491" src="/wp-content/uploads/2018/05/word-image-3600.png" class="wp-image-4057" srcset="/wp-content/uploads/2018/05/word-image-3600.png 1172w, /wp-content/uploads/2018/05/word-image-3600-300x126.png 300w, /wp-content/uploads/2018/05/word-image-3600-768x322.png 768w, /wp-content/uploads/2018/05/word-image-3600-1024x429.png 1024w" sizes="(max-width: 1172px) 100vw, 1172px" /></p>
<p>
  ④重启Apache查看效果
</p>
<p><img loading="lazy" decoding="async" width="544" height="125" src="/wp-content/uploads/2018/05/word-image-3601.png" class="wp-image-4058" srcset="/wp-content/uploads/2018/05/word-image-3601.png 544w, /wp-content/uploads/2018/05/word-image-3601-300x69.png 300w" sizes="(max-width: 544px) 100vw, 544px" /></p>
<p>
  注意：只要条件满足TP中的四种URL模式都可以使用访问到方法
</p>
<h3>3.7.3、URL地址生成(重点会用)</h3>
<p>
  使用TP提供的U函数根据当前的模型、控制器、方法、参数等生产一个链接地址
</p>
<p>
  ①查看U函数的使用方式
</p>
<p><img loading="lazy" decoding="async" width="1157" height="639" src="/wp-content/uploads/2018/05/word-image-3602.png" class="wp-image-4059" srcset="/wp-content/uploads/2018/05/word-image-3602.png 1157w, /wp-content/uploads/2018/05/word-image-3602-300x166.png 300w, /wp-content/uploads/2018/05/word-image-3602-768x424.png 768w, /wp-content/uploads/2018/05/word-image-3602-1024x566.png 1024w" sizes="(max-width: 1157px) 100vw, 1157px" /></p>
<p>
  ②编写测试代码
</p>
<p><img loading="lazy" decoding="async" width="1097" height="695" src="/wp-content/uploads/2018/05/word-image-3603.png" class="wp-image-4060" srcset="/wp-content/uploads/2018/05/word-image-3603.png 1097w, /wp-content/uploads/2018/05/word-image-3603-300x190.png 300w, /wp-content/uploads/2018/05/word-image-3603-768x487.png 768w, /wp-content/uploads/2018/05/word-image-3603-1024x649.png 1024w" sizes="(max-width: 1097px) 100vw, 1097px" /></p>
<p>
  ④查看效果
</p>
<p><img loading="lazy" decoding="async" width="964" height="449" src="/wp-content/uploads/2018/05/word-image-3604.png" class="wp-image-4061" srcset="/wp-content/uploads/2018/05/word-image-3604.png 964w, /wp-content/uploads/2018/05/word-image-3604-300x140.png 300w, /wp-content/uploads/2018/05/word-image-3604-768x358.png 768w" sizes="(max-width: 964px) 100vw, 964px" /></p>
<p>
  从上述结果中可以得知TP默认的是使用pathinfo模式
</p>
<p>
  在TP的配置文件中有一个URL_MODEL控制使用的URL模式
</p>
<p>
  ⑤查看惯例配置中的配置项
</p>
<p><img loading="lazy" decoding="async" width="1149" height="440" src="/wp-content/uploads/2018/05/word-image-3605.png" class="wp-image-4062" srcset="/wp-content/uploads/2018/05/word-image-3605.png 1149w, /wp-content/uploads/2018/05/word-image-3605-300x115.png 300w, /wp-content/uploads/2018/05/word-image-3605-768x294.png 768w, /wp-content/uploads/2018/05/word-image-3605-1024x392.png 1024w" sizes="(max-width: 1149px) 100vw, 1149px" /></p>
<p>
  ⑥查看普通模式的地址
</p>
<p>
  修改URL模式
</p>
<p><img loading="lazy" decoding="async" width="862" height="389" src="/wp-content/uploads/2018/05/word-image-3606.png" class="wp-image-4063" srcset="/wp-content/uploads/2018/05/word-image-3606.png 862w, /wp-content/uploads/2018/05/word-image-3606-300x135.png 300w, /wp-content/uploads/2018/05/word-image-3606-768x347.png 768w" sizes="(max-width: 862px) 100vw, 862px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="864" height="347" src="/wp-content/uploads/2018/05/word-image-3607.png" class="wp-image-4064" srcset="/wp-content/uploads/2018/05/word-image-3607.png 864w, /wp-content/uploads/2018/05/word-image-3607-300x120.png 300w, /wp-content/uploads/2018/05/word-image-3607-768x308.png 768w" sizes="(max-width: 864px) 100vw, 864px" /></p>
<p>
  ⑦查看重写模式地址
</p>
<p><img loading="lazy" decoding="async" width="1102" height="447" src="/wp-content/uploads/2018/05/word-image-3608.png" class="wp-image-4065" srcset="/wp-content/uploads/2018/05/word-image-3608.png 1102w, /wp-content/uploads/2018/05/word-image-3608-300x122.png 300w, /wp-content/uploads/2018/05/word-image-3608-768x312.png 768w, /wp-content/uploads/2018/05/word-image-3608-1024x415.png 1024w" sizes="(max-width: 1102px) 100vw, 1102px" /></p>
<p>
  结果如下
</p>
<p><img loading="lazy" decoding="async" width="786" height="339" src="/wp-content/uploads/2018/05/word-image-3609.png" class="wp-image-4066" srcset="/wp-content/uploads/2018/05/word-image-3609.png 786w, /wp-content/uploads/2018/05/word-image-3609-300x129.png 300w, /wp-content/uploads/2018/05/word-image-3609-768x331.png 768w" sizes="(max-width: 786px) 100vw, 786px" /></p>
<p>
  ⑧查看兼容模式
</p>
<p><img loading="lazy" decoding="async" width="1063" height="379" src="/wp-content/uploads/2018/05/word-image-3610.png" class="wp-image-4067" srcset="/wp-content/uploads/2018/05/word-image-3610.png 1063w, /wp-content/uploads/2018/05/word-image-3610-300x107.png 300w, /wp-content/uploads/2018/05/word-image-3610-768x274.png 768w, /wp-content/uploads/2018/05/word-image-3610-1024x365.png 1024w" sizes="(max-width: 1063px) 100vw, 1063px" /><br />
<img loading="lazy" decoding="async" width="804" height="375" src="/wp-content/uploads/2018/05/word-image-3611.png" class="wp-image-4068" srcset="/wp-content/uploads/2018/05/word-image-3611.png 804w, /wp-content/uploads/2018/05/word-image-3611-300x140.png 300w, /wp-content/uploads/2018/05/word-image-3611-768x358.png 768w" sizes="(max-width: 804px) 100vw, 804px" /></p>
<p>
  注意：TP中的四种URL模式并不是限制项目需要使用哪一种模式进行访问。URL_MODEL配置项的作用是为了控制U函数所生成的URL地址的格式
</p>
<h2>3.8、页面跳转与重定向</h2>
<p>
  关于页面跳转跟重定向功能是经常使用。常见位置在数据操作完成之后的提示信息
</p>
<h3>3.8.1、页面跳转</h3>
<p>
  在TP的控制器基类中提供了两个方法可以实现跳转功能分别为success跟error
</p>
<p>
  ①查看源码位置
</p>
<p><img loading="lazy" decoding="async" width="1087" height="695" src="/wp-content/uploads/2018/05/word-image-3612.png" class="wp-image-4069" srcset="/wp-content/uploads/2018/05/word-image-3612.png 1087w, /wp-content/uploads/2018/05/word-image-3612-300x192.png 300w, /wp-content/uploads/2018/05/word-image-3612-768x491.png 768w, /wp-content/uploads/2018/05/word-image-3612-1024x655.png 1024w" sizes="(max-width: 1087px) 100vw, 1087px" /></p>
<p>
  ②测试成功的方法使用
</p>
<p><img loading="lazy" decoding="async" width="1029" height="505" src="/wp-content/uploads/2018/05/word-image-3613.png" class="wp-image-4070" srcset="/wp-content/uploads/2018/05/word-image-3613.png 1029w, /wp-content/uploads/2018/05/word-image-3613-300x147.png 300w, /wp-content/uploads/2018/05/word-image-3613-768x377.png 768w, /wp-content/uploads/2018/05/word-image-3613-1024x503.png 1024w" sizes="(max-width: 1029px) 100vw, 1029px" /></p>
<p>
  ③测试失败的方法的使用
</p>
<p><img loading="lazy" decoding="async" width="1017" height="482" src="/wp-content/uploads/2018/05/word-image-3614.png" class="wp-image-4071" srcset="/wp-content/uploads/2018/05/word-image-3614.png 1017w, /wp-content/uploads/2018/05/word-image-3614-300x142.png 300w, /wp-content/uploads/2018/05/word-image-3614-768x364.png 768w" sizes="(max-width: 1017px) 100vw, 1017px" /></p>
<p>
  ④关于成功失败跳转的模板文件地址
</p>
<p><img loading="lazy" decoding="async" width="1289" height="643" src="/wp-content/uploads/2018/05/word-image-3615.png" class="wp-image-4072" srcset="/wp-content/uploads/2018/05/word-image-3615.png 1289w, /wp-content/uploads/2018/05/word-image-3615-300x150.png 300w, /wp-content/uploads/2018/05/word-image-3615-768x383.png 768w, /wp-content/uploads/2018/05/word-image-3615-1024x511.png 1024w" sizes="(max-width: 1289px) 100vw, 1289px" /></p>
<h3>3.8.2、页面重定向</h3>
<p>
  ①查看使用方式
</p>
<p><img loading="lazy" decoding="async" width="1098" height="682" src="/wp-content/uploads/2018/05/word-image-3616.png" class="wp-image-4073" srcset="/wp-content/uploads/2018/05/word-image-3616.png 1098w, /wp-content/uploads/2018/05/word-image-3616-300x186.png 300w, /wp-content/uploads/2018/05/word-image-3616-768x477.png 768w, /wp-content/uploads/2018/05/word-image-3616-1024x636.png 1024w" sizes="(max-width: 1098px) 100vw, 1098px" /></p>
<p>
  ②创建方法测试
</p>
<p><img loading="lazy" decoding="async" width="1095" height="545" src="/wp-content/uploads/2018/05/word-image-3617.png" class="wp-image-4074" srcset="/wp-content/uploads/2018/05/word-image-3617.png 1095w, /wp-content/uploads/2018/05/word-image-3617-300x149.png 300w, /wp-content/uploads/2018/05/word-image-3617-768x382.png 768w, /wp-content/uploads/2018/05/word-image-3617-1024x510.png 1024w" sizes="(max-width: 1095px) 100vw, 1095px" /></p>
<p>
  ③查看效果
</p>
<p><img loading="lazy" decoding="async" width="679" height="241" src="/wp-content/uploads/2018/05/word-image-3618.png" class="wp-image-4075" srcset="/wp-content/uploads/2018/05/word-image-3618.png 679w, /wp-content/uploads/2018/05/word-image-3618-300x106.png 300w" sizes="(max-width: 679px) 100vw, 679px" /></p>
<h2>3.9、空控制器与空操作</h2>
<h3>3.9.1、空操作</h3>
<p>
  当用户访问某一个不存在的方法时接下来由单独的一个空操作(对应在控制中的_empty的方法)实现处理请求。
</p>
<p>
  ①增加方法
</p>
<p><img loading="lazy" decoding="async" width="839" height="468" src="/wp-content/uploads/2018/05/word-image-3619.png" class="wp-image-4076" srcset="/wp-content/uploads/2018/05/word-image-3619.png 839w, /wp-content/uploads/2018/05/word-image-3619-300x167.png 300w, /wp-content/uploads/2018/05/word-image-3619-768x428.png 768w" sizes="(max-width: 839px) 100vw, 839px" /></p>
<p>
  ②访问测试
</p>
<p><img loading="lazy" decoding="async" width="1032" height="363" src="/wp-content/uploads/2018/05/word-image-3620.png" class="wp-image-4077" srcset="/wp-content/uploads/2018/05/word-image-3620.png 1032w, /wp-content/uploads/2018/05/word-image-3620-300x106.png 300w, /wp-content/uploads/2018/05/word-image-3620-768x270.png 768w, /wp-content/uploads/2018/05/word-image-3620-1024x360.png 1024w" sizes="(max-width: 1032px) 100vw, 1032px" /></p>
<h3>3.9.2、空控制器</h3>
<p>
  当用户访问一个不存在的控制器时会自动的去执行空控制下对应的方法。
</p>
<p>
  ①先创建空控制器
</p>
<p><img loading="lazy" decoding="async" width="858" height="481" src="/wp-content/uploads/2018/05/word-image-3621.png" class="wp-image-4078" srcset="/wp-content/uploads/2018/05/word-image-3621.png 858w, /wp-content/uploads/2018/05/word-image-3621-300x168.png 300w, /wp-content/uploads/2018/05/word-image-3621-768x431.png 768w" sizes="(max-width: 858px) 100vw, 858px" /></p>
<p>
  ②执行查看效果
</p>
<p><img loading="lazy" decoding="async" width="1094" height="461" src="/wp-content/uploads/2018/05/word-image-3622.png" class="wp-image-4079" srcset="/wp-content/uploads/2018/05/word-image-3622.png 1094w, /wp-content/uploads/2018/05/word-image-3622-300x126.png 300w, /wp-content/uploads/2018/05/word-image-3622-768x324.png 768w, /wp-content/uploads/2018/05/word-image-3622-1024x432.png 1024w" sizes="(max-width: 1094px) 100vw, 1094px" /></p>
<p>
  ③在空控制器中创建空方法
</p>
<p><img loading="lazy" decoding="async" width="936" height="648" src="/wp-content/uploads/2018/05/word-image-3623.png" class="wp-image-4080" srcset="/wp-content/uploads/2018/05/word-image-3623.png 936w, /wp-content/uploads/2018/05/word-image-3623-300x208.png 300w, /wp-content/uploads/2018/05/word-image-3623-768x532.png 768w" sizes="(max-width: 936px) 100vw, 936px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="694" height="184" src="/wp-content/uploads/2018/05/word-image-3624.png" class="wp-image-4081" srcset="/wp-content/uploads/2018/05/word-image-3624.png 694w, /wp-content/uploads/2018/05/word-image-3624-300x80.png 300w" sizes="(max-width: 694px) 100vw, 694px" /></p>
<p>
  备注：最好事先错误的提示页面通过使用web服务器的错误提示设置
</p>
<h1>视图(一)</h1>
<h2>4.1、视图创建规则</h2>
<h3>4.1.1、视图创建规则</h3>
<ol>
<li>
  默认情况下需要将视图的模板文件存储在模块下的view目录中
</li>
<li>
  默认情况下视图存储需要在View下跟控制器同名的目录中
</li>
<li>
  默认情况下视图模板文件名称需要保持跟方法同名后缀为.html的模板
</li>
</ol>
<h3>4.1.2、创建视图</h3>
<p>
  ①创建根控制器同名的目录
</p>
<p><img loading="lazy" decoding="async" width="997" height="187" src="/wp-content/uploads/2018/05/word-image-3625.png" class="wp-image-4082" srcset="/wp-content/uploads/2018/05/word-image-3625.png 997w, /wp-content/uploads/2018/05/word-image-3625-300x56.png 300w, /wp-content/uploads/2018/05/word-image-3625-768x144.png 768w" sizes="(max-width: 997px) 100vw, 997px" /></p>
<p>
  ②创建模板
</p>
<p><img loading="lazy" decoding="async" width="918" height="476" src="/wp-content/uploads/2018/05/word-image-3626.png" class="wp-image-4083" srcset="/wp-content/uploads/2018/05/word-image-3626.png 918w, /wp-content/uploads/2018/05/word-image-3626-300x156.png 300w, /wp-content/uploads/2018/05/word-image-3626-768x398.png 768w" sizes="(max-width: 918px) 100vw, 918px" /></p>
<h2>4.2、控制器调用视图</h2>
<p>
  对于在TP的方法中需要使用视图的模板可以使用两个方法分别为display跟fetch方法。
</p>
<p>
  对于display跟fetch用法一模一样，区别在于display会直接输出模板的结果。Fetch不会直接输出
</p>
<h3>4.2.1、演示display跟fetch的区别</h3>
<p>
  ①创建方法
</p>
<p><img loading="lazy" decoding="async" width="1061" height="596" src="/wp-content/uploads/2018/05/word-image-3627.png" class="wp-image-4084" srcset="/wp-content/uploads/2018/05/word-image-3627.png 1061w, /wp-content/uploads/2018/05/word-image-3627-300x169.png 300w, /wp-content/uploads/2018/05/word-image-3627-768x431.png 768w, /wp-content/uploads/2018/05/word-image-3627-1024x575.png 1024w" sizes="(max-width: 1061px) 100vw, 1061px" /></p>
<p>
  ②查看效果
</p>
<p><img loading="lazy" decoding="async" width="764" height="167" src="/wp-content/uploads/2018/05/word-image-3628.png" class="wp-image-4085" srcset="/wp-content/uploads/2018/05/word-image-3628.png 764w, /wp-content/uploads/2018/05/word-image-3628-300x66.png 300w" sizes="(max-width: 764px) 100vw, 764px" /><br />
<img loading="lazy" decoding="async" width="708" height="259" src="/wp-content/uploads/2018/05/word-image-3629.png" class="wp-image-4086" srcset="/wp-content/uploads/2018/05/word-image-3629.png 708w, /wp-content/uploads/2018/05/word-image-3629-300x110.png 300w" sizes="(max-width: 708px) 100vw, 708px" /></p>
<p>
  修改showtwo方法
</p>
<p><img loading="lazy" decoding="async" width="946" height="587" src="/wp-content/uploads/2018/05/word-image-3630.png" class="wp-image-4087" srcset="/wp-content/uploads/2018/05/word-image-3630.png 946w, /wp-content/uploads/2018/05/word-image-3630-300x186.png 300w, /wp-content/uploads/2018/05/word-image-3630-768x477.png 768w" sizes="(max-width: 946px) 100vw, 946px" /></p>
<p>
  结果如下
</p>
<p><img loading="lazy" decoding="async" width="740" height="323" src="/wp-content/uploads/2018/05/word-image-3631.png" class="wp-image-4088" srcset="/wp-content/uploads/2018/05/word-image-3631.png 740w, /wp-content/uploads/2018/05/word-image-3631-300x131.png 300w" sizes="(max-width: 740px) 100vw, 740px" /></p>
<h3>4.2.2、演示display用法</h3>
<p>
  ①查看使用方式
</p>
<p><img loading="lazy" decoding="async" width="848" height="390" src="/wp-content/uploads/2018/05/word-image-3632.png" class="wp-image-4089" srcset="/wp-content/uploads/2018/05/word-image-3632.png 848w, /wp-content/uploads/2018/05/word-image-3632-300x138.png 300w, /wp-content/uploads/2018/05/word-image-3632-768x353.png 768w" sizes="(max-width: 848px) 100vw, 848px" /></p>
<p>
  ②指定模块方式使用display
</p>
<p>
  创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="898" height="626" src="/wp-content/uploads/2018/05/word-image-3633.png" class="wp-image-4090" srcset="/wp-content/uploads/2018/05/word-image-3633.png 898w, /wp-content/uploads/2018/05/word-image-3633-300x209.png 300w, /wp-content/uploads/2018/05/word-image-3633-768x535.png 768w" sizes="(max-width: 898px) 100vw, 898px" /></p>
<p>
  查看效果
</p>
<p><img loading="lazy" decoding="async" width="654" height="179" src="/wp-content/uploads/2018/05/word-image-3634.png" class="wp-image-4091" srcset="/wp-content/uploads/2018/05/word-image-3634.png 654w, /wp-content/uploads/2018/05/word-image-3634-300x82.png 300w" sizes="(max-width: 654px) 100vw, 654px" /><br />
<img loading="lazy" decoding="async" width="633" height="135" src="/wp-content/uploads/2018/05/word-image-3635.png" class="wp-image-4092" srcset="/wp-content/uploads/2018/05/word-image-3635.png 633w, /wp-content/uploads/2018/05/word-image-3635-300x64.png 300w" sizes="(max-width: 633px) 100vw, 633px" /></p>
<p>
  ③直接指定模板文件地址
</p>
<p>
  创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="1058" height="373" src="/wp-content/uploads/2018/05/word-image-3636.png" class="wp-image-4093" srcset="/wp-content/uploads/2018/05/word-image-3636.png 1058w, /wp-content/uploads/2018/05/word-image-3636-300x106.png 300w, /wp-content/uploads/2018/05/word-image-3636-768x271.png 768w, /wp-content/uploads/2018/05/word-image-3636-1024x361.png 1024w" sizes="(max-width: 1058px) 100vw, 1058px" /></p>
<p>
  查看结果
</p>
<p><img loading="lazy" decoding="async" width="764" height="202" src="/wp-content/uploads/2018/05/word-image-3637.png" class="wp-image-4094" srcset="/wp-content/uploads/2018/05/word-image-3637.png 764w, /wp-content/uploads/2018/05/word-image-3637-300x79.png 300w" sizes="(max-width: 764px) 100vw, 764px" /></p>
<h2>4.3、模板替换</h2>
<p>
  模板替换就是通过在模板中使用TP内置的”模板变量”.TP在每次渲染模板之前都会讲对应的模板变量进行替换
</p>
<h3>4.3.1、内置的模板替换</h3>
<p>
  ①查看文档
</p>
<p>
  在TP有内置的模板变量替换如下
</p>
<p><img loading="lazy" decoding="async" width="885" height="277" src="/wp-content/uploads/2018/05/word-image-3638.png" class="wp-image-4095" srcset="/wp-content/uploads/2018/05/word-image-3638.png 885w, /wp-content/uploads/2018/05/word-image-3638-300x94.png 300w, /wp-content/uploads/2018/05/word-image-3638-768x240.png 768w" sizes="(max-width: 885px) 100vw, 885px" /></p>
<p>
  ②修改show模板查看效果
</p>
<p><img loading="lazy" decoding="async" width="1080" height="675" src="/wp-content/uploads/2018/05/word-image-3639.png" class="wp-image-4096" srcset="/wp-content/uploads/2018/05/word-image-3639.png 1080w, /wp-content/uploads/2018/05/word-image-3639-300x188.png 300w, /wp-content/uploads/2018/05/word-image-3639-768x480.png 768w, /wp-content/uploads/2018/05/word-image-3639-1024x640.png 1024w" sizes="(max-width: 1080px) 100vw, 1080px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="989" height="425" src="/wp-content/uploads/2018/05/word-image-3640.png" class="wp-image-4097" srcset="/wp-content/uploads/2018/05/word-image-3640.png 989w, /wp-content/uploads/2018/05/word-image-3640-300x129.png 300w, /wp-content/uploads/2018/05/word-image-3640-768x330.png 768w" sizes="(max-width: 989px) 100vw, 989px" /></p>
<p>
  最常使用的是__PUBLIC__替换资源地址
</p>
<h3>4.3.2、自定义模板替换</h3>
<p>
  ①增加自定义配置项
</p>
<p><img loading="lazy" decoding="async" width="987" height="525" src="/wp-content/uploads/2018/05/word-image-3641.png" class="wp-image-4098" srcset="/wp-content/uploads/2018/05/word-image-3641.png 987w, /wp-content/uploads/2018/05/word-image-3641-300x160.png 300w, /wp-content/uploads/2018/05/word-image-3641-768x409.png 768w" sizes="(max-width: 987px) 100vw, 987px" /></p>
<p>
  ②模板中使用
</p>
<p><img loading="lazy" decoding="async" width="1068" height="412" src="/wp-content/uploads/2018/05/word-image-3642.png" class="wp-image-4099" srcset="/wp-content/uploads/2018/05/word-image-3642.png 1068w, /wp-content/uploads/2018/05/word-image-3642-300x116.png 300w, /wp-content/uploads/2018/05/word-image-3642-768x296.png 768w, /wp-content/uploads/2018/05/word-image-3642-1024x395.png 1024w" sizes="(max-width: 1068px) 100vw, 1068px" /></p>
<p>
  ③效果如下
</p>
<p><img loading="lazy" decoding="async" width="869" height="257" src="/wp-content/uploads/2018/05/word-image-3643.png" class="wp-image-4100" srcset="/wp-content/uploads/2018/05/word-image-3643.png 869w, /wp-content/uploads/2018/05/word-image-3643-300x89.png 300w, /wp-content/uploads/2018/05/word-image-3643-768x227.png 768w" sizes="(max-width: 869px) 100vw, 869px" /></p>
<h1>案例-搭建电商项目后台</h1>
<h2>5.1、项目部署</h2>
<h3>5.1.1、创建项目</h3>
<p>
  ①创建项目的根目录
</p>
<p><img loading="lazy" decoding="async" width="987" height="294" src="/wp-content/uploads/2018/05/word-image-3644.png" class="wp-image-4101" srcset="/wp-content/uploads/2018/05/word-image-3644.png 987w, /wp-content/uploads/2018/05/word-image-3644-300x89.png 300w, /wp-content/uploads/2018/05/word-image-3644-768x229.png 768w" sizes="(max-width: 987px) 100vw, 987px" /></p>
<p>
  ②创建wwwroot目录
</p>
<p><img loading="lazy" decoding="async" width="890" height="153" src="/wp-content/uploads/2018/05/word-image-3645.png" class="wp-image-4102" srcset="/wp-content/uploads/2018/05/word-image-3645.png 890w, /wp-content/uploads/2018/05/word-image-3645-300x52.png 300w, /wp-content/uploads/2018/05/word-image-3645-768x132.png 768w" sizes="(max-width: 890px) 100vw, 890px" /></p>
<p>
  ③拷贝TP的框架源代码
</p>
<p><img loading="lazy" decoding="async" width="1159" height="358" src="/wp-content/uploads/2018/05/word-image-3646.png" class="wp-image-4103" srcset="/wp-content/uploads/2018/05/word-image-3646.png 1159w, /wp-content/uploads/2018/05/word-image-3646-300x93.png 300w, /wp-content/uploads/2018/05/word-image-3646-768x237.png 768w, /wp-content/uploads/2018/05/word-image-3646-1024x316.png 1024w" sizes="(max-width: 1159px) 100vw, 1159px" /></p>
<p>
  ④拷贝入口文件及重写规则文件
</p>
<p><img loading="lazy" decoding="async" width="1212" height="376" src="/wp-content/uploads/2018/05/word-image-3647.png" class="wp-image-4104" srcset="/wp-content/uploads/2018/05/word-image-3647.png 1212w, /wp-content/uploads/2018/05/word-image-3647-300x93.png 300w, /wp-content/uploads/2018/05/word-image-3647-768x238.png 768w, /wp-content/uploads/2018/05/word-image-3647-1024x318.png 1024w" sizes="(max-width: 1212px) 100vw, 1212px" /></p>
<h3>5.1.2、配置虚拟主机</h3>
<p>
  ①增加虚拟主机
</p>
<p><img loading="lazy" decoding="async" width="1053" height="449" src="/wp-content/uploads/2018/05/word-image-3648.png" class="wp-image-4105" srcset="/wp-content/uploads/2018/05/word-image-3648.png 1053w, /wp-content/uploads/2018/05/word-image-3648-300x128.png 300w, /wp-content/uploads/2018/05/word-image-3648-768x327.png 768w, /wp-content/uploads/2018/05/word-image-3648-1024x437.png 1024w" sizes="(max-width: 1053px) 100vw, 1053px" /></p>
<p>
  ②修改hosts文件
</p>
<p><img loading="lazy" decoding="async" width="864" height="408" src="/wp-content/uploads/2018/05/word-image-3649.png" class="wp-image-4106" srcset="/wp-content/uploads/2018/05/word-image-3649.png 864w, /wp-content/uploads/2018/05/word-image-3649-300x142.png 300w, /wp-content/uploads/2018/05/word-image-3649-768x363.png 768w" sizes="(max-width: 864px) 100vw, 864px" /></p>
<p>
  ③修改入口文件
</p>
<p><img loading="lazy" decoding="async" width="996" height="553" src="/wp-content/uploads/2018/05/word-image-3650.png" class="wp-image-4107" srcset="/wp-content/uploads/2018/05/word-image-3650.png 996w, /wp-content/uploads/2018/05/word-image-3650-300x167.png 300w, /wp-content/uploads/2018/05/word-image-3650-768x426.png 768w" sizes="(max-width: 996px) 100vw, 996px" /></p>
<p>
  ④重启Apache访问查看
</p>
<p><img loading="lazy" decoding="async" width="978" height="447" src="/wp-content/uploads/2018/05/word-image-3651.png" class="wp-image-4108" srcset="/wp-content/uploads/2018/05/word-image-3651.png 978w, /wp-content/uploads/2018/05/word-image-3651-300x137.png 300w, /wp-content/uploads/2018/05/word-image-3651-768x351.png 768w" sizes="(max-width: 978px) 100vw, 978px" /></p>
<p>
  查看目录结构
</p>
<p><img loading="lazy" decoding="async" width="642" height="366" src="/wp-content/uploads/2018/05/word-image-3652.png" class="wp-image-4109" srcset="/wp-content/uploads/2018/05/word-image-3652.png 642w, /wp-content/uploads/2018/05/word-image-3652-300x171.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></p>
<p>
  对于此方式部署项目由于域名解析的目录下只有入口文件。因此项目的安全性更好
</p>
<h2>5.2、创建后台模块</h2>
<p>
  ①复制Home模块为Admin
</p>
<p><img loading="lazy" decoding="async" width="950" height="253" src="/wp-content/uploads/2018/05/word-image-3653.png" class="wp-image-4110" srcset="/wp-content/uploads/2018/05/word-image-3653.png 950w, /wp-content/uploads/2018/05/word-image-3653-300x80.png 300w, /wp-content/uploads/2018/05/word-image-3653-768x205.png 768w" sizes="(max-width: 950px) 100vw, 950px" /></p>
<p>
  ②修改后台模块下的index控制器
</p>
<p><img loading="lazy" decoding="async" width="1021" height="483" src="/wp-content/uploads/2018/05/word-image-3654.png" class="wp-image-4111" srcset="/wp-content/uploads/2018/05/word-image-3654.png 1021w, /wp-content/uploads/2018/05/word-image-3654-300x142.png 300w, /wp-content/uploads/2018/05/word-image-3654-768x363.png 768w" sizes="(max-width: 1021px) 100vw, 1021px" /></p>
<p>
  ③访问查看
</p>
<p><img loading="lazy" decoding="async" width="1086" height="261" src="/wp-content/uploads/2018/05/word-image-3655.png" class="wp-image-4112" srcset="/wp-content/uploads/2018/05/word-image-3655.png 1086w, /wp-content/uploads/2018/05/word-image-3655-300x72.png 300w, /wp-content/uploads/2018/05/word-image-3655-768x185.png 768w, /wp-content/uploads/2018/05/word-image-3655-1024x246.png 1024w" sizes="(max-width: 1086px) 100vw, 1086px" /></p>
<h2>5.3、处理URL地址</h2>
<h3>5.3.1、隐藏入口文件</h3>
<p>
  ①修改Apache的配置启用重写模式
</p>
<p><img loading="lazy" decoding="async" width="806" height="359" src="/wp-content/uploads/2018/05/word-image-3656.png" class="wp-image-4113" srcset="/wp-content/uploads/2018/05/word-image-3656.png 806w, /wp-content/uploads/2018/05/word-image-3656-300x134.png 300w, /wp-content/uploads/2018/05/word-image-3656-768x342.png 768w" sizes="(max-width: 806px) 100vw, 806px" /></p>
<p>
  ②设置虚拟主机可以重启
</p>
<p><img loading="lazy" decoding="async" width="948" height="486" src="/wp-content/uploads/2018/05/word-image-3657.png" class="wp-image-4114" srcset="/wp-content/uploads/2018/05/word-image-3657.png 948w, /wp-content/uploads/2018/05/word-image-3657-300x154.png 300w, /wp-content/uploads/2018/05/word-image-3657-768x394.png 768w" sizes="(max-width: 948px) 100vw, 948px" /></p>
<p>
  重写规则文件已经拷贝
</p>
<p>
  ③重启Apache访问测试
</p>
<p><img loading="lazy" decoding="async" width="969" height="470" src="/wp-content/uploads/2018/05/word-image-3658.png" class="wp-image-4115" srcset="/wp-content/uploads/2018/05/word-image-3658.png 969w, /wp-content/uploads/2018/05/word-image-3658-300x146.png 300w, /wp-content/uploads/2018/05/word-image-3658-768x373.png 768w" sizes="(max-width: 969px) 100vw, 969px" /></p>
<p>
  ④创建测试方法使用U函数生成
</p>
<p><img loading="lazy" decoding="async" width="929" height="479" src="/wp-content/uploads/2018/05/word-image-3659.png" class="wp-image-4116" srcset="/wp-content/uploads/2018/05/word-image-3659.png 929w, /wp-content/uploads/2018/05/word-image-3659-300x155.png 300w, /wp-content/uploads/2018/05/word-image-3659-768x396.png 768w" sizes="(max-width: 929px) 100vw, 929px" /></p>
<p>
  ⑤访问测试
</p>
<p><img loading="lazy" decoding="async" width="498" height="206" src="/wp-content/uploads/2018/05/word-image-3660.png" class="wp-image-4117" srcset="/wp-content/uploads/2018/05/word-image-3660.png 498w, /wp-content/uploads/2018/05/word-image-3660-300x124.png 300w" sizes="(max-width: 498px) 100vw, 498px" /></p>
<p>
  ⑥设置为重写模式
</p>
<p><img loading="lazy" decoding="async" width="981" height="416" src="/wp-content/uploads/2018/05/word-image-3661.png" class="wp-image-4118" srcset="/wp-content/uploads/2018/05/word-image-3661.png 981w, /wp-content/uploads/2018/05/word-image-3661-300x127.png 300w, /wp-content/uploads/2018/05/word-image-3661-768x326.png 768w" sizes="(max-width: 981px) 100vw, 981px" /></p>
<p>
  再次查看效果
</p>
<p><img loading="lazy" decoding="async" width="517" height="176" src="/wp-content/uploads/2018/05/word-image-3662.png" class="wp-image-4119" srcset="/wp-content/uploads/2018/05/word-image-3662.png 517w, /wp-content/uploads/2018/05/word-image-3662-300x102.png 300w" sizes="(max-width: 517px) 100vw, 517px" /></p>
<h3>5.3.2、隐藏Home模块</h3>
<p>
  ①设置默认的模块以及容许访问的模块
</p>
<p><img loading="lazy" decoding="async" width="967" height="472" src="/wp-content/uploads/2018/05/word-image-3663.png" class="wp-image-4120" srcset="/wp-content/uploads/2018/05/word-image-3663.png 967w, /wp-content/uploads/2018/05/word-image-3663-300x146.png 300w, /wp-content/uploads/2018/05/word-image-3663-768x375.png 768w" sizes="(max-width: 967px) 100vw, 967px" /></p>
<p>
  ②查看效果
</p>
<p><img loading="lazy" decoding="async" width="824" height="209" src="/wp-content/uploads/2018/05/word-image-3664.png" class="wp-image-4121" srcset="/wp-content/uploads/2018/05/word-image-3664.png 824w, /wp-content/uploads/2018/05/word-image-3664-300x76.png 300w, /wp-content/uploads/2018/05/word-image-3664-768x195.png 768w" sizes="(max-width: 824px) 100vw, 824px" /></p>
<h2>5.4、实现后台的首页显示</h2>
<p>
  ①修改Index控制器代码
</p>
<p><img loading="lazy" decoding="async" width="948" height="476" src="/wp-content/uploads/2018/05/word-image-3665.png" class="wp-image-4122" srcset="/wp-content/uploads/2018/05/word-image-3665.png 948w, /wp-content/uploads/2018/05/word-image-3665-300x151.png 300w, /wp-content/uploads/2018/05/word-image-3665-768x386.png 768w" sizes="(max-width: 948px) 100vw, 948px" /></p>
<p>
  ②创建视图目录
</p>
<p><img loading="lazy" decoding="async" width="926" height="210" src="/wp-content/uploads/2018/05/word-image-3666.png" class="wp-image-4123" srcset="/wp-content/uploads/2018/05/word-image-3666.png 926w, /wp-content/uploads/2018/05/word-image-3666-300x68.png 300w, /wp-content/uploads/2018/05/word-image-3666-768x174.png 768w" sizes="(max-width: 926px) 100vw, 926px" /></p>
<p>
  ③拷贝首页模板
</p>
<p><img loading="lazy" decoding="async" width="1287" height="541" src="/wp-content/uploads/2018/05/word-image-3667.png" class="wp-image-4124" srcset="/wp-content/uploads/2018/05/word-image-3667.png 1287w, /wp-content/uploads/2018/05/word-image-3667-300x126.png 300w, /wp-content/uploads/2018/05/word-image-3667-768x323.png 768w, /wp-content/uploads/2018/05/word-image-3667-1024x430.png 1024w" sizes="(max-width: 1287px) 100vw, 1287px" /></p>
<p>
  ④查看效果
</p>
<p><img loading="lazy" decoding="async" width="956" height="399" src="/wp-content/uploads/2018/05/word-image-3668.png" class="wp-image-4125" srcset="/wp-content/uploads/2018/05/word-image-3668.png 956w, /wp-content/uploads/2018/05/word-image-3668-300x125.png 300w, /wp-content/uploads/2018/05/word-image-3668-768x321.png 768w" sizes="(max-width: 956px) 100vw, 956px" /></p>
<p>
  ⑤拷贝其他模板
</p>
<p><img loading="lazy" decoding="async" width="1312" height="517" src="/wp-content/uploads/2018/05/word-image-3669.png" class="wp-image-4126" srcset="/wp-content/uploads/2018/05/word-image-3669.png 1312w, /wp-content/uploads/2018/05/word-image-3669-300x118.png 300w, /wp-content/uploads/2018/05/word-image-3669-768x303.png 768w, /wp-content/uploads/2018/05/word-image-3669-1024x404.png 1024w" sizes="(max-width: 1312px) 100vw, 1312px" /></p>
<p>
  ⑥查看效果
</p>
<p><img loading="lazy" decoding="async" width="1174" height="381" src="/wp-content/uploads/2018/05/word-image-3670.png" class="wp-image-4127" srcset="/wp-content/uploads/2018/05/word-image-3670.png 1174w, /wp-content/uploads/2018/05/word-image-3670-300x97.png 300w, /wp-content/uploads/2018/05/word-image-3670-768x249.png 768w, /wp-content/uploads/2018/05/word-image-3670-1024x332.png 1024w" sizes="(max-width: 1174px) 100vw, 1174px" /><br />
<img loading="lazy" decoding="async" width="782" height="169" src="/wp-content/uploads/2018/05/word-image-3671.png" class="wp-image-4128" srcset="/wp-content/uploads/2018/05/word-image-3671.png 782w, /wp-content/uploads/2018/05/word-image-3671-300x65.png 300w, /wp-content/uploads/2018/05/word-image-3671-768x166.png 768w" sizes="(max-width: 782px) 100vw, 782px" /></p>
<p>
  ⑦修改首页的模板
</p>
<p><img loading="lazy" decoding="async" width="1088" height="610" src="/wp-content/uploads/2018/05/word-image-3672.png" class="wp-image-4129" srcset="/wp-content/uploads/2018/05/word-image-3672.png 1088w, /wp-content/uploads/2018/05/word-image-3672-300x168.png 300w, /wp-content/uploads/2018/05/word-image-3672-768x431.png 768w, /wp-content/uploads/2018/05/word-image-3672-1024x574.png 1024w" sizes="(max-width: 1088px) 100vw, 1088px" /></p>
<h2>5.5、处理后台资源地址</h2>
<p>
  ①拷贝资源文件
</p>
<p><img loading="lazy" decoding="async" width="1318" height="419" src="/wp-content/uploads/2018/05/word-image-3673.png" class="wp-image-4130" srcset="/wp-content/uploads/2018/05/word-image-3673.png 1318w, /wp-content/uploads/2018/05/word-image-3673-300x95.png 300w, /wp-content/uploads/2018/05/word-image-3673-768x244.png 768w, /wp-content/uploads/2018/05/word-image-3673-1024x326.png 1024w" sizes="(max-width: 1318px) 100vw, 1318px" /></p>
<p>
  ②自定义模板替换
</p>
<p><img loading="lazy" decoding="async" width="935" height="534" src="/wp-content/uploads/2018/05/word-image-3674.png" class="wp-image-4131" srcset="/wp-content/uploads/2018/05/word-image-3674.png 935w, /wp-content/uploads/2018/05/word-image-3674-300x171.png 300w, /wp-content/uploads/2018/05/word-image-3674-768x439.png 768w" sizes="(max-width: 935px) 100vw, 935px" /></p>
<p>
  ③修改top模板
</p>
<p><img loading="lazy" decoding="async" width="1073" height="453" src="/wp-content/uploads/2018/05/word-image-3675.png" class="wp-image-4132" srcset="/wp-content/uploads/2018/05/word-image-3675.png 1073w, /wp-content/uploads/2018/05/word-image-3675-300x127.png 300w, /wp-content/uploads/2018/05/word-image-3675-768x324.png 768w, /wp-content/uploads/2018/05/word-image-3675-1024x432.png 1024w" sizes="(max-width: 1073px) 100vw, 1073px" /></p>
<p>
  ④修改menu模板
</p>
<p><img loading="lazy" decoding="async" width="1079" height="491" src="/wp-content/uploads/2018/05/word-image-3676.png" class="wp-image-4133" srcset="/wp-content/uploads/2018/05/word-image-3676.png 1079w, /wp-content/uploads/2018/05/word-image-3676-300x137.png 300w, /wp-content/uploads/2018/05/word-image-3676-768x349.png 768w, /wp-content/uploads/2018/05/word-image-3676-1024x466.png 1024w" sizes="(max-width: 1079px) 100vw, 1079px" /></p>
<p>
  ⑤修改main模板
</p>
<p><img loading="lazy" decoding="async" width="1076" height="525" src="/wp-content/uploads/2018/05/word-image-3677.png" class="wp-image-4134" srcset="/wp-content/uploads/2018/05/word-image-3677.png 1076w, /wp-content/uploads/2018/05/word-image-3677-300x146.png 300w, /wp-content/uploads/2018/05/word-image-3677-768x375.png 768w, /wp-content/uploads/2018/05/word-image-3677-1024x500.png 1024w" sizes="(max-width: 1076px) 100vw, 1076px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/4022.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>TP 3.2 （二）视图、模板变量、模板函数、Foreach、Volist、D、M、模型 CURD、电商案例之分类添加</title>
		<link>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/3905.html</link>
					<comments>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/3905.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Sat, 19 May 2018 13:07:18 +0000</pubDate>
				<category><![CDATA[TP3.2]]></category>
		<category><![CDATA[后台框架]]></category>
		<category><![CDATA[D]]></category>
		<category><![CDATA[Foreach]]></category>
		<category><![CDATA[M]]></category>
		<category><![CDATA[Volist]]></category>
		<category><![CDATA[模型 CURD]]></category>
		<category><![CDATA[模板函数]]></category>
		<category><![CDATA[模板变量]]></category>
		<category><![CDATA[电商案例之分类添加]]></category>
		<category><![CDATA[视图]]></category>
		<guid isPermaLink="false">/?p=3905</guid>

					<description><![CDATA[视图(二) 1.1、模板变量 在模板中直接使用变量对数据进行输入显示。 1.1.1、使用assign赋值数据  [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>视图(二)</h1>
<h2>1.1、模板变量</h2>
<p>
  在模板中直接使用变量对数据进行输入显示。
</p>
<h3>1.1.1、使用assign赋值数据</h3>
<p>
  ①创建方法赋值变量
</p>
<p><img loading="lazy" decoding="async" width="1064" height="621" src="/wp-content/uploads/2018/05/word-image-3451.png" class="wp-image-3906" srcset="/wp-content/uploads/2018/05/word-image-3451.png 1064w, /wp-content/uploads/2018/05/word-image-3451-300x175.png 300w, /wp-content/uploads/2018/05/word-image-3451-768x448.png 768w, /wp-content/uploads/2018/05/word-image-3451-1024x598.png 1024w" sizes="(max-width: 1064px) 100vw, 1064px" /></p>
<p>
  ②创建模板
</p>
<p><img loading="lazy" decoding="async" width="978" height="594" src="/wp-content/uploads/2018/05/word-image-3452.png" class="wp-image-3907" srcset="/wp-content/uploads/2018/05/word-image-3452.png 978w, /wp-content/uploads/2018/05/word-image-3452-300x182.png 300w, /wp-content/uploads/2018/05/word-image-3452-768x466.png 768w" sizes="(max-width: 978px) 100vw, 978px" /></p>
<p>
  ③查看效果
</p>
<p><img loading="lazy" decoding="async" width="701" height="242" src="/wp-content/uploads/2018/05/word-image-3453.png" class="wp-image-3908" srcset="/wp-content/uploads/2018/05/word-image-3453.png 701w, /wp-content/uploads/2018/05/word-image-3453-300x104.png 300w" sizes="(max-width: 701px) 100vw, 701px" /></p>
<p>
  关于模板引擎的配置项如下
</p>
<p><img loading="lazy" decoding="async" width="1108" height="698" src="/wp-content/uploads/2018/05/word-image-3454.png" class="wp-image-3909" srcset="/wp-content/uploads/2018/05/word-image-3454.png 1108w, /wp-content/uploads/2018/05/word-image-3454-300x189.png 300w, /wp-content/uploads/2018/05/word-image-3454-768x484.png 768w, /wp-content/uploads/2018/05/word-image-3454-1024x645.png 1024w" sizes="(max-width: 1108px) 100vw, 1108px" /></p>
<h3>1.1.2、模板赋值基本数据</h3>
<p>
  ①创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="881" height="564" src="/wp-content/uploads/2018/05/word-image-3455.png" class="wp-image-3910" srcset="/wp-content/uploads/2018/05/word-image-3455.png 881w, /wp-content/uploads/2018/05/word-image-3455-300x192.png 300w, /wp-content/uploads/2018/05/word-image-3455-768x492.png 768w" sizes="(max-width: 881px) 100vw, 881px" /></p>
<p>
  ②创建模板
</p>
<p><img loading="lazy" decoding="async" width="769" height="529" src="/wp-content/uploads/2018/05/word-image-3456.png" class="wp-image-3911" srcset="/wp-content/uploads/2018/05/word-image-3456.png 769w, /wp-content/uploads/2018/05/word-image-3456-300x206.png 300w, /wp-content/uploads/2018/05/word-image-3456-768x528.png 768w, /wp-content/uploads/2018/05/word-image-3456-220x150.png 220w" sizes="(max-width: 769px) 100vw, 769px" /></p>
<p>
  ③效果
</p>
<p><img loading="lazy" decoding="async" width="640" height="239" src="/wp-content/uploads/2018/05/word-image-3457.png" class="wp-image-3912" srcset="/wp-content/uploads/2018/05/word-image-3457.png 640w, /wp-content/uploads/2018/05/word-image-3457-300x112.png 300w" sizes="(max-width: 640px) 100vw, 640px" /></p>
<h3>1.1.3、模板赋值数组</h3>
<p>
  ①创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="1000" height="507" src="/wp-content/uploads/2018/05/word-image-3458.png" class="wp-image-3913" srcset="/wp-content/uploads/2018/05/word-image-3458.png 1000w, /wp-content/uploads/2018/05/word-image-3458-300x152.png 300w, /wp-content/uploads/2018/05/word-image-3458-768x389.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></p>
<p>
  ②编写模板
</p>
<p><img loading="lazy" decoding="async" width="961" height="546" src="/wp-content/uploads/2018/05/word-image-3459.png" class="wp-image-3914" srcset="/wp-content/uploads/2018/05/word-image-3459.png 961w, /wp-content/uploads/2018/05/word-image-3459-300x170.png 300w, /wp-content/uploads/2018/05/word-image-3459-768x436.png 768w" sizes="(max-width: 961px) 100vw, 961px" /></p>
<p>
  ③效果
</p>
<p><img loading="lazy" decoding="async" width="653" height="213" src="/wp-content/uploads/2018/05/word-image-3460.png" class="wp-image-3915" srcset="/wp-content/uploads/2018/05/word-image-3460.png 653w, /wp-content/uploads/2018/05/word-image-3460-300x98.png 300w" sizes="(max-width: 653px) 100vw, 653px" /></p>
<p>
  ④查看模板解析之后的结果
</p>
<p><img loading="lazy" decoding="async" width="1080" height="607" src="/wp-content/uploads/2018/05/word-image-3461.png" class="wp-image-3916" srcset="/wp-content/uploads/2018/05/word-image-3461.png 1080w, /wp-content/uploads/2018/05/word-image-3461-300x169.png 300w, /wp-content/uploads/2018/05/word-image-3461-768x432.png 768w, /wp-content/uploads/2018/05/word-image-3461-1024x576.png 1024w" sizes="(max-width: 1080px) 100vw, 1080px" /></p>
<h3>1.1.4、模板赋值对象</h3>
<p>
  ①创建方法赋值对象
</p>
<p><img loading="lazy" decoding="async" width="894" height="656" src="/wp-content/uploads/2018/05/word-image-3462.png" class="wp-image-3917" srcset="/wp-content/uploads/2018/05/word-image-3462.png 894w, /wp-content/uploads/2018/05/word-image-3462-300x220.png 300w, /wp-content/uploads/2018/05/word-image-3462-768x564.png 768w" sizes="(max-width: 894px) 100vw, 894px" /></p>
<p>
  ②模板
</p>
<p><img loading="lazy" decoding="async" width="898" height="497" src="/wp-content/uploads/2018/05/word-image-3463.png" class="wp-image-3918" srcset="/wp-content/uploads/2018/05/word-image-3463.png 898w, /wp-content/uploads/2018/05/word-image-3463-300x166.png 300w, /wp-content/uploads/2018/05/word-image-3463-768x425.png 768w" sizes="(max-width: 898px) 100vw, 898px" /></p>
<p>
  ③效果
</p>
<p><img loading="lazy" decoding="async" width="627" height="160" src="/wp-content/uploads/2018/05/word-image-3464.png" class="wp-image-3919" srcset="/wp-content/uploads/2018/05/word-image-3464.png 627w, /wp-content/uploads/2018/05/word-image-3464-300x77.png 300w" sizes="(max-width: 627px) 100vw, 627px" /></p>
<h2>1.2、系统模板变量</h2>
<p>
  对于普通的模板变量需要在方法中进行赋值在模板中才能使用。对于有些数据。是属于经常使用。每次赋值就会比较麻烦。因此TP在系统运行过程中已经讲变量赋值给了模板。可以在模板中直接使用。
</p>
<h3>1.2.1、在控制器中赋值数据</h3>
<p>
  ①创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="935" height="479" src="/wp-content/uploads/2018/05/word-image-3465.png" class="wp-image-3920" srcset="/wp-content/uploads/2018/05/word-image-3465.png 935w, /wp-content/uploads/2018/05/word-image-3465-300x154.png 300w, /wp-content/uploads/2018/05/word-image-3465-768x393.png 768w" sizes="(max-width: 935px) 100vw, 935px" /></p>
<p>
  ②模板显示
</p>
<p><img loading="lazy" decoding="async" width="944" height="559" src="/wp-content/uploads/2018/05/word-image-3466.png" class="wp-image-3921" srcset="/wp-content/uploads/2018/05/word-image-3466.png 944w, /wp-content/uploads/2018/05/word-image-3466-300x178.png 300w, /wp-content/uploads/2018/05/word-image-3466-768x455.png 768w" sizes="(max-width: 944px) 100vw, 944px" /></p>
<p>
  ③效果如下
</p>
<p><img loading="lazy" decoding="async" width="606" height="182" src="/wp-content/uploads/2018/05/word-image-3467.png" class="wp-image-3922" srcset="/wp-content/uploads/2018/05/word-image-3467.png 606w, /wp-content/uploads/2018/05/word-image-3467-300x90.png 300w" sizes="(max-width: 606px) 100vw, 606px" /></p>
<h3>1.2.2、系统模板变量的作用</h3>
<ol>
<li>
  可以显示TP或者PHP中的内置常量
</li>
<li>
  显示PHP的超全局变量例如 $_GET、$_POST、$_REQUEST等
</li>
</ol>
<p>
  3、显示TP的配置信息
</p>
<h3>1.2.3、案例查看</h3>
<p>
  ①创建方法渲染模板
</p>
<p><img loading="lazy" decoding="async" width="817" height="440" src="/wp-content/uploads/2018/05/word-image-3468.png" class="wp-image-3923" srcset="/wp-content/uploads/2018/05/word-image-3468.png 817w, /wp-content/uploads/2018/05/word-image-3468-300x162.png 300w, /wp-content/uploads/2018/05/word-image-3468-768x414.png 768w" sizes="(max-width: 817px) 100vw, 817px" /></p>
<p>
  ②创建模板
</p>
<p><img loading="lazy" decoding="async" width="958" height="547" src="/wp-content/uploads/2018/05/word-image-3469.png" class="wp-image-3924" srcset="/wp-content/uploads/2018/05/word-image-3469.png 958w, /wp-content/uploads/2018/05/word-image-3469-300x171.png 300w, /wp-content/uploads/2018/05/word-image-3469-768x439.png 768w" sizes="(max-width: 958px) 100vw, 958px" /></p>
<p>
  ③效果
</p>
<p><img loading="lazy" decoding="async" width="794" height="287" src="/wp-content/uploads/2018/05/word-image-3470.png" class="wp-image-3925" srcset="/wp-content/uploads/2018/05/word-image-3470.png 794w, /wp-content/uploads/2018/05/word-image-3470-300x108.png 300w, /wp-content/uploads/2018/05/word-image-3470-768x278.png 768w" sizes="(max-width: 794px) 100vw, 794px" /></p>
<h2>1.3、模板函数(重点)</h2>
<h3>1.3.1、在控制器中实现格式化</h3>
<p>
  ①创建方法格式化数据
</p>
<p><img loading="lazy" decoding="async" width="1042" height="681" src="/wp-content/uploads/2018/05/word-image-3471.png" class="wp-image-3926" srcset="/wp-content/uploads/2018/05/word-image-3471.png 1042w, /wp-content/uploads/2018/05/word-image-3471-300x196.png 300w, /wp-content/uploads/2018/05/word-image-3471-768x502.png 768w, /wp-content/uploads/2018/05/word-image-3471-1024x669.png 1024w" sizes="(max-width: 1042px) 100vw, 1042px" /></p>
<p>
  ②处理模板
</p>
<p><img loading="lazy" decoding="async" width="972" height="495" src="/wp-content/uploads/2018/05/word-image-3472.png" class="wp-image-3927" srcset="/wp-content/uploads/2018/05/word-image-3472.png 972w, /wp-content/uploads/2018/05/word-image-3472-300x153.png 300w, /wp-content/uploads/2018/05/word-image-3472-768x391.png 768w" sizes="(max-width: 972px) 100vw, 972px" /></p>
<p>
  ③效果
</p>
<p><img loading="lazy" decoding="async" width="906" height="182" src="/wp-content/uploads/2018/05/word-image-3473.png" class="wp-image-3928" srcset="/wp-content/uploads/2018/05/word-image-3473.png 906w, /wp-content/uploads/2018/05/word-image-3473-300x60.png 300w, /wp-content/uploads/2018/05/word-image-3473-768x154.png 768w" sizes="(max-width: 906px) 100vw, 906px" /></p>
<p>
  对于此方式虽然能后正常的显示内容。但是操作麻烦因此可以使用模板函数实现格式化的操作
</p>
<h3>1.3.2、使用模板函数进行数据格式化</h3>
<p>
  在模板中使用函数可以使用PHP内置的或者是TP所提供的公共函数以及自己定义的公共函数。
</p>
<p>
  ①创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="1002" height="585" src="/wp-content/uploads/2018/05/word-image-3474.png" class="wp-image-3929" srcset="/wp-content/uploads/2018/05/word-image-3474.png 1002w, /wp-content/uploads/2018/05/word-image-3474-300x175.png 300w, /wp-content/uploads/2018/05/word-image-3474-768x448.png 768w" sizes="(max-width: 1002px) 100vw, 1002px" /></p>
<p>
  ②创建模板
</p>
<p><img loading="lazy" decoding="async" width="1030" height="563" src="/wp-content/uploads/2018/05/word-image-3475.png" class="wp-image-3930" srcset="/wp-content/uploads/2018/05/word-image-3475.png 1030w, /wp-content/uploads/2018/05/word-image-3475-300x164.png 300w, /wp-content/uploads/2018/05/word-image-3475-768x420.png 768w, /wp-content/uploads/2018/05/word-image-3475-1024x560.png 1024w" sizes="(max-width: 1030px) 100vw, 1030px" /></p>
<p>
  ③效果如下
</p>
<p><img loading="lazy" decoding="async" width="543" height="159" src="/wp-content/uploads/2018/05/word-image-3476.png" class="wp-image-3931" srcset="/wp-content/uploads/2018/05/word-image-3476.png 543w, /wp-content/uploads/2018/05/word-image-3476-300x88.png 300w" sizes="(max-width: 543px) 100vw, 543px" /></p>
<h3>1.3.3、案例二将字符串转换大写</h3>
<p>
  ①测试方法
</p>
<p><img loading="lazy" decoding="async" width="756" height="361" src="/wp-content/uploads/2018/05/word-image-3477.png" class="wp-image-3932" srcset="/wp-content/uploads/2018/05/word-image-3477.png 756w, /wp-content/uploads/2018/05/word-image-3477-300x143.png 300w" sizes="(max-width: 756px) 100vw, 756px" /></p>
<p>
  ②编写模板
</p>
<p><img loading="lazy" decoding="async" width="945" height="544" src="/wp-content/uploads/2018/05/word-image-3478.png" class="wp-image-3933" srcset="/wp-content/uploads/2018/05/word-image-3478.png 945w, /wp-content/uploads/2018/05/word-image-3478-300x173.png 300w, /wp-content/uploads/2018/05/word-image-3478-768x442.png 768w" sizes="(max-width: 945px) 100vw, 945px" /></p>
<p>
  结果如下
</p>
<p><img loading="lazy" decoding="async" width="720" height="261" src="/wp-content/uploads/2018/05/word-image-3479.png" class="wp-image-3934" srcset="/wp-content/uploads/2018/05/word-image-3479.png 720w, /wp-content/uploads/2018/05/word-image-3479-300x109.png 300w" sizes="(max-width: 720px) 100vw, 720px" /></p>
<h3>1.3.4、模板中使用多个函数格式化处理</h3>
<p>
  ①修改模板
</p>
<p><img loading="lazy" decoding="async" width="1037" height="543" src="/wp-content/uploads/2018/05/word-image-3480.png" class="wp-image-3935" srcset="/wp-content/uploads/2018/05/word-image-3480.png 1037w, /wp-content/uploads/2018/05/word-image-3480-300x157.png 300w, /wp-content/uploads/2018/05/word-image-3480-768x402.png 768w, /wp-content/uploads/2018/05/word-image-3480-1024x536.png 1024w" sizes="(max-width: 1037px) 100vw, 1037px" /></p>
<p>
  ②查看效果
</p>
<p><img loading="lazy" decoding="async" width="693" height="299" src="/wp-content/uploads/2018/05/word-image-3481.png" class="wp-image-3936" srcset="/wp-content/uploads/2018/05/word-image-3481.png 693w, /wp-content/uploads/2018/05/word-image-3481-300x129.png 300w" sizes="(max-width: 693px) 100vw, 693px" /></p>
<h3>1.3.5、使用PHP原生写法格式化</h3>
<p>
  修改模板
</p>
<p><img loading="lazy" decoding="async" width="1041" height="615" src="/wp-content/uploads/2018/05/word-image-3482.png" class="wp-image-3937" srcset="/wp-content/uploads/2018/05/word-image-3482.png 1041w, /wp-content/uploads/2018/05/word-image-3482-300x177.png 300w, /wp-content/uploads/2018/05/word-image-3482-768x454.png 768w, /wp-content/uploads/2018/05/word-image-3482-1024x605.png 1024w" sizes="(max-width: 1041px) 100vw, 1041px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="856" height="314" src="/wp-content/uploads/2018/05/word-image-3483.png" class="wp-image-3938" srcset="/wp-content/uploads/2018/05/word-image-3483.png 856w, /wp-content/uploads/2018/05/word-image-3483-300x110.png 300w, /wp-content/uploads/2018/05/word-image-3483-768x282.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<h3>1.3.6、格式化特殊写法</h3>
<p>
  修改模板
</p>
<p><img loading="lazy" decoding="async" width="1017" height="546" src="/wp-content/uploads/2018/05/word-image-3484.png" class="wp-image-3939" srcset="/wp-content/uploads/2018/05/word-image-3484.png 1017w, /wp-content/uploads/2018/05/word-image-3484-300x161.png 300w, /wp-content/uploads/2018/05/word-image-3484-768x412.png 768w" sizes="(max-width: 1017px) 100vw, 1017px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="622" height="263" src="/wp-content/uploads/2018/05/word-image-3485.png" class="wp-image-3940" srcset="/wp-content/uploads/2018/05/word-image-3485.png 622w, /wp-content/uploads/2018/05/word-image-3485-300x127.png 300w" sizes="(max-width: 622px) 100vw, 622px" /></p>
<p>
  对于特殊写法使用比较多的就是在模板中使用U函数生成链接地址
</p>
<h2>1.4、模板变量默认值</h2>
<p>
  当模板变量数据为空时输出的内容
</p>
<p>
  ①创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="714" height="384" src="/wp-content/uploads/2018/05/word-image-3486.png" class="wp-image-3941" srcset="/wp-content/uploads/2018/05/word-image-3486.png 714w, /wp-content/uploads/2018/05/word-image-3486-300x161.png 300w" sizes="(max-width: 714px) 100vw, 714px" /></p>
<p>
  ②创建模板
</p>
<p><img loading="lazy" decoding="async" width="684" height="479" src="/wp-content/uploads/2018/05/word-image-3487.png" class="wp-image-3942" srcset="/wp-content/uploads/2018/05/word-image-3487.png 684w, /wp-content/uploads/2018/05/word-image-3487-300x210.png 300w" sizes="(max-width: 684px) 100vw, 684px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="609" height="162" src="/wp-content/uploads/2018/05/word-image-3488.png" class="wp-image-3943" srcset="/wp-content/uploads/2018/05/word-image-3488.png 609w, /wp-content/uploads/2018/05/word-image-3488-300x80.png 300w" sizes="(max-width: 609px) 100vw, 609px" /></p>
<h2>1.5、模板运算</h2>
<p>
  模板运算即直接在模板中进行数据的加减乘除操作
</p>
<h3>1.5.1、基本运算</h3>
<p>
  创建方法
</p>
<p><img loading="lazy" decoding="async" width="774" height="293" src="/wp-content/uploads/2018/05/word-image-3489.png" class="wp-image-3944" srcset="/wp-content/uploads/2018/05/word-image-3489.png 774w, /wp-content/uploads/2018/05/word-image-3489-300x114.png 300w, /wp-content/uploads/2018/05/word-image-3489-768x291.png 768w" sizes="(max-width: 774px) 100vw, 774px" /></p>
<p>
  创建模板
</p>
<p><img loading="lazy" decoding="async" width="848" height="492" src="/wp-content/uploads/2018/05/word-image-3490.png" class="wp-image-3945" srcset="/wp-content/uploads/2018/05/word-image-3490.png 848w, /wp-content/uploads/2018/05/word-image-3490-300x174.png 300w, /wp-content/uploads/2018/05/word-image-3490-768x446.png 768w" sizes="(max-width: 848px) 100vw, 848px" /></p>
<p>
  效果
</p>
<p><img loading="lazy" decoding="async" width="577" height="225" src="/wp-content/uploads/2018/05/word-image-3491.png" class="wp-image-3946" srcset="/wp-content/uploads/2018/05/word-image-3491.png 577w, /wp-content/uploads/2018/05/word-image-3491-300x117.png 300w" sizes="(max-width: 577px) 100vw, 577px" /></p>
<h3>1.5.2、数组的运算</h3>
<p>
  在模板中对数组进行运算不在支持点语法。需要使用PHP原生的方式操作数据
</p>
<ol>
<li>
  创建方法
</li>
</ol>
<p><img loading="lazy" decoding="async" width="1028" height="500" src="/wp-content/uploads/2018/05/word-image-3492.png" class="wp-image-3947" srcset="/wp-content/uploads/2018/05/word-image-3492.png 1028w, /wp-content/uploads/2018/05/word-image-3492-300x146.png 300w, /wp-content/uploads/2018/05/word-image-3492-768x374.png 768w, /wp-content/uploads/2018/05/word-image-3492-1024x498.png 1024w" sizes="(max-width: 1028px) 100vw, 1028px" /></p>
<p>
  ②创建模板d
</p>
<p><img loading="lazy" decoding="async" width="1036" height="466" src="/wp-content/uploads/2018/05/word-image-3493.png" class="wp-image-3948" srcset="/wp-content/uploads/2018/05/word-image-3493.png 1036w, /wp-content/uploads/2018/05/word-image-3493-300x135.png 300w, /wp-content/uploads/2018/05/word-image-3493-768x345.png 768w, /wp-content/uploads/2018/05/word-image-3493-1024x461.png 1024w" sizes="(max-width: 1036px) 100vw, 1036px" /></p>
<p>
  ③效果
</p>
<p><img loading="lazy" decoding="async" width="706" height="196" src="/wp-content/uploads/2018/05/word-image-3494.png" class="wp-image-3949" srcset="/wp-content/uploads/2018/05/word-image-3494.png 706w, /wp-content/uploads/2018/05/word-image-3494-300x83.png 300w" sizes="(max-width: 706px) 100vw, 706px" /></p>
<h2>1.6、内置标签</h2>
<p>
  TP内置的模板引擎中支持很多标签需要重点的volist foreache if
</p>
<p><img loading="lazy" decoding="async" width="629" height="463" src="/wp-content/uploads/2018/05/word-image-3495.png" class="wp-image-3950" srcset="/wp-content/uploads/2018/05/word-image-3495.png 629w, /wp-content/uploads/2018/05/word-image-3495-300x221.png 300w" sizes="(max-width: 629px) 100vw, 629px" /></p>
<h3>1.6.1、关于标签解析的源码位置</h3>
<h3>1.6.2、foreach标签</h3>
<p>
  ①查看使用方式
</p>
<p><img loading="lazy" decoding="async" width="885" height="506" src="/wp-content/uploads/2018/05/word-image-3497.png" class="wp-image-3952" srcset="/wp-content/uploads/2018/05/word-image-3497.png 885w, /wp-content/uploads/2018/05/word-image-3497-300x172.png 300w, /wp-content/uploads/2018/05/word-image-3497-768x439.png 768w" sizes="(max-width: 885px) 100vw, 885px" /></p>
<p>
  ②创建方法
</p>
<p><img loading="lazy" decoding="async" width="1011" height="532" src="/wp-content/uploads/2018/05/word-image-3498.png" class="wp-image-3953" srcset="/wp-content/uploads/2018/05/word-image-3498.png 1011w, /wp-content/uploads/2018/05/word-image-3498-300x158.png 300w, /wp-content/uploads/2018/05/word-image-3498-768x404.png 768w" sizes="(max-width: 1011px) 100vw, 1011px" /></p>
<p>
  ③创建模板
</p>
<p><img loading="lazy" decoding="async" width="800" height="500" src="/wp-content/uploads/2018/05/word-image-3499.png" class="wp-image-3954" srcset="/wp-content/uploads/2018/05/word-image-3499.png 800w, /wp-content/uploads/2018/05/word-image-3499-300x188.png 300w, /wp-content/uploads/2018/05/word-image-3499-768x480.png 768w" sizes="(max-width: 800px) 100vw, 800px" /></p>
<p>
  ④效果如下
</p>
<p><img loading="lazy" decoding="async" width="562" height="151" src="/wp-content/uploads/2018/05/word-image-3500.png" class="wp-image-3955" srcset="/wp-content/uploads/2018/05/word-image-3500.png 562w, /wp-content/uploads/2018/05/word-image-3500-300x81.png 300w" sizes="(max-width: 562px) 100vw, 562px" /></p>
<h3>1.6.3、volist标签</h3>
<p>
  Volist跟foreach功能是一模一样都是为了循环数据。但是volist标签所支持的功能比foreach更加强大。除了循环数据在循环的过程中可以指定长度、偏移量、计数器等
</p>
<p>
  ①查看volist使用方式
</p>
<p><img loading="lazy" decoding="async" width="1013" height="415" src="/wp-content/uploads/2018/05/word-image-3501.png" class="wp-image-3956" srcset="/wp-content/uploads/2018/05/word-image-3501.png 1013w, /wp-content/uploads/2018/05/word-image-3501-300x123.png 300w, /wp-content/uploads/2018/05/word-image-3501-768x315.png 768w" sizes="(max-width: 1013px) 100vw, 1013px" /></p>
<p>
  ②创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="986" height="602" src="/wp-content/uploads/2018/05/word-image-3502.png" class="wp-image-3957" srcset="/wp-content/uploads/2018/05/word-image-3502.png 986w, /wp-content/uploads/2018/05/word-image-3502-300x183.png 300w, /wp-content/uploads/2018/05/word-image-3502-768x469.png 768w" sizes="(max-width: 986px) 100vw, 986px" /></p>
<ol>
<li>
  创建模板
</li>
</ol>
<p>
  n
</p>
<p><img loading="lazy" decoding="async" width="976" height="634" src="/wp-content/uploads/2018/05/word-image-3503.png" class="wp-image-3958" srcset="/wp-content/uploads/2018/05/word-image-3503.png 976w, /wp-content/uploads/2018/05/word-image-3503-300x195.png 300w, /wp-content/uploads/2018/05/word-image-3503-768x499.png 768w" sizes="(max-width: 976px) 100vw, 976px" /><br />
<img loading="lazy" decoding="async" width="999" height="436" src="/wp-content/uploads/2018/05/word-image-3504.png" class="wp-image-3959" srcset="/wp-content/uploads/2018/05/word-image-3504.png 999w, /wp-content/uploads/2018/05/word-image-3504-300x131.png 300w, /wp-content/uploads/2018/05/word-image-3504-768x335.png 768w" sizes="(max-width: 999px) 100vw, 999px" /></p>
<p>
  ③效果如下
</p>
<p><img loading="lazy" decoding="async" width="1080" height="682" src="/wp-content/uploads/2018/05/word-image-3505.png" class="wp-image-3960" srcset="/wp-content/uploads/2018/05/word-image-3505.png 1080w, /wp-content/uploads/2018/05/word-image-3505-300x189.png 300w, /wp-content/uploads/2018/05/word-image-3505-768x485.png 768w, /wp-content/uploads/2018/05/word-image-3505-1024x647.png 1024w" sizes="(max-width: 1080px) 100vw, 1080px" /><br />
<img loading="lazy" decoding="async" width="858" height="234" src="/wp-content/uploads/2018/05/word-image-3506.png" class="wp-image-3961" srcset="/wp-content/uploads/2018/05/word-image-3506.png 858w, /wp-content/uploads/2018/05/word-image-3506-300x82.png 300w, /wp-content/uploads/2018/05/word-image-3506-768x209.png 768w" sizes="(max-width: 858px) 100vw, 858px" /></p>
<h3>1.6.4、if标签</h3>
<p>
  if标签作用进行判断
</p>
<p>
  ①查看使用方式
</p>
<p><img loading="lazy" decoding="async" width="1055" height="344" src="/wp-content/uploads/2018/05/word-image-3507.png" class="wp-image-3962" srcset="/wp-content/uploads/2018/05/word-image-3507.png 1055w, /wp-content/uploads/2018/05/word-image-3507-300x98.png 300w, /wp-content/uploads/2018/05/word-image-3507-768x250.png 768w, /wp-content/uploads/2018/05/word-image-3507-1024x334.png 1024w" sizes="(max-width: 1055px) 100vw, 1055px" /></p>
<p>
  ②创建测试方法
</p>
<p><img loading="lazy" decoding="async" width="810" height="312" src="/wp-content/uploads/2018/05/word-image-3508.png" class="wp-image-3963" srcset="/wp-content/uploads/2018/05/word-image-3508.png 810w, /wp-content/uploads/2018/05/word-image-3508-300x116.png 300w, /wp-content/uploads/2018/05/word-image-3508-768x296.png 768w" sizes="(max-width: 810px) 100vw, 810px" /></p>
<p>
  ③模板编写
</p>
<p><img loading="lazy" decoding="async" width="1085" height="593" src="/wp-content/uploads/2018/05/word-image-3509.png" class="wp-image-3964" srcset="/wp-content/uploads/2018/05/word-image-3509.png 1085w, /wp-content/uploads/2018/05/word-image-3509-300x164.png 300w, /wp-content/uploads/2018/05/word-image-3509-768x420.png 768w, /wp-content/uploads/2018/05/word-image-3509-1024x560.png 1024w" sizes="(max-width: 1085px) 100vw, 1085px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="573" height="151" src="/wp-content/uploads/2018/05/word-image-3510.png" class="wp-image-3965" srcset="/wp-content/uploads/2018/05/word-image-3510.png 573w, /wp-content/uploads/2018/05/word-image-3510-300x79.png 300w" sizes="(max-width: 573px) 100vw, 573px" /></p>
<h1>模型</h1>
<h2>2.1、开启PDO扩展</h2>
<p>
  ①修改php.ini文件
</p>
<p><img loading="lazy" decoding="async" width="954" height="526" src="/wp-content/uploads/2018/05/word-image-3511.png" class="wp-image-3966" srcset="/wp-content/uploads/2018/05/word-image-3511.png 954w, /wp-content/uploads/2018/05/word-image-3511-300x165.png 300w, /wp-content/uploads/2018/05/word-image-3511-768x423.png 768w" sizes="(max-width: 954px) 100vw, 954px" /></p>
<p>
  ②重启Apache查看phpinfo
</p>
<p><img loading="lazy" decoding="async" width="1348" height="474" src="/wp-content/uploads/2018/05/word-image-3512.png" class="wp-image-3967" srcset="/wp-content/uploads/2018/05/word-image-3512.png 1348w, /wp-content/uploads/2018/05/word-image-3512-300x105.png 300w, /wp-content/uploads/2018/05/word-image-3512-768x270.png 768w, /wp-content/uploads/2018/05/word-image-3512-1024x360.png 1024w" sizes="(max-width: 1348px) 100vw, 1348px" /></p>
<h2>2.2、配置数据库的连接</h2>
<p>
  ①创建数据库
</p>
<p><img loading="lazy" decoding="async" width="280" height="291" src="/wp-content/uploads/2018/05/word-image-3513.png" class="wp-image-3968" /></p>
<p>
  ②创建测试数据表
</p>
<p>
  CREATE TABLE `tp_student` (
</p>
<p>
    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
</p>
<p>
    `sname` varchar(255) NOT NULL DEFAULT &#8221; COMMENT &#8216;名称&#8217;,
</p>
<p>
    `sage` int(11) NOT NULL DEFAULT &#8216;0&#8217; COMMENT &#8216;年纪&#8217;,
</p>
<p>
    `sdept` varchar(255) NOT NULL DEFAULT &#8221; COMMENT &#8216;班级&#8217;,
</p>
<p>
    PRIMARY KEY (`id`)
</p>
<p>
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</p>
<p>
  ③修改配置文件
</p>
<p><img loading="lazy" decoding="async" width="1070" height="672" src="/wp-content/uploads/2018/05/word-image-3514.png" class="wp-image-3969" srcset="/wp-content/uploads/2018/05/word-image-3514.png 1070w, /wp-content/uploads/2018/05/word-image-3514-300x188.png 300w, /wp-content/uploads/2018/05/word-image-3514-768x482.png 768w, /wp-content/uploads/2018/05/word-image-3514-1024x643.png 1024w" sizes="(max-width: 1070px) 100vw, 1070px" /></p>
<h2>2.3、创建自定义的模型</h2>
<h3>2.3.1、自定义模型存储规则</h3>
<ol>
<li>
  存储位置：应用/模块/Model
</li>
<li>
  文件名称：模型名称(一般模型名称对应数据表的名称)+Model.class.php
</li>
</ol>
<h3>2.3.2、模型编写规则</h3>
<ol>
<li>
  申明命名空间
</li>
<li>
  引入TP模型基类
</li>
<li>
  编写自定义的模型
</li>
</ol>
<h3>2.3.2、创建自定义模型</h3>
<p><img loading="lazy" decoding="async" width="906" height="560" src="/wp-content/uploads/2018/05/word-image-3515.png" class="wp-image-3970" srcset="/wp-content/uploads/2018/05/word-image-3515.png 906w, /wp-content/uploads/2018/05/word-image-3515-300x185.png 300w, /wp-content/uploads/2018/05/word-image-3515-768x475.png 768w" sizes="(max-width: 906px) 100vw, 906px" /></p>
<h2>2.4、模型实例化</h2>
<h3>2.4.1、模型实例化的三种方式</h3>
<p>
  ①使用new进行实例化
</p>
<p><img loading="lazy" decoding="async" width="996" height="533" src="/wp-content/uploads/2018/05/word-image-3516.png" class="wp-image-3971" srcset="/wp-content/uploads/2018/05/word-image-3516.png 996w, /wp-content/uploads/2018/05/word-image-3516-300x161.png 300w, /wp-content/uploads/2018/05/word-image-3516-768x411.png 768w" sizes="(max-width: 996px) 100vw, 996px" /></p>
<p>
  结果如下
</p>
<p><img loading="lazy" decoding="async" width="869" height="369" src="/wp-content/uploads/2018/05/word-image-3517.png" class="wp-image-3972" srcset="/wp-content/uploads/2018/05/word-image-3517.png 869w, /wp-content/uploads/2018/05/word-image-3517-300x127.png 300w, /wp-content/uploads/2018/05/word-image-3517-768x326.png 768w" sizes="(max-width: 869px) 100vw, 869px" /></p>
<p>
  ②使用M进行实例化
</p>
<p><img loading="lazy" decoding="async" width="965" height="622" src="/wp-content/uploads/2018/05/word-image-3518.png" class="wp-image-3973" srcset="/wp-content/uploads/2018/05/word-image-3518.png 965w, /wp-content/uploads/2018/05/word-image-3518-300x193.png 300w, /wp-content/uploads/2018/05/word-image-3518-768x495.png 768w" sizes="(max-width: 965px) 100vw, 965px" /></p>
<p>
  结果
</p>
<p><img loading="lazy" decoding="async" width="706" height="277" src="/wp-content/uploads/2018/05/word-image-3519.png" class="wp-image-3974" srcset="/wp-content/uploads/2018/05/word-image-3519.png 706w, /wp-content/uploads/2018/05/word-image-3519-300x118.png 300w" sizes="(max-width: 706px) 100vw, 706px" /></p>
<p>
  ③使用D函数实例化
</p>
<p><img loading="lazy" decoding="async" width="878" height="545" src="/wp-content/uploads/2018/05/word-image-3520.png" class="wp-image-3975" srcset="/wp-content/uploads/2018/05/word-image-3520.png 878w, /wp-content/uploads/2018/05/word-image-3520-300x186.png 300w, /wp-content/uploads/2018/05/word-image-3520-768x477.png 768w" sizes="(max-width: 878px) 100vw, 878px" /></p>
<p>
  结果
</p>
<p><img loading="lazy" decoding="async" width="732" height="321" src="/wp-content/uploads/2018/05/word-image-3521.png" class="wp-image-3976" srcset="/wp-content/uploads/2018/05/word-image-3521.png 732w, /wp-content/uploads/2018/05/word-image-3521-300x132.png 300w" sizes="(max-width: 732px) 100vw, 732px" /></p>
<h3>2.4.2、M函数使用</h3>
<p>
  M函数一共有三个参数
</p>
<p>
  第一个：指定具体表的名称
</p>
<p>
  第二个：指定表的前缀
</p>
<p>
  第三个：指定数据库的连接信息
</p>
<p>
  ①演示M实例化特殊名称的表
</p>
<p>
  先复制一个特殊的数据表
</p>
<p><img loading="lazy" decoding="async" width="781" height="163" src="/wp-content/uploads/2018/05/word-image-3522.png" class="wp-image-3977" srcset="/wp-content/uploads/2018/05/word-image-3522.png 781w, /wp-content/uploads/2018/05/word-image-3522-300x63.png 300w, /wp-content/uploads/2018/05/word-image-3522-768x160.png 768w" sizes="(max-width: 781px) 100vw, 781px" /></p>
<p>
  编写代码实例化
</p>
<p><img loading="lazy" decoding="async" width="841" height="359" src="/wp-content/uploads/2018/05/word-image-3523.png" class="wp-image-3978" srcset="/wp-content/uploads/2018/05/word-image-3523.png 841w, /wp-content/uploads/2018/05/word-image-3523-300x128.png 300w, /wp-content/uploads/2018/05/word-image-3523-768x328.png 768w" sizes="(max-width: 841px) 100vw, 841px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="857" height="422" src="/wp-content/uploads/2018/05/word-image-3524.png" class="wp-image-3979" srcset="/wp-content/uploads/2018/05/word-image-3524.png 857w, /wp-content/uploads/2018/05/word-image-3524-300x148.png 300w, /wp-content/uploads/2018/05/word-image-3524-768x378.png 768w" sizes="(max-width: 857px) 100vw, 857px" /></p>
<p>
  ②演示第三个参数的使用方式
</p>
<p>
  先在其他数据库下创建数据表
</p>
<p><img loading="lazy" decoding="async" width="881" height="390" src="/wp-content/uploads/2018/05/word-image-3525.png" class="wp-image-3980" srcset="/wp-content/uploads/2018/05/word-image-3525.png 881w, /wp-content/uploads/2018/05/word-image-3525-300x133.png 300w, /wp-content/uploads/2018/05/word-image-3525-768x340.png 768w" sizes="(max-width: 881px) 100vw, 881px" /></p>
<p>
  编写代码连接Tp5_shop数据库下的student表
</p>
<p><img loading="lazy" decoding="async" width="1048" height="707" src="/wp-content/uploads/2018/05/word-image-3526.png" class="wp-image-3981" srcset="/wp-content/uploads/2018/05/word-image-3526.png 1048w, /wp-content/uploads/2018/05/word-image-3526-300x202.png 300w, /wp-content/uploads/2018/05/word-image-3526-768x518.png 768w, /wp-content/uploads/2018/05/word-image-3526-1024x691.png 1024w" sizes="(max-width: 1048px) 100vw, 1048px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="772" height="590" src="/wp-content/uploads/2018/05/word-image-3527.png" class="wp-image-3982" srcset="/wp-content/uploads/2018/05/word-image-3527.png 772w, /wp-content/uploads/2018/05/word-image-3527-300x229.png 300w, /wp-content/uploads/2018/05/word-image-3527-768x587.png 768w" sizes="(max-width: 772px) 100vw, 772px" /></p>
<p>
  对于M函数的第三个参数可以实现跨数据库服务器、数据库进行操作
</p>
<p>
  ③关于M函数第三个参数的变形写法
</p>
<p>
  首先配置数据库的连接
</p>
<p><img loading="lazy" decoding="async" width="1046" height="604" src="/wp-content/uploads/2018/05/word-image-3528.png" class="wp-image-3983" srcset="/wp-content/uploads/2018/05/word-image-3528.png 1046w, /wp-content/uploads/2018/05/word-image-3528-300x173.png 300w, /wp-content/uploads/2018/05/word-image-3528-768x443.png 768w, /wp-content/uploads/2018/05/word-image-3528-1024x591.png 1024w" sizes="(max-width: 1046px) 100vw, 1046px" /></p>
<p>
  修改方法
</p>
<p><img loading="lazy" decoding="async" width="971" height="511" src="/wp-content/uploads/2018/05/word-image-3529.png" class="wp-image-3984" srcset="/wp-content/uploads/2018/05/word-image-3529.png 971w, /wp-content/uploads/2018/05/word-image-3529-300x158.png 300w, /wp-content/uploads/2018/05/word-image-3529-768x404.png 768w" sizes="(max-width: 971px) 100vw, 971px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="912" height="558" src="/wp-content/uploads/2018/05/word-image-3530.png" class="wp-image-3985" srcset="/wp-content/uploads/2018/05/word-image-3530.png 912w, /wp-content/uploads/2018/05/word-image-3530-300x184.png 300w, /wp-content/uploads/2018/05/word-image-3530-768x470.png 768w" sizes="(max-width: 912px) 100vw, 912px" /></p>
<p>
  总结：M函数实例化模型对象永远是实例化TP模型基类的对象
</p>
<h3>2.4.3、D函数的使用</h3>
<p>
  ①D函数的基本使用
</p>
<p><img loading="lazy" decoding="async" width="810" height="325" src="/wp-content/uploads/2018/05/word-image-3531.png" class="wp-image-3986" srcset="/wp-content/uploads/2018/05/word-image-3531.png 810w, /wp-content/uploads/2018/05/word-image-3531-300x120.png 300w, /wp-content/uploads/2018/05/word-image-3531-768x308.png 768w" sizes="(max-width: 810px) 100vw, 810px" /><br />
<img loading="lazy" decoding="async" width="962" height="542" src="/wp-content/uploads/2018/05/word-image-3532.png" class="wp-image-3987" srcset="/wp-content/uploads/2018/05/word-image-3532.png 962w, /wp-content/uploads/2018/05/word-image-3532-300x169.png 300w, /wp-content/uploads/2018/05/word-image-3532-768x433.png 768w" sizes="(max-width: 962px) 100vw, 962px" /></p>
<p>
  ②实例化一个没有自定义模型的对象
</p>
<p>
  复制一个tp_class数据表
</p>
<p><img loading="lazy" decoding="async" width="900" height="312" src="/wp-content/uploads/2018/05/word-image-3533.png" class="wp-image-3988" srcset="/wp-content/uploads/2018/05/word-image-3533.png 900w, /wp-content/uploads/2018/05/word-image-3533-300x104.png 300w, /wp-content/uploads/2018/05/word-image-3533-768x266.png 768w" sizes="(max-width: 900px) 100vw, 900px" /></p>
<p>
  编写代码
</p>
<p><img loading="lazy" decoding="async" width="947" height="384" src="/wp-content/uploads/2018/05/word-image-3534.png" class="wp-image-3989" srcset="/wp-content/uploads/2018/05/word-image-3534.png 947w, /wp-content/uploads/2018/05/word-image-3534-300x122.png 300w, /wp-content/uploads/2018/05/word-image-3534-768x311.png 768w" sizes="(max-width: 947px) 100vw, 947px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="757" height="436" src="/wp-content/uploads/2018/05/word-image-3535.png" class="wp-image-3990" srcset="/wp-content/uploads/2018/05/word-image-3535.png 757w, /wp-content/uploads/2018/05/word-image-3535-300x173.png 300w" sizes="(max-width: 757px) 100vw, 757px" /></p>
<p>
  总结：D函数会实例化自定义的模型对象。如果自定义的模型对象不存在。实例化TP模型基类的对象。如果数据表不存在报错
</p>
<h3>2.4.4、总结M跟D的区别</h3>
<p>
  M实例化永远是模型基类。实例化一个不存在的数据表对应的对象时也会报错
</p>
<p>
  D优先自定义的模型。如果自定义模型不存在使用模型基类进行实例化如果数据表不存在报错
</p>
<p>
  D有缓存功能。再次实例化相同的模型对象。不会再次实例化
</p>
<h2>2.5、模型的CURD操作</h2>
<p>
  可以通过TP模型基类中所提供的方法进行数据的增删改查
</p>
<p>
  增加：模型对象-&gt;add()
</p>
<p>
  删除：模型对象-&gt;delete()
</p>
<p>
  修改：模型对象-&gt;save()
</p>
<p>
  查询：模型对象-&gt;find/select()
</p>
<h3>2.5.1、数据增加</h3>
<p>
  ①创建测试
</p>
<p><img loading="lazy" decoding="async" width="999" height="667" src="/wp-content/uploads/2018/05/word-image-3536.png" class="wp-image-3991" srcset="/wp-content/uploads/2018/05/word-image-3536.png 999w, /wp-content/uploads/2018/05/word-image-3536-300x200.png 300w, /wp-content/uploads/2018/05/word-image-3536-768x513.png 768w" sizes="(max-width: 999px) 100vw, 999px" /></p>
<p>
  ②访问测试
</p>
<p><img loading="lazy" decoding="async" width="1031" height="235" src="/wp-content/uploads/2018/05/word-image-3537.png" class="wp-image-3992" srcset="/wp-content/uploads/2018/05/word-image-3537.png 1031w, /wp-content/uploads/2018/05/word-image-3537-300x68.png 300w, /wp-content/uploads/2018/05/word-image-3537-768x175.png 768w, /wp-content/uploads/2018/05/word-image-3537-1024x233.png 1024w" sizes="(max-width: 1031px) 100vw, 1031px" /></p>
<p>
  ③查看数据库
</p>
<p><img loading="lazy" decoding="async" width="409" height="123" src="/wp-content/uploads/2018/05/word-image-3538.png" class="wp-image-3993" srcset="/wp-content/uploads/2018/05/word-image-3538.png 409w, /wp-content/uploads/2018/05/word-image-3538-300x90.png 300w" sizes="(max-width: 409px) 100vw, 409px" /></p>
<h3>2.5.2、数据的批量写入</h3>
<p>
  数据批量写入可以使用addAll方法实现。写入数据时需要注意。数据的下标必须从0,1,2,3顺序下来。最后的返回结果为写入数据第一条的主键标识
</p>
<p><img loading="lazy" decoding="async" width="1006" height="641" src="/wp-content/uploads/2018/05/word-image-3539.png" class="wp-image-3994" srcset="/wp-content/uploads/2018/05/word-image-3539.png 1006w, /wp-content/uploads/2018/05/word-image-3539-300x191.png 300w, /wp-content/uploads/2018/05/word-image-3539-768x489.png 768w" sizes="(max-width: 1006px) 100vw, 1006px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="528" height="139" src="/wp-content/uploads/2018/05/word-image-3540.png" class="wp-image-3995" srcset="/wp-content/uploads/2018/05/word-image-3540.png 528w, /wp-content/uploads/2018/05/word-image-3540-300x79.png 300w" sizes="(max-width: 528px) 100vw, 528px" /></p>
<h3>2.5.3、数据修改</h3>
<p><img loading="lazy" decoding="async" width="1053" height="699" src="/wp-content/uploads/2018/05/word-image-3541.png" class="wp-image-3996" srcset="/wp-content/uploads/2018/05/word-image-3541.png 1053w, /wp-content/uploads/2018/05/word-image-3541-300x199.png 300w, /wp-content/uploads/2018/05/word-image-3541-768x510.png 768w, /wp-content/uploads/2018/05/word-image-3541-1024x680.png 1024w" sizes="(max-width: 1053px) 100vw, 1053px" /></p>
<p>
  效果如下
</p>
<p><img loading="lazy" decoding="async" width="827" height="284" src="/wp-content/uploads/2018/05/word-image-3542.png" class="wp-image-3997" srcset="/wp-content/uploads/2018/05/word-image-3542.png 827w, /wp-content/uploads/2018/05/word-image-3542-300x103.png 300w, /wp-content/uploads/2018/05/word-image-3542-768x264.png 768w" sizes="(max-width: 827px) 100vw, 827px" /></p>
<h3>2.5.4、数据查询</h3>
<p>
  Find：查询获取一条数据。结果为一维数组
</p>
<p>
  Select：查询获取多条数据。结果为二维数组
</p>
<p><img loading="lazy" decoding="async" width="907" height="395" src="/wp-content/uploads/2018/05/word-image-3543.png" class="wp-image-3998" srcset="/wp-content/uploads/2018/05/word-image-3543.png 907w, /wp-content/uploads/2018/05/word-image-3543-300x131.png 300w, /wp-content/uploads/2018/05/word-image-3543-768x334.png 768w" sizes="(max-width: 907px) 100vw, 907px" /></p>
<p>
  结果如下
</p>
<p><img loading="lazy" decoding="async" width="961" height="500" src="/wp-content/uploads/2018/05/word-image-3544.png" class="wp-image-3999" srcset="/wp-content/uploads/2018/05/word-image-3544.png 961w, /wp-content/uploads/2018/05/word-image-3544-300x156.png 300w, /wp-content/uploads/2018/05/word-image-3544-768x400.png 768w" sizes="(max-width: 961px) 100vw, 961px" /></p>
<h3>2.5.5、数据删除</h3>
<p><img loading="lazy" decoding="async" width="960" height="504" src="/wp-content/uploads/2018/05/word-image-3545.png" class="wp-image-4000" srcset="/wp-content/uploads/2018/05/word-image-3545.png 960w, /wp-content/uploads/2018/05/word-image-3545-300x158.png 300w, /wp-content/uploads/2018/05/word-image-3545-768x403.png 768w" sizes="(max-width: 960px) 100vw, 960px" /><br />
<img loading="lazy" decoding="async" width="745" height="233" src="/wp-content/uploads/2018/05/word-image-3546.png" class="wp-image-4001" srcset="/wp-content/uploads/2018/05/word-image-3546.png 745w, /wp-content/uploads/2018/05/word-image-3546-300x94.png 300w" sizes="(max-width: 745px) 100vw, 745px" /></p>
<h1>电商案例-分类的添加</h1>
<h2>3.1、实现步骤</h2>
<ol>
<li>
  显示添加表单模板
</li>
<li>
  创建数据表
</li>
<li>
  接受表单的提交数据
</li>
<li>
  接受之后写入数据库
</li>
</ol>
<h2>3.2、显示商品的添加模板</h2>
<p>
  ①创建控制器方法显示模板
</p>
<p><img loading="lazy" decoding="async" width="923" height="407" src="/wp-content/uploads/2018/05/word-image-3547.png" class="wp-image-4002" srcset="/wp-content/uploads/2018/05/word-image-3547.png 923w, /wp-content/uploads/2018/05/word-image-3547-300x132.png 300w, /wp-content/uploads/2018/05/word-image-3547-768x339.png 768w" sizes="(max-width: 923px) 100vw, 923px" /></p>
<p>
  ②拷贝添加的模板
</p>
<p><img loading="lazy" decoding="async" width="1144" height="553" src="/wp-content/uploads/2018/05/word-image-3548.png" class="wp-image-4003" srcset="/wp-content/uploads/2018/05/word-image-3548.png 1144w, /wp-content/uploads/2018/05/word-image-3548-300x145.png 300w, /wp-content/uploads/2018/05/word-image-3548-768x371.png 768w, /wp-content/uploads/2018/05/word-image-3548-1024x495.png 1024w" sizes="(max-width: 1144px) 100vw, 1144px" /></p>
<p>
  ③修改资源地址
</p>
<p><img loading="lazy" decoding="async" width="1047" height="476" src="/wp-content/uploads/2018/05/word-image-3549.png" class="wp-image-4004" srcset="/wp-content/uploads/2018/05/word-image-3549.png 1047w, /wp-content/uploads/2018/05/word-image-3549-300x136.png 300w, /wp-content/uploads/2018/05/word-image-3549-768x349.png 768w, /wp-content/uploads/2018/05/word-image-3549-1024x466.png 1024w" sizes="(max-width: 1047px) 100vw, 1047px" /></p>
<h2>3.3、创建数据表</h2>
<p>
  ①创建数据库
</p>
<p><img loading="lazy" decoding="async" width="757" height="394" src="/wp-content/uploads/2018/05/word-image-3550.png" class="wp-image-4005" srcset="/wp-content/uploads/2018/05/word-image-3550.png 757w, /wp-content/uploads/2018/05/word-image-3550-300x156.png 300w" sizes="(max-width: 757px) 100vw, 757px" /></p>
<p>
  ②创建分类的数据表
</p>
<p>
  CREATE TABLE `shop_category` (
</p>
<p>
    `id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
</p>
<p>
    `cname` varchar(255) NOT NULL DEFAULT &#8221; COMMENT &#8216;分类名称&#8217;,
</p>
<p>
    `parent_id` smallint(6) NOT NULL DEFAULT &#8216;0&#8217; COMMENT &#8216;父分类的ID 0表示顶级&#8217;,
</p>
<p>
    PRIMARY KEY (`id`)
</p>
<p>
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</p>
<h2>3.4、接受表单的提交数据</h2>
<p>
  ①修改表单提交的地址
</p>
<p><img loading="lazy" decoding="async" width="1056" height="650" src="/wp-content/uploads/2018/05/word-image-3551.png" class="wp-image-4006" srcset="/wp-content/uploads/2018/05/word-image-3551.png 1056w, /wp-content/uploads/2018/05/word-image-3551-300x185.png 300w, /wp-content/uploads/2018/05/word-image-3551-768x473.png 768w, /wp-content/uploads/2018/05/word-image-3551-1024x630.png 1024w" sizes="(max-width: 1056px) 100vw, 1056px" /></p>
<p>
  ②创建方法
</p>
<p><img loading="lazy" decoding="async" width="690" height="417" src="/wp-content/uploads/2018/05/word-image-3552.png" class="wp-image-4007" srcset="/wp-content/uploads/2018/05/word-image-3552.png 690w, /wp-content/uploads/2018/05/word-image-3552-300x181.png 300w" sizes="(max-width: 690px) 100vw, 690px" /></p>
<p>
  ③测试数据提交
</p>
<p><img loading="lazy" decoding="async" width="563" height="190" src="/wp-content/uploads/2018/05/word-image-3553.png" class="wp-image-4008" srcset="/wp-content/uploads/2018/05/word-image-3553.png 563w, /wp-content/uploads/2018/05/word-image-3553-300x101.png 300w" sizes="(max-width: 563px) 100vw, 563px" /></p>
<h2>3.5、实现数据入库</h2>
<p>
  ①配置数据库的连接
</p>
<p><img loading="lazy" decoding="async" width="1022" height="492" src="/wp-content/uploads/2018/05/word-image-3554.png" class="wp-image-4009" srcset="/wp-content/uploads/2018/05/word-image-3554.png 1022w, /wp-content/uploads/2018/05/word-image-3554-300x144.png 300w, /wp-content/uploads/2018/05/word-image-3554-768x370.png 768w" sizes="(max-width: 1022px) 100vw, 1022px" /></p>
<p>
  ②自定义模型
</p>
<p><img loading="lazy" decoding="async" width="902" height="533" src="/wp-content/uploads/2018/05/word-image-3555.png" class="wp-image-4010" srcset="/wp-content/uploads/2018/05/word-image-3555.png 902w, /wp-content/uploads/2018/05/word-image-3555-300x177.png 300w, /wp-content/uploads/2018/05/word-image-3555-768x454.png 768w" sizes="(max-width: 902px) 100vw, 902px" /></p>
<p>
  ③实现数据入库
</p>
<p><img loading="lazy" decoding="async" width="894" height="624" src="/wp-content/uploads/2018/05/word-image-3556.png" class="wp-image-4011" srcset="/wp-content/uploads/2018/05/word-image-3556.png 894w, /wp-content/uploads/2018/05/word-image-3556-300x209.png 300w, /wp-content/uploads/2018/05/word-image-3556-768x536.png 768w" sizes="(max-width: 894px) 100vw, 894px" /></p>
<h2>3.6、实现显示表单与数据提交一个方法实现</h2>
<p>
  实现此功能的关键点就是需要判断出当前的请求方式
</p>
<p>
  ①查看手册中的常量
</p>
<p><img loading="lazy" decoding="async" width="1023" height="473" src="/wp-content/uploads/2018/05/word-image-3557.png" class="wp-image-4012" srcset="/wp-content/uploads/2018/05/word-image-3557.png 1023w, /wp-content/uploads/2018/05/word-image-3557-300x139.png 300w, /wp-content/uploads/2018/05/word-image-3557-768x355.png 768w" sizes="(max-width: 1023px) 100vw, 1023px" /></p>
<p>
  ②修改add方法
</p>
<p><img loading="lazy" decoding="async" width="1065" height="701" src="/wp-content/uploads/2018/05/word-image-3558.png" class="wp-image-4013" srcset="/wp-content/uploads/2018/05/word-image-3558.png 1065w, /wp-content/uploads/2018/05/word-image-3558-300x197.png 300w, /wp-content/uploads/2018/05/word-image-3558-768x506.png 768w, /wp-content/uploads/2018/05/word-image-3558-1024x674.png 1024w" sizes="(max-width: 1065px) 100vw, 1065px" /></p>
<p>
  ③修改表单的提交地址
</p>
<p><img loading="lazy" decoding="async" width="1048" height="534" src="/wp-content/uploads/2018/05/word-image-3559.png" class="wp-image-4014" srcset="/wp-content/uploads/2018/05/word-image-3559.png 1048w, /wp-content/uploads/2018/05/word-image-3559-300x153.png 300w, /wp-content/uploads/2018/05/word-image-3559-768x391.png 768w, /wp-content/uploads/2018/05/word-image-3559-1024x522.png 1024w" sizes="(max-width: 1048px) 100vw, 1048px" /></p>
<h2>3.7、过滤参数</h2>
<p>
  ①查看I函数使用方式
</p>
<p><img loading="lazy" decoding="async" width="824" height="532" src="/wp-content/uploads/2018/05/word-image-3560.png" class="wp-image-4015" srcset="/wp-content/uploads/2018/05/word-image-3560.png 824w, /wp-content/uploads/2018/05/word-image-3560-300x194.png 300w, /wp-content/uploads/2018/05/word-image-3560-768x496.png 768w" sizes="(max-width: 824px) 100vw, 824px" /></p>
<p>
  ②修改add方法对数据进行过滤
</p>
<p><img loading="lazy" decoding="async" width="1094" height="663" src="/wp-content/uploads/2018/05/word-image-3561.png" class="wp-image-4016" srcset="/wp-content/uploads/2018/05/word-image-3561.png 1094w, /wp-content/uploads/2018/05/word-image-3561-300x182.png 300w, /wp-content/uploads/2018/05/word-image-3561-768x465.png 768w, /wp-content/uploads/2018/05/word-image-3561-1024x621.png 1024w" sizes="(max-width: 1094px) 100vw, 1094px" /></p>
<h2>3.8、实现可以添加子分类</h2>
<p>
  ①修改add能够获取已有的分类信息
</p>
<p><img loading="lazy" decoding="async" width="1065" height="558" src="/wp-content/uploads/2018/05/word-image-3562.png" class="wp-image-4017" srcset="/wp-content/uploads/2018/05/word-image-3562.png 1065w, /wp-content/uploads/2018/05/word-image-3562-300x157.png 300w, /wp-content/uploads/2018/05/word-image-3562-768x402.png 768w, /wp-content/uploads/2018/05/word-image-3562-1024x537.png 1024w" sizes="(max-width: 1065px) 100vw, 1065px" /></p>
<p>
  ②创建模型方法实现获取数据
</p>
<p><img loading="lazy" decoding="async" width="962" height="607" src="/wp-content/uploads/2018/05/word-image-3563.png" class="wp-image-4018" srcset="/wp-content/uploads/2018/05/word-image-3563.png 962w, /wp-content/uploads/2018/05/word-image-3563-300x189.png 300w, /wp-content/uploads/2018/05/word-image-3563-768x485.png 768w" sizes="(max-width: 962px) 100vw, 962px" /></p>
<p>
  ③增加公共函数
</p>
<p><img loading="lazy" decoding="async" width="952" height="595" src="/wp-content/uploads/2018/05/word-image-3564.png" class="wp-image-4019" srcset="/wp-content/uploads/2018/05/word-image-3564.png 952w, /wp-content/uploads/2018/05/word-image-3564-300x188.png 300w, /wp-content/uploads/2018/05/word-image-3564-768x480.png 768w" sizes="(max-width: 952px) 100vw, 952px" /></p>
<p>
  ④修改模板显示数据
</p>
<p><img loading="lazy" decoding="async" width="1022" height="549" src="/wp-content/uploads/2018/05/word-image-3565.png" class="wp-image-4020" srcset="/wp-content/uploads/2018/05/word-image-3565.png 1022w, /wp-content/uploads/2018/05/word-image-3565-300x161.png 300w, /wp-content/uploads/2018/05/word-image-3565-768x413.png 768w" sizes="(max-width: 1022px) 100vw, 1022px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%90%8e%e5%8f%b0%e6%a1%86%e6%9e%b6/3905.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Mysql（五）事物、 外键、 存储函数、 存储过程、 流程控制、 视图、 触发器</title>
		<link>/%e6%95%b0%e6%8d%ae%e5%ba%93/mysql/1249.html</link>
					<comments>/%e6%95%b0%e6%8d%ae%e5%ba%93/mysql/1249.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Thu, 17 May 2018 17:10:06 +0000</pubDate>
				<category><![CDATA[Mysql]]></category>
		<category><![CDATA[事物]]></category>
		<category><![CDATA[外键]]></category>
		<category><![CDATA[存储函数]]></category>
		<category><![CDATA[存储过程]]></category>
		<category><![CDATA[流程控制]]></category>
		<category><![CDATA[视图]]></category>
		<category><![CDATA[触发器]]></category>
		<guid isPermaLink="false">/?p=1249</guid>

					<description><![CDATA[外键 什么是外键 在两张表中公用字段，在一个关系中是主键，在另外一个关系中就是外键 公共字段是主键的表，是主表 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>外键</h1>
<h2>什么是外键</h2>
<p>
  在两张表中公用字段，在一个关系中是主键，在另外一个关系中就是外键
</p>
<p>
  公共字段是主键的表，是主表；是外键的表就是从表
</p>
<p>
  <img loading="lazy" decoding="async" width="610" height="494" src="/wp-content/uploads/2018/05/word-image-1134.png" class="wp-image-1250" srcset="/wp-content/uploads/2018/05/word-image-1134.png 610w, /wp-content/uploads/2018/05/word-image-1134-300x243.png 300w" sizes="(max-width: 610px) 100vw, 610px" />
</p>
<h2>增加外键</h2>
<p>
  建表的时候加外键（明确指定从表中的公用字段是外键—有一定的约束）
</p>
<p>
  create table class
</p>
<p>
  (
</p>
<p>
  	id int primary key auto_increment,
</p>
<p>
  	class_name char(20)
</p>
<p>
  )charset=utf8;
</p>
<p>
  create table student
</p>
<p>
  (
</p>
<p>
  	id int primary key auto_increment,
</p>
<p>
  	name char(30),
</p>
<p>
  	class_id int,
</p>
<p>
  	foreign key(class_id) references class(id)
</p>
<p>
  )charset=utf8;
</p>
<p>
  指定外键的时候，系统会自动的把外键字段加一个索引
</p>
<p>
  <img loading="lazy" decoding="async" width="887" height="286" src="/wp-content/uploads/2018/05/word-image-1135.png" class="wp-image-1251" srcset="/wp-content/uploads/2018/05/word-image-1135.png 887w, /wp-content/uploads/2018/05/word-image-1135-300x97.png 300w, /wp-content/uploads/2018/05/word-image-1135-768x248.png 768w" sizes="(max-width: 887px) 100vw, 887px" />
</p>
<p>
  创建外键并指定名字
</p>
<p>
  <img loading="lazy" decoding="async" width="791" height="175" src="/wp-content/uploads/2018/05/word-image-1136.png" class="wp-image-1252" srcset="/wp-content/uploads/2018/05/word-image-1136.png 791w, /wp-content/uploads/2018/05/word-image-1136-300x66.png 300w, /wp-content/uploads/2018/05/word-image-1136-768x170.png 768w" sizes="(max-width: 791px) 100vw, 791px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="1017" height="257" src="/wp-content/uploads/2018/05/word-image-1137.png" class="wp-image-1253" srcset="/wp-content/uploads/2018/05/word-image-1137.png 1017w, /wp-content/uploads/2018/05/word-image-1137-300x76.png 300w, /wp-content/uploads/2018/05/word-image-1137-768x194.png 768w" sizes="(max-width: 1017px) 100vw, 1017px" />
</p>
<p>
  修改表加外键
</p>
<p>
  alter table 表名add foreign key(外键字段) references 主表(主键);
</p>
<p>
  <img loading="lazy" decoding="async" width="909" height="88" src="/wp-content/uploads/2018/05/word-image-1138.png" class="wp-image-1254" srcset="/wp-content/uploads/2018/05/word-image-1138.png 909w, /wp-content/uploads/2018/05/word-image-1138-300x29.png 300w, /wp-content/uploads/2018/05/word-image-1138-768x74.png 768w" sizes="(max-width: 909px) 100vw, 909px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="914" height="296" src="/wp-content/uploads/2018/05/word-image-1139.png" class="wp-image-1255" srcset="/wp-content/uploads/2018/05/word-image-1139.png 914w, /wp-content/uploads/2018/05/word-image-1139-300x97.png 300w, /wp-content/uploads/2018/05/word-image-1139-768x249.png 768w" sizes="(max-width: 914px) 100vw, 914px" />
</p>
<h2>删除外键</h2>
<p>
  Alter table  表名 drop foreign key 外键名字;
</p>
<p>
  <img loading="lazy" decoding="async" width="771" height="89" src="/wp-content/uploads/2018/05/word-image-1140.png" class="wp-image-1256" srcset="/wp-content/uploads/2018/05/word-image-1140.png 771w, /wp-content/uploads/2018/05/word-image-1140-300x35.png 300w, /wp-content/uploads/2018/05/word-image-1140-768x89.png 768w" sizes="(max-width: 771px) 100vw, 771px" />
</p>
<h2>外键的基本要求</h2>
<ul>
<li>
    首先数据表字段是外键，表必须是innodb的数据库引擎
  </li>
<li>
    主表和从表的公用字段，数据类型和必要的属性必须一致
  </li>
<li>
    外键创建的时候需要注意数据的影响&#8212;（修改表后期加外键的时候）公用字段中从表的数据必须能在主表相应字段中找到
  </li>
</ul>
<p>
  <img loading="lazy" decoding="async" width="848" height="84" src="/wp-content/uploads/2018/05/word-image-1141.png" class="wp-image-1257" srcset="/wp-content/uploads/2018/05/word-image-1141.png 848w, /wp-content/uploads/2018/05/word-image-1141-300x30.png 300w, /wp-content/uploads/2018/05/word-image-1141-768x76.png 768w" sizes="(max-width: 848px) 100vw, 848px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="410" height="163" src="/wp-content/uploads/2018/05/word-image-1142.png" class="wp-image-1258" srcset="/wp-content/uploads/2018/05/word-image-1142.png 410w, /wp-content/uploads/2018/05/word-image-1142-300x119.png 300w" sizes="(max-width: 410px) 100vw, 410px" /></p>
<p>  <img loading="lazy" decoding="async" width="381" height="166" src="/wp-content/uploads/2018/05/word-image-1143.png" class="wp-image-1259" srcset="/wp-content/uploads/2018/05/word-image-1143.png 381w, /wp-content/uploads/2018/05/word-image-1143-300x131.png 300w" sizes="(max-width: 381px) 100vw, 381px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="1097" height="64" src="/wp-content/uploads/2018/05/word-image-1144.png" class="wp-image-1260" srcset="/wp-content/uploads/2018/05/word-image-1144.png 1097w, /wp-content/uploads/2018/05/word-image-1144-300x18.png 300w, /wp-content/uploads/2018/05/word-image-1144-768x45.png 768w, /wp-content/uploads/2018/05/word-image-1144-1024x60.png 1024w" sizes="(max-width: 1097px) 100vw, 1097px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="1001" height="150" src="/wp-content/uploads/2018/05/word-image-1145.png" class="wp-image-1261" srcset="/wp-content/uploads/2018/05/word-image-1145.png 1001w, /wp-content/uploads/2018/05/word-image-1145-300x45.png 300w, /wp-content/uploads/2018/05/word-image-1145-768x115.png 768w" sizes="(max-width: 1001px) 100vw, 1001px" />
</p>
<h2>外键约束</h2>
<h3>什么是外键约束</h3>
<p>
  就是对主表数据，和从表数据的一些要求
</p>
<p>
  从表中有的相关数据，主表中不能随意删除
</p>
<p>
  <img loading="lazy" decoding="async" width="821" height="416" src="/wp-content/uploads/2018/05/word-image-1146.png" class="wp-image-1262" srcset="/wp-content/uploads/2018/05/word-image-1146.png 821w, /wp-content/uploads/2018/05/word-image-1146-300x152.png 300w, /wp-content/uploads/2018/05/word-image-1146-768x389.png 768w" sizes="(max-width: 821px) 100vw, 821px" />
</p>
<p>
  想操作主表中的内容怎么办/
</p>
<p>
  把相关信息从从表中全部删除，再修改相应主表中的内容
</p>
<p>
  <img loading="lazy" decoding="async" width="929" height="323" src="/wp-content/uploads/2018/05/word-image-1147.png" class="wp-image-1263" srcset="/wp-content/uploads/2018/05/word-image-1147.png 929w, /wp-content/uploads/2018/05/word-image-1147-300x104.png 300w, /wp-content/uploads/2018/05/word-image-1147-768x267.png 768w" sizes="(max-width: 929px) 100vw, 929px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="727" height="129" src="/wp-content/uploads/2018/05/word-image-1148.png" class="wp-image-1264" srcset="/wp-content/uploads/2018/05/word-image-1148.png 727w, /wp-content/uploads/2018/05/word-image-1148-300x53.png 300w" sizes="(max-width: 727px) 100vw, 727px" />
</p>
<p>
  从表中用的相关数据，必须是主表中有的
</p>
<p>
  <img loading="lazy" decoding="async" width="939" height="387" src="/wp-content/uploads/2018/05/word-image-1149.png" class="wp-image-1265" srcset="/wp-content/uploads/2018/05/word-image-1149.png 939w, /wp-content/uploads/2018/05/word-image-1149-300x124.png 300w, /wp-content/uploads/2018/05/word-image-1149-768x317.png 768w" sizes="(max-width: 939px) 100vw, 939px" />
</p>
<h2>外键的意义</h2>
<p>
  保证了数据的一致性（外键约束的体现）
</p>
<p>
  和完整性（班级和人进行了关联）
</p>
<p>
  工作中一般很少使用外键，因为操作表数据的时候太麻烦，限制的条件太死
</p>
<h1>视图</h1>
<h2>	什么是视图</h2>
<p>
  视图其实就是一张虚构的表，这个表只有表结构，没有表数据，视图的数据是从真正的数据表中引用的，那么我们修改视图的数据相关数据表的数据也会被修改；说白了视图就是把select查询结果当做了一个表
</p>
<h2>	视图的操作</h2>
<h3>创建视图</h3>
<p>
  Create  view  view1 as   select 语句
</p>
<p>
  <img loading="lazy" decoding="async" width="876" height="115" src="/wp-content/uploads/2018/05/word-image-1150.png" class="wp-image-1266" srcset="/wp-content/uploads/2018/05/word-image-1150.png 876w, /wp-content/uploads/2018/05/word-image-1150-300x39.png 300w, /wp-content/uploads/2018/05/word-image-1150-768x101.png 768w" sizes="(max-width: 876px) 100vw, 876px" />
</p>
<h3>查看视图</h3>
<p>
  <img loading="lazy" decoding="async" width="650" height="199" src="/wp-content/uploads/2018/05/word-image-1151.png" class="wp-image-1267" srcset="/wp-content/uploads/2018/05/word-image-1151.png 650w, /wp-content/uploads/2018/05/word-image-1151-300x92.png 300w" sizes="(max-width: 650px) 100vw, 650px" />
</p>
<h3>使用视图</h3>
<p>
  和使用表的用法一样，注意这里视图主要是用于查询和修改的，一版不用于添加也不删除
</p>
<p>
  查询视图
</p>
<p>
  <img loading="lazy" decoding="async" width="604" height="140" src="/wp-content/uploads/2018/05/word-image-1152.png" class="wp-image-1268" srcset="/wp-content/uploads/2018/05/word-image-1152.png 604w, /wp-content/uploads/2018/05/word-image-1152-300x70.png 300w" sizes="(max-width: 604px) 100vw, 604px" />
</p>
<p>
  视图中的数据，都是从真实的表中来的
</p>
<p>
  create view view1 as
</p>
<p>
  	select class_name,name from class join student on class.id=student.class_id;
</p>
<p>
  <img loading="lazy" decoding="async" width="813" height="117" src="/wp-content/uploads/2018/05/word-image-1153.png" class="wp-image-1269" srcset="/wp-content/uploads/2018/05/word-image-1153.png 813w, /wp-content/uploads/2018/05/word-image-1153-300x43.png 300w, /wp-content/uploads/2018/05/word-image-1153-768x111.png 768w" sizes="(max-width: 813px) 100vw, 813px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="857" height="159" src="/wp-content/uploads/2018/05/word-image-1154.png" class="wp-image-1270" srcset="/wp-content/uploads/2018/05/word-image-1154.png 857w, /wp-content/uploads/2018/05/word-image-1154-300x56.png 300w, /wp-content/uploads/2018/05/word-image-1154-768x142.png 768w" sizes="(max-width: 857px) 100vw, 857px" />
</p>
<h3>删除视图</h3>
<p>
  <img loading="lazy" decoding="async" width="734" height="68" src="/wp-content/uploads/2018/05/word-image-1155.png" class="wp-image-1271" srcset="/wp-content/uploads/2018/05/word-image-1155.png 734w, /wp-content/uploads/2018/05/word-image-1155-300x28.png 300w" sizes="(max-width: 734px) 100vw, 734px" />
</p>
<h2>视图数据的操作</h2>
<h3>增加视图数据</h3>
<p>
  一般不是对视图的数据进行添加
</p>
<p>
  这个视图的数据是来源于多表的
</p>
<p>
  	肯定不能插入成功；
</p>
<p>
  <img loading="lazy" decoding="async" width="882" height="63" src="/wp-content/uploads/2018/05/word-image-1156.png" class="wp-image-1272" srcset="/wp-content/uploads/2018/05/word-image-1156.png 882w, /wp-content/uploads/2018/05/word-image-1156-300x21.png 300w, /wp-content/uploads/2018/05/word-image-1156-768x55.png 768w" sizes="(max-width: 882px) 100vw, 882px" />
</p>
<p>
  这个视图数据是来源于一张表的
</p>
<p>
  	当视图的数据是这个表中所有必须要写的数据的时候能插入
</p>
<p>
  	否则不能插入
</p>
<p>
  测试1
</p>
<p>
  <img loading="lazy" decoding="async" width="651" height="62" src="/wp-content/uploads/2018/05/word-image-1157.png" class="wp-image-1273" srcset="/wp-content/uploads/2018/05/word-image-1157.png 651w, /wp-content/uploads/2018/05/word-image-1157-300x29.png 300w" sizes="(max-width: 651px) 100vw, 651px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="874" height="61" src="/wp-content/uploads/2018/05/word-image-1158.png" class="wp-image-1274" srcset="/wp-content/uploads/2018/05/word-image-1158.png 874w, /wp-content/uploads/2018/05/word-image-1158-300x21.png 300w, /wp-content/uploads/2018/05/word-image-1158-768x54.png 768w" sizes="(max-width: 874px) 100vw, 874px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="834" height="214" src="/wp-content/uploads/2018/05/word-image-1159.png" class="wp-image-1275" srcset="/wp-content/uploads/2018/05/word-image-1159.png 834w, /wp-content/uploads/2018/05/word-image-1159-300x77.png 300w, /wp-content/uploads/2018/05/word-image-1159-768x197.png 768w" sizes="(max-width: 834px) 100vw, 834px" />
</p>
<p>
  测试2
</p>
<p>
  <img loading="lazy" decoding="async" width="961" height="278" src="/wp-content/uploads/2018/05/word-image-1160.png" class="wp-image-1276" srcset="/wp-content/uploads/2018/05/word-image-1160.png 961w, /wp-content/uploads/2018/05/word-image-1160-300x87.png 300w, /wp-content/uploads/2018/05/word-image-1160-768x222.png 768w" sizes="(max-width: 961px) 100vw, 961px" />
</p>
<h3>删除视图数据</h3>
<p>
  第一种：视图的数据来源于多个表
</p>
<p>
  <img loading="lazy" decoding="async" width="755" height="251" src="/wp-content/uploads/2018/05/word-image-1161.png" class="wp-image-1277" srcset="/wp-content/uploads/2018/05/word-image-1161.png 755w, /wp-content/uploads/2018/05/word-image-1161-300x100.png 300w" sizes="(max-width: 755px) 100vw, 755px" />
</p>
<p>
  第二种：视图的数据来源于一个表
</p>
<p>
  <img loading="lazy" decoding="async" width="896" height="269" src="/wp-content/uploads/2018/05/word-image-1162.png" class="wp-image-1278" srcset="/wp-content/uploads/2018/05/word-image-1162.png 896w, /wp-content/uploads/2018/05/word-image-1162-300x90.png 300w, /wp-content/uploads/2018/05/word-image-1162-768x231.png 768w" sizes="(max-width: 896px) 100vw, 896px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="792" height="191" src="/wp-content/uploads/2018/05/word-image-1163.png" class="wp-image-1279" srcset="/wp-content/uploads/2018/05/word-image-1163.png 792w, /wp-content/uploads/2018/05/word-image-1163-300x72.png 300w, /wp-content/uploads/2018/05/word-image-1163-768x185.png 768w" sizes="(max-width: 792px) 100vw, 792px" />
</p>
<h3>修改视图数据</h3>
<p>
  视图 数据的修改和表修改一样的用法都是使用update，视图数据的修改成功后，相应数据表中的数据也会发生改变
</p>
<p>
  <img loading="lazy" decoding="async" width="767" height="255" src="/wp-content/uploads/2018/05/word-image-1164.png" class="wp-image-1280" srcset="/wp-content/uploads/2018/05/word-image-1164.png 767w, /wp-content/uploads/2018/05/word-image-1164-300x100.png 300w" sizes="(max-width: 767px) 100vw, 767px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="879" height="185" src="/wp-content/uploads/2018/05/word-image-1165.png" class="wp-image-1281" srcset="/wp-content/uploads/2018/05/word-image-1165.png 879w, /wp-content/uploads/2018/05/word-image-1165-300x63.png 300w, /wp-content/uploads/2018/05/word-image-1165-768x162.png 768w" sizes="(max-width: 879px) 100vw, 879px" />
</p>
<p>
  查询视图
</p>
<p>
  和普通的表查询一样
</p>
<h2>视图的作用和好处</h2>
<p>
  视图的数据都是存在真实的表中的，但是视图的结构可以自己定义（select查询结果的结构）
</p>
<p>
  当一些敏感数据不想被用户看到，但是该表中还有些数据用户还必须使用
</p>
<p>
  我们就可以用视图来解决这个问题
</p>
<p>
  比如下边的一些敏感数据 年龄，性别我们都可以用视图来把这些信息不显示（只需要用select语句不选这两个字段），用户只需要有权限查询我们创建的视图就可以了
</p>
<table>
<tr>
<td>
<p>
  Id
</p>
</td>
<td>
<p>
  Name
</p>
</td>
<td>
<p>
  Age
</p>
</td>
<td>
<p>
  sex
</p>
</td>
</tr>
<tr>
<td>
<p>
  1
</p>
</td>
<td>
<p>
  林志玲
</p>
</td>
<td>
<p>
  67
</p>
</td>
<td>
<p>
  男
</p>
</td>
</tr>
<tr>
<td>
<p>
  2
</p>
</td>
<td>
<p>
  赵薇
</p>
</td>
<td>
<p>
  58
</p>
</td>
<td>
<p>
  男
</p>
</td>
</tr>
</table>
<p>
  我们可以把一些复杂的sql语句的结果做成视图
</p>
<p>
  	四表联查
</p>
<p>
  		班级名，学生名，课程名, 成绩
</p>
<p>
  	我们可以把四表联查的sql结果做成视图，每次我们需要查看这种数据的时候直接
</p>
<p>
  Select * from 视图;就可以了，而不用每次都写一个四表连接的sql
</p>
<p>
  如果一个表数据量太大有200万条，查询的速度慢
</p>
<p>
  我们可以把200条分别做成视图
</p>
<p>
  1-10万条是一个视图  （id从1&#8212;10万）
</p>
<p>
  10-20万条是一个视图	   （id从10万到20万）
</p>
<p>
  ……………
</p>
<p>
  我们查询前先判断id是哪个范围，再根据范围查找相应视图
</p>
<p>
  查询的效率就大大的提高了  这种做法就是把表横向切割&#8212;-分表
</p>
<h1>事务</h1>
<h2>什么是事务</h2>
<p>
  你向银行存钱 ，钱已经存入银行了，这是该把你的存钱记录存入电脑了，但是停电了
</p>
<p>
  	你的钱少了，但是钱没在银行提现
</p>
<p>
  你去银行取钱，钱取出来了，该从你的账户扣钱，这是又停电了，
</p>
<p>
  	你拿到钱了，银行账户余额没少
</p>
<p>
  在多条sql的时候，如果有一条不成功，那么所有的sql执行失效&#8212;事务
</p>
<h2>事务的执行流程</h2>
<p>
  开启事务   begin  /start transcation
</p>
<p>
  执行sql
</p>
<p>
  提交事务（所有sql执行成功） commit
</p>
<p>
  回滚  (有一条sql执行失败就回滚)  rollback
</p>
<p>
  注意;再开启事务后，没有提交事务，或是回滚都是没有效果的
</p>
<p>
  <img loading="lazy" decoding="async" width="961" height="301" src="/wp-content/uploads/2018/05/word-image-1166.png" class="wp-image-1282" srcset="/wp-content/uploads/2018/05/word-image-1166.png 961w, /wp-content/uploads/2018/05/word-image-1166-300x94.png 300w, /wp-content/uploads/2018/05/word-image-1166-768x241.png 768w" sizes="(max-width: 961px) 100vw, 961px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="969" height="236" src="/wp-content/uploads/2018/05/word-image-1167.png" class="wp-image-1283" srcset="/wp-content/uploads/2018/05/word-image-1167.png 969w, /wp-content/uploads/2018/05/word-image-1167-300x73.png 300w, /wp-content/uploads/2018/05/word-image-1167-768x187.png 768w" sizes="(max-width: 969px) 100vw, 969px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="745" height="276" src="/wp-content/uploads/2018/05/word-image-1168.png" class="wp-image-1284" srcset="/wp-content/uploads/2018/05/word-image-1168.png 745w, /wp-content/uploads/2018/05/word-image-1168-300x111.png 300w" sizes="(max-width: 745px) 100vw, 745px" />
</p>
<p>
  测试2
</p>
<p>
  事务执行没有完成的时候，数据表的数据没有任何变化
</p>
<p>
  <img loading="lazy" decoding="async" width="868" height="244" src="/wp-content/uploads/2018/05/word-image-1169.png" class="wp-image-1285" srcset="/wp-content/uploads/2018/05/word-image-1169.png 868w, /wp-content/uploads/2018/05/word-image-1169-300x84.png 300w, /wp-content/uploads/2018/05/word-image-1169-768x216.png 768w" sizes="(max-width: 868px) 100vw, 868px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="743" height="306" src="/wp-content/uploads/2018/05/word-image-1170.png" class="wp-image-1286" srcset="/wp-content/uploads/2018/05/word-image-1170.png 743w, /wp-content/uploads/2018/05/word-image-1170-300x124.png 300w" sizes="(max-width: 743px) 100vw, 743px" />
</p>
<p>
  	提交事务后，数据表中的数据会永久性的改变
</p>
<p>
  <img loading="lazy" decoding="async" width="638" height="62" src="/wp-content/uploads/2018/05/word-image-1171.png" class="wp-image-1287" srcset="/wp-content/uploads/2018/05/word-image-1171.png 638w, /wp-content/uploads/2018/05/word-image-1171-300x29.png 300w" sizes="(max-width: 638px) 100vw, 638px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="808" height="345" src="/wp-content/uploads/2018/05/word-image-1172.png" class="wp-image-1288" srcset="/wp-content/uploads/2018/05/word-image-1172.png 808w, /wp-content/uploads/2018/05/word-image-1172-300x128.png 300w, /wp-content/uploads/2018/05/word-image-1172-768x328.png 768w" sizes="(max-width: 808px) 100vw, 808px" />
</p>
<h2>事务基本原理图</h2>
<p>
  <img loading="lazy" decoding="async" width="1328" height="552" src="/wp-content/uploads/2018/05/word-image-1173.png" class="wp-image-1289" srcset="/wp-content/uploads/2018/05/word-image-1173.png 1328w, /wp-content/uploads/2018/05/word-image-1173-300x125.png 300w, /wp-content/uploads/2018/05/word-image-1173-768x319.png 768w, /wp-content/uploads/2018/05/word-image-1173-1024x426.png 1024w" sizes="(max-width: 1328px) 100vw, 1328px" />
</p>
<h2>事务的特点（acid）</h2>
<ul>
<li>
    原子性（Atomicity）
  </li>
</ul>
<p>
  事务里边的所有sql语句是一个整体，不可分割，要么全部执行成功，要么全部执行失败
</p>
<ul>
<li>
    一致性（consistency）
  </li>
</ul>
<p>
  事务执行过后，没有用户访问到的数据都是一样的
</p>
<p>
  <img loading="lazy" decoding="async" width="1045" height="476" src="/wp-content/uploads/2018/05/word-image-1174.png" class="wp-image-1290" srcset="/wp-content/uploads/2018/05/word-image-1174.png 1045w, /wp-content/uploads/2018/05/word-image-1174-300x137.png 300w, /wp-content/uploads/2018/05/word-image-1174-768x350.png 768w, /wp-content/uploads/2018/05/word-image-1174-1024x466.png 1024w" sizes="(max-width: 1045px) 100vw, 1045px" />
</p>
<ul>
<li>
    隔离性（Isolation）
  </li>
</ul>
<p>
  事务与事务之间没有影响各自执行自己的命令
</p>
<p>
  当前事务一开启执行后，开启事务2，操的数据如果一样比如是同一行数据，那么事务2会等待事务1结束以后再执行，开启事务1以后，操作的这行数据就会被‘锁’起来，其他的命令不能操作
</p>
<p>
  <img loading="lazy" decoding="async" width="1431" height="180" src="/wp-content/uploads/2018/05/word-image-1175.png" class="wp-image-1291" srcset="/wp-content/uploads/2018/05/word-image-1175.png 1431w, /wp-content/uploads/2018/05/word-image-1175-300x38.png 300w, /wp-content/uploads/2018/05/word-image-1175-768x97.png 768w, /wp-content/uploads/2018/05/word-image-1175-1024x129.png 1024w" sizes="(max-width: 1431px) 100vw, 1431px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="831" height="144" src="/wp-content/uploads/2018/05/word-image-1176.png" class="wp-image-1292" srcset="/wp-content/uploads/2018/05/word-image-1176.png 831w, /wp-content/uploads/2018/05/word-image-1176-300x52.png 300w, /wp-content/uploads/2018/05/word-image-1176-768x133.png 768w" sizes="(max-width: 831px) 100vw, 831px" />
</p>
<ul>
<li>
    永久性（Durability）
  </li>
</ul>
<p>
  事务结束以后，对表的影响是永久有效的
</p>
<h1>Mysql编程</h1>
<h2>系统函数(了解)</h2>
<ul>
<li>
    字符串函数，比如：char_length(), concat(), instr(), lcase(), left(), ltrim(), mid()
  </li>
<li>
    时间函数，比如：now(), cordate(), curtime(), datediff(), date_add()
  </li>
<li>
    数学函数，比如：abs(), ceiling(), floor(), pow(), rand(), round()
  </li>
<li>
    其他函数，比如：md5(), version(), datebase(), UUID()
  </li>
</ul>
<p>
  系统函数就是mysql系统自己定义的函数，我们只需要调用就可以了
</p>
<p>
  <img loading="lazy" decoding="async" width="981" height="153" src="/wp-content/uploads/2018/05/word-image-1177.png" class="wp-image-1293" srcset="/wp-content/uploads/2018/05/word-image-1177.png 981w, /wp-content/uploads/2018/05/word-image-1177-300x47.png 300w, /wp-content/uploads/2018/05/word-image-1177-768x120.png 768w" sizes="(max-width: 981px) 100vw, 981px" />
</p>
<h2>存储函数</h2>
<p>
  就是自己定义函数，必须返回一个单独的值，存储函数里边不能有结果集显示不能有select show 等命令
</p>
<h3>创建存储函数</h3>
<p>
  创建语法：
</p>
<p>
  	create function 函数名(参数1 类型1,参数2 类型2&#8230;..) returns 返回值类型
</p>
<p>
  begin
</p>
<p>
  	&#8230;..
</p>
<p>
  end;
</p>
<p>
  其中begin和end 就是开始和结束的标识 可以理解成PHP的 {  }
</p>
<p>
  <img loading="lazy" decoding="async" width="1030" height="134" src="/wp-content/uploads/2018/05/word-image-1178.png" class="wp-image-1294" srcset="/wp-content/uploads/2018/05/word-image-1178.png 1030w, /wp-content/uploads/2018/05/word-image-1178-300x39.png 300w, /wp-content/uploads/2018/05/word-image-1178-768x100.png 768w, /wp-content/uploads/2018/05/word-image-1178-1024x133.png 1024w" sizes="(max-width: 1030px) 100vw, 1030px" />
</p>
<p>
  解决：修改sql代码执行结束符
</p>
<p>
  	命令：delimiter  新的结束符
</p>
<p>
  <img loading="lazy" decoding="async" width="564" height="64" src="/wp-content/uploads/2018/05/word-image-1179.png" class="wp-image-1295" srcset="/wp-content/uploads/2018/05/word-image-1179.png 564w, /wp-content/uploads/2018/05/word-image-1179-300x34.png 300w" sizes="(max-width: 564px) 100vw, 564px" />
</p>
<p>
  声明存储函数
</p>
<p>
  <img loading="lazy" decoding="async" width="769" height="150" src="/wp-content/uploads/2018/05/word-image-1180.png" class="wp-image-1296" srcset="/wp-content/uploads/2018/05/word-image-1180.png 769w, /wp-content/uploads/2018/05/word-image-1180-300x59.png 300w, /wp-content/uploads/2018/05/word-image-1180-768x150.png 768w" sizes="(max-width: 769px) 100vw, 769px" />
</p>
<p>
  查看存储函数状态；
</p>
<p>
  Show function status;
</p>
<p>
  <img loading="lazy" decoding="async" width="976" height="216" src="/wp-content/uploads/2018/05/word-image-1181.png" class="wp-image-1297" srcset="/wp-content/uploads/2018/05/word-image-1181.png 976w, /wp-content/uploads/2018/05/word-image-1181-300x66.png 300w, /wp-content/uploads/2018/05/word-image-1181-768x170.png 768w" sizes="(max-width: 976px) 100vw, 976px" />
</p>
<p>
  存储函数是属于某一个数据库的只能在当前这个数据库中使用
</p>
<h3>调用存储函数</h3>
<p>
  一般存储函数的调用和select 连用
</p>
<p>
  其实和系统函数的使用没有差别，都是函数的调用
</p>
<p>
  <img loading="lazy" decoding="async" width="566" height="135" src="/wp-content/uploads/2018/05/word-image-1182.png" class="wp-image-1298" srcset="/wp-content/uploads/2018/05/word-image-1182.png 566w, /wp-content/uploads/2018/05/word-image-1182-300x72.png 300w" sizes="(max-width: 566px) 100vw, 566px" />
</p>
<p>
  扩展，如果传入的参数类型不是int会怎么样？
</p>
<p>
  <img loading="lazy" decoding="async" width="856" height="76" src="/wp-content/uploads/2018/05/word-image-1183.png" class="wp-image-1299" srcset="/wp-content/uploads/2018/05/word-image-1183.png 856w, /wp-content/uploads/2018/05/word-image-1183-300x27.png 300w, /wp-content/uploads/2018/05/word-image-1183-768x68.png 768w" sizes="(max-width: 856px) 100vw, 856px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="915" height="197" src="/wp-content/uploads/2018/05/word-image-1184.png" class="wp-image-1300" srcset="/wp-content/uploads/2018/05/word-image-1184.png 915w, /wp-content/uploads/2018/05/word-image-1184-300x65.png 300w, /wp-content/uploads/2018/05/word-image-1184-768x165.png 768w" sizes="(max-width: 915px) 100vw, 915px" />
</p>
<h3>删除存储函数</h3>
<p>
  drop function 函数名;
</p>
<p>
  <img loading="lazy" decoding="async" width="840" height="76" src="/wp-content/uploads/2018/05/word-image-1185.png" class="wp-image-1301" srcset="/wp-content/uploads/2018/05/word-image-1185.png 840w, /wp-content/uploads/2018/05/word-image-1185-300x27.png 300w, /wp-content/uploads/2018/05/word-image-1185-768x69.png 768w" sizes="(max-width: 840px) 100vw, 840px" />
</p>
<p>
  总结：存储函数就是一个普通的有返回值的函数，这里返回值必须是一个单独的数据
</p>
<p>
  		存储函数里边不能使用select show等命令因为，select show 返回的是一个结果集
</p>
<h2>变量</h2>
<h3>系统变量</h3>
<p>
  查看系统变量
</p>
<p>
  Show variables;
</p>
<p>
  Autocommit  自动事务的提交，默认自动事务的提交会开启的
</p>
<p>
  自动事务的开启  set atuocommit=1;
</p>
<p>
  关闭   set  autocommit=0;
</p>
<p>
  <img loading="lazy" decoding="async" width="862" height="233" src="/wp-content/uploads/2018/05/word-image-1186.png" class="wp-image-1302" srcset="/wp-content/uploads/2018/05/word-image-1186.png 862w, /wp-content/uploads/2018/05/word-image-1186-300x81.png 300w, /wp-content/uploads/2018/05/word-image-1186-768x208.png 768w" sizes="(max-width: 862px) 100vw, 862px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="1444" height="268" src="/wp-content/uploads/2018/05/word-image-1187.png" class="wp-image-1303" srcset="/wp-content/uploads/2018/05/word-image-1187.png 1444w, /wp-content/uploads/2018/05/word-image-1187-300x56.png 300w, /wp-content/uploads/2018/05/word-image-1187-768x143.png 768w, /wp-content/uploads/2018/05/word-image-1187-1024x190.png 1024w" sizes="(max-width: 1444px) 100vw, 1444px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="1503" height="361" src="/wp-content/uploads/2018/05/word-image-1188.png" class="wp-image-1304" srcset="/wp-content/uploads/2018/05/word-image-1188.png 1503w, /wp-content/uploads/2018/05/word-image-1188-300x72.png 300w, /wp-content/uploads/2018/05/word-image-1188-768x184.png 768w, /wp-content/uploads/2018/05/word-image-1188-1024x246.png 1024w" sizes="(max-width: 1503px) 100vw, 1503px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="1638" height="334" src="/wp-content/uploads/2018/05/word-image-1189.png" class="wp-image-1305" srcset="/wp-content/uploads/2018/05/word-image-1189.png 1638w, /wp-content/uploads/2018/05/word-image-1189-300x61.png 300w, /wp-content/uploads/2018/05/word-image-1189-768x157.png 768w, /wp-content/uploads/2018/05/word-image-1189-1024x209.png 1024w" sizes="(max-width: 1638px) 100vw, 1638px" />
</p>
<h3>局部变量</h3>
<p>
  用declare声明的变量
</p>
<p>
  声明格式是如下
</p>
<p>
  	Declare 变量名 类型  default 默认值；
</p>
<p>
  局部变量一般使用在函数的begin  end中间，应该先声明再使用；
</p>
<h3>会话变量</h3>
<p>
  就是在一次数据库连接中都生效的变量
</p>
<p>
  声明方式是：set  @变量名=值；
</p>
<p>
  <img loading="lazy" decoding="async" width="1052" height="220" src="/wp-content/uploads/2018/05/word-image-1190.png" class="wp-image-1306" srcset="/wp-content/uploads/2018/05/word-image-1190.png 1052w, /wp-content/uploads/2018/05/word-image-1190-300x63.png 300w, /wp-content/uploads/2018/05/word-image-1190-768x161.png 768w, /wp-content/uploads/2018/05/word-image-1190-1024x214.png 1024w" sizes="(max-width: 1052px) 100vw, 1052px" />
</p>
<h2>流程控制</h2>
<h3>If分支</h3>
<p>
  if 条件 then
</p>
<p>
  	//代码
</p>
<p>
  elseif 条件 then
</p>
<p>
  	//代码
</p>
<p>
  else
</p>
<p>
  	//代码
</p>
<p>
  end if;
</p>
<p>
  做一个判断学生成绩的函数，如果分数超过80为优秀，超过60为及格 ，低于60不及格
</p>
<p>
  <img loading="lazy" decoding="async" width="1000" height="272" src="/wp-content/uploads/2018/05/word-image-1191.png" class="wp-image-1307" srcset="/wp-content/uploads/2018/05/word-image-1191.png 1000w, /wp-content/uploads/2018/05/word-image-1191-300x82.png 300w, /wp-content/uploads/2018/05/word-image-1191-768x209.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="819" height="433" src="/wp-content/uploads/2018/05/word-image-1192.png" class="wp-image-1308" srcset="/wp-content/uploads/2018/05/word-image-1192.png 819w, /wp-content/uploads/2018/05/word-image-1192-300x159.png 300w, /wp-content/uploads/2018/05/word-image-1192-768x406.png 768w" sizes="(max-width: 819px) 100vw, 819px" />
</p>
<h3>While循环</h3>
<p>
  while 条件 do
</p>
<p>
  	//代码
</p>
<p>
  end while;
</p>
<p>
  案例，求一个数的阶乘
</p>
<p>
  <img loading="lazy" decoding="async" width="911" height="209" src="/wp-content/uploads/2018/05/word-image-1193.png" class="wp-image-1309" srcset="/wp-content/uploads/2018/05/word-image-1193.png 911w, /wp-content/uploads/2018/05/word-image-1193-300x69.png 300w, /wp-content/uploads/2018/05/word-image-1193-768x176.png 768w" sizes="(max-width: 911px) 100vw, 911px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="741" height="138" src="/wp-content/uploads/2018/05/word-image-1194.png" class="wp-image-1310" srcset="/wp-content/uploads/2018/05/word-image-1194.png 741w, /wp-content/uploads/2018/05/word-image-1194-300x56.png 300w" sizes="(max-width: 741px) 100vw, 741px" />
</p>
<h2>Mysql注释</h2>
<h3>第一种</h3>
<p>
  	&#8212; 注释  注&#8211;后有一个空格
</p>
<h3>第二种</h3>
<p>
  	# 注释  注#后有一个空格
</p>
<h3>第三种</h3>
<p>
  	/*
</p>
<p>
  	 多行注释
</p>
<p>
  	 */
</p>
<h2>存储过程</h2>
<p>
  什么是存储过程：说白了，存储过程也是一个mysql自定义函数，要求没有return返回值
</p>
<p>
  也就没有返回值的MySQL自定义函数，一般用于处理大型的业务逻辑，存储过程的代码只解析一次，
</p>
<p>
  存储过程也是只属于某一个数据库的
</p>
<h3>创建存储过程</h3>
<p>
  语法：
</p>
<p>
  Create procedure 名字 ([形参修饰符] 参数1 参数类型,[形参修饰符] 参数2,参数类型….)
</p>
<p>
  Begin
</p>
<p>
  End;
</p>
<p>
  <img loading="lazy" decoding="async" width="951" height="234" src="/wp-content/uploads/2018/05/word-image-1195.png" class="wp-image-1311" srcset="/wp-content/uploads/2018/05/word-image-1195.png 951w, /wp-content/uploads/2018/05/word-image-1195-300x74.png 300w, /wp-content/uploads/2018/05/word-image-1195-768x189.png 768w" sizes="(max-width: 951px) 100vw, 951px" />
</p>
<h3>调用存储过程</h3>
<p>
  存储过程的调用和存储函数的调用不同，存储函数不是单独调用的，可以和其他存储函数一块调用
</p>
<p>
  <img loading="lazy" decoding="async" width="806" height="179" src="/wp-content/uploads/2018/05/word-image-1196.png" class="wp-image-1312" srcset="/wp-content/uploads/2018/05/word-image-1196.png 806w, /wp-content/uploads/2018/05/word-image-1196-300x67.png 300w, /wp-content/uploads/2018/05/word-image-1196-768x171.png 768w" sizes="(max-width: 806px) 100vw, 806px" />
</p>
<h3>存储过程调用</h3>
<p>
  存储过程是单独调用的用到了call关键字
</p>
<p>
  用法:call 存储过程名字(参数列表);
</p>
<p>
  <img loading="lazy" decoding="async" width="729" height="153" src="/wp-content/uploads/2018/05/word-image-1197.png" class="wp-image-1313" srcset="/wp-content/uploads/2018/05/word-image-1197.png 729w, /wp-content/uploads/2018/05/word-image-1197-300x63.png 300w" sizes="(max-width: 729px) 100vw, 729px" />
</p>
<h3>查看存储过程</h3>
<p>
  Show  procedure  status;
</p>
<p>
  <img loading="lazy" decoding="async" width="976" height="171" src="/wp-content/uploads/2018/05/word-image-1198.png" class="wp-image-1314" srcset="/wp-content/uploads/2018/05/word-image-1198.png 976w, /wp-content/uploads/2018/05/word-image-1198-300x53.png 300w, /wp-content/uploads/2018/05/word-image-1198-768x135.png 768w" sizes="(max-width: 976px) 100vw, 976px" />
</p>
<h3>删除存储过程</h3>
<p>
  Drop  procedure 存储过程的名字
</p>
<p>
  <img loading="lazy" decoding="async" width="650" height="86" src="/wp-content/uploads/2018/05/word-image-1199.png" class="wp-image-1315" srcset="/wp-content/uploads/2018/05/word-image-1199.png 650w, /wp-content/uploads/2018/05/word-image-1199-300x40.png 300w" sizes="(max-width: 650px) 100vw, 650px" />
</p>
<h3>存储过程的形参修饰符in,out,inout</h3>
<p>
  形参修饰符放在参数前边，类型放在参数后边
</p>
<p>
  In
</p>
<p>
  	参数的值可以传入，但是存储过程不能修改这个值
</p>
<p>
  Out
</p>
<p>
  	不能传入值，能在内部修改变量的值，外部也生效
</p>
<p>
  Inout
</p>
<p>
  	能传入值，并且可以修改标量的值，并且外部也生效
</p>
<p>
  思考：存储函数和存储过程的区别
</p>
<h2>触发器</h2>
<h3>触发器概念</h3>
<h4>触发器的基本概念</h4>
<p>
  类似js中的点击事件，当我们点击了一个连接会自动的跳出一个窗口
</p>
<p>
  触发器是在操作数据的时候，比如删除(增加，更新)了某个表的数据的时候，自动调用的自定义函数
</p>
<h4>触发器的作用好处</h4>
<p>
  首先可以安全验证，&#8212;增加数据的时候，进行数据的安全验证
</p>
<p>
  	不用手动调用，&#8212;如果一件商品下架了，那么订单中就不要出现这个商品了，触发器可以自动的删除订单中的商品
</p>
<h3>创建触发器</h3>
<p>
  创建触发器基本语法
</p>
<p>
  create trigger 名称 after|before 事件 on 表名  for each row
</p>
<p>
  begin
</p>
<p>
  #SQL语句
</p>
<p>
  end //
</p>
<p>
  定义一个触发器，当删除商品的时候，自动的把订单中用相关商品的记录删除（自动）
</p>
<p>
  <img loading="lazy" decoding="async" width="822" height="82" src="/wp-content/uploads/2018/05/word-image-1200.png" class="wp-image-1316" srcset="/wp-content/uploads/2018/05/word-image-1200.png 822w, /wp-content/uploads/2018/05/word-image-1200-300x30.png 300w, /wp-content/uploads/2018/05/word-image-1200-768x77.png 768w" sizes="(max-width: 822px) 100vw, 822px" />
</p>
<p>
  触发事件  触发 触发器自动调用
</p>
<p>
  <img loading="lazy" decoding="async" width="973" height="49" src="/wp-content/uploads/2018/05/word-image-1201.png" class="wp-image-1317" srcset="/wp-content/uploads/2018/05/word-image-1201.png 973w, /wp-content/uploads/2018/05/word-image-1201-300x15.png 300w, /wp-content/uploads/2018/05/word-image-1201-768x39.png 768w" sizes="(max-width: 973px) 100vw, 973px" />
</p>
<p>
  删除商品信息后，再次查看订单表信息
</p>
<p>
  <img loading="lazy" decoding="async" width="782" height="50" src="/wp-content/uploads/2018/05/word-image-1202.png" class="wp-image-1318" srcset="/wp-content/uploads/2018/05/word-image-1202.png 782w, /wp-content/uploads/2018/05/word-image-1202-300x19.png 300w, /wp-content/uploads/2018/05/word-image-1202-768x49.png 768w" sizes="(max-width: 782px) 100vw, 782px" />
</p>
</p>
<p>
  触发时机关键字：before, after
</p>
<p>
  触发事件关键字：insert, delete, update
</p>
<p>
  触发器一共有
</p>
<p>
  	6中before insert，before delete，before update，after insert ,after delete,after update;
</p>
<p>
  注意触发器不能有冲突
</p>
<p>
  <img loading="lazy" decoding="async" width="1053" height="119" src="/wp-content/uploads/2018/05/word-image-1203.png" class="wp-image-1319" srcset="/wp-content/uploads/2018/05/word-image-1203.png 1053w, /wp-content/uploads/2018/05/word-image-1203-300x34.png 300w, /wp-content/uploads/2018/05/word-image-1203-768x87.png 768w, /wp-content/uploads/2018/05/word-image-1203-1024x116.png 1024w" sizes="(max-width: 1053px) 100vw, 1053px" />
</p>
<h3>触发器的应用</h3>
<h4>触发器中的关键字：new</h4>
<p>
  	New新添加的记录信息
</p>
<p>
  	Before  Delete
</p>
<p>
  	After  delete
</p>
<p>
  	两个都没有new关键字
</p>
<h4>触发器中的关键字：old</h4>
<p>
  	Old代表老的信息记录
</p>
<p>
  	Before insert 这个触发器有old吗？ 没有</p>
]]></content:encoded>
					
					<wfw:commentRss>/%e6%95%b0%e6%8d%ae%e5%ba%93/mysql/1249.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
