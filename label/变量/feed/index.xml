<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>变量 &#8211; 个人随笔</title>
	<atom:link href="/label/%E5%8F%98%E9%87%8F/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Sun, 20 May 2018 01:23:34 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.1</generator>

<image>
	<url>/wp-content/uploads/2022/01/cropped-截屏2022-01-01-18.57.09-32x32.png</url>
	<title>变量 &#8211; 个人随笔</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>PHP 语法（一）定界符、 执行原理、 执行过程、 语法、 输出语句、 变量、 常量、 编译型、 解释型</title>
		<link>/php/712.html</link>
					<comments>/php/712.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Thu, 17 May 2018 16:48:20 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[PHP基本语法]]></category>
		<category><![CDATA[PHP 定界符]]></category>
		<category><![CDATA[PHP 执行原理]]></category>
		<category><![CDATA[PHP 执行过程]]></category>
		<category><![CDATA[PHP 语法]]></category>
		<category><![CDATA[PHP 输出语句]]></category>
		<category><![CDATA[变量]]></category>
		<category><![CDATA[常量]]></category>
		<category><![CDATA[编译型]]></category>
		<category><![CDATA[解释型]]></category>
		<guid isPermaLink="false">/?p=712</guid>

					<description><![CDATA[PHP语法（一） 回顾 PHP：超文本预处理器，这是一种运行在服务器端的开源的脚本语言 LAMP：Linux+ [&#8230;]]]></description>
										<content:encoded><![CDATA[</p>
<h1>PHP语法（一）</h1>
<h2>回顾</h2>
<ol>
<li>
  PHP：超文本预处理器，这是一种运行在服务器端的开源的脚本语言
</li>
<li>
  LAMP：Linux+Apache+MySQL+PHP，这4个软件全部都是开源的
</li>
<li>
  静态网站和动态网站</p>
<ol>
<li>
    静态网站：不具有数据交互功能的网站
  </li>
<li>
    动态网站：具有数据交互功能的网站
  </li>
<li>
    实现动态网站的技术：asp	php	.net		java
  </li>
</ol>
</li>
<li>
  客户端和服务器端</p>
<ol>
<li>
    服务器端：为访问者提供服务的计算机，从狭义上来说，Apache是服务器。
  </li>
<li>
    客户端：用来请求服务器的计算机，web客户端是IE，QQ客户端是软件
  </li>
</ol>
</li>
<li>
  端口和端口号  0~65535
</li>
<li>
  BS架构（浏览器和服务器）和CS架构（客户端软件和服务器）
</li>
<li>
  前台和后台
</li>
<li>
  IP地址和域名</p>
<ol>
<li>
    通过IP地址唯一标识每台计算机
  </li>
<li>
    域名是IP地址的别名，为了便于记忆。
  </li>
</ol>
</li>
<li>
  PHP优点</p>
<ol>
<li>
    跨平台
  </li>
<li>
    源码开发
  </li>
<li>
    语法简单
  </li>
</ol>
</li>
<li>
  安装Apache</p>
<ol>
<li>
    httpd命令在bin目录下
  </li>
<li>
    htdocs是默认的虚拟目录
  </li>
<li>
    conf是配置文件夹
  </li>
<li>
    conf/httpd.conf是Apache的配置文件
  </li>
<li>
    httpd -t 用来检测apache的运行情况
  </li>
<li>
    httpd -M	用来显示加载的模块
  </li>
<li>
    httpd -k start/stop/restart
  </li>
<li>
    apache的启动/停止/重启
  </li>
<li><a href="http://localhost/" class="broken_link">http://localhost/</a>显示itworks表示正常
  </li>
</ol>
</li>
<li>
  安装PHP</p>
<ol>
<li>
    在httpd.conf中通过LoadModule加载PHP模块
  </li>
<li>
    在httpd.conf中当访问PHP页面的时候调用PHP模块
  </li>
<li>
    在httpd.conf中指定PHP配置文件  phpinidir
  </li>
</ol>
</li>
</ol>
<p><img decoding="async" width="445" height="49" src="/wp-content/uploads/2018/05/word-image-617.png" class="wp-image-714" srcset="/wp-content/uploads/2018/05/word-image-617.png 445w, /wp-content/uploads/2018/05/word-image-617-300x33.png 300w" sizes="(max-width: 445px) 100vw, 445px" /></p>
<ul>
<li>
<ol>
<li>
      在php.ini中通过extension_dir指定PHP扩展的加载位置
    </li>
</ol>
</li>
</ul>
<ol>
<li>
  安装MySQL</p>
<ol>
<li>
    MySQL的端口号是3306
  </li>
</ol>
</li>
</ol>
<p>
  到此wamp安装完毕，下面提高部分
</p>
<ol>
<li>
  更改虚拟目录位置，在httpd.conf中DocumentRoot更改虚拟目录指令
</li>
<li>
  注意：更改虚拟目录位置的同时一定要更改虚拟目录的权限
</li>
</ol>
<p>
  &lt;Directory 虚拟目录路径&gt;
</p>
<p>
  &lt;/Directory&gt;
</p>
<ul>
<li>
<ol>
<li>
      allow from all		允许所有
    </li>
<li>
      order allow,deny	先执行允许，后执行拒绝
    </li>
<li>
      options indexes	目录中的文件用索引方式显示
    </li>
<li>
      allowoverride all	允许分布式部署文件覆盖
    </li>
</ol>
</li>
</ul>
<ol>
<li>
  更改默认首页  DirectoryIndex index.html index.php
</li>
<li>
  更改监听端口 Linten 80
</li>
<li>
  虚拟主机配置  httpd-vhosts.conf文件中配置
</li>
<li>
  DNS解析   system32/drivers/etc/hosts文件中
</li>
<li>
  分布式部署</p>
<ol>
<li>
    文件名是.htaccess文件
  </li>
<li>
    在当前目录及子目录中有效
  </li>
<li>
    可以更改apache和php的配置（php_flag  php_value）
  </li>
</ol>
</li>
</ol>
<p>
  总结：httpd.conf对Apache起作用，php.ini对PHP起作用 .htaccess对apache和PHP都起作用
</p>
<p>
  配置文件可分为两个部分：主配置文件系统，分布式配置文件
</p>
<h2>解释型和编译型</h2>
<p><img fetchpriority="high" decoding="async" width="656" height="147" src="/wp-content/uploads/2018/05/word-image-618.png" class="wp-image-715" srcset="/wp-content/uploads/2018/05/word-image-618.png 656w, /wp-content/uploads/2018/05/word-image-618-300x67.png 300w" sizes="(max-width: 656px) 100vw, 656px" /></p>
<p>
  如果保存了可执行代码是编译型语言，没有保存可执行代码是解释型语言
</p>
<h2>PHP执行过程</h2>
<p><img decoding="async" width="1009" height="67" src="/wp-content/uploads/2018/05/word-image-619.png" class="wp-image-716" srcset="/wp-content/uploads/2018/05/word-image-619.png 1009w, /wp-content/uploads/2018/05/word-image-619-300x20.png 300w, /wp-content/uploads/2018/05/word-image-619-768x51.png 768w" sizes="(max-width: 1009px) 100vw, 1009px" /></p>
<p>
  脚下留心：PHP生成的中间语言保存在内存中（这点和java,.net不一样，这两门语言是可以看到中间文件的），PHP看不到中间文件。如果从能否看见中间文件这个角度来说PHP是解释型的；从是否生成中间文件来说PHP是编译型的。
</p>
<h2>EditPlus介绍</h2>
<p>
  体积小，可以自定义插件的一个开发工具
</p>
<h3>EditPlus的设置</h3>
<p><img loading="lazy" decoding="async" width="488" height="69" src="/wp-content/uploads/2018/05/word-image-620.png" class="wp-image-717" srcset="/wp-content/uploads/2018/05/word-image-620.png 488w, /wp-content/uploads/2018/05/word-image-620-300x42.png 300w" sizes="(max-width: 488px) 100vw, 488px" /><br />
<img loading="lazy" decoding="async" width="535" height="318" src="/wp-content/uploads/2018/05/word-image-621.png" class="wp-image-718" srcset="/wp-content/uploads/2018/05/word-image-621.png 535w, /wp-content/uploads/2018/05/word-image-621-300x178.png 300w" sizes="(max-width: 535px) 100vw, 535px" /></p>
<h2>PHP四种定界符</h2>
<ol>
<li>
  标准风格【推荐使用】
</li>
</ol>
<p>
  &lt;?php
</p>
<p>
  	echo &#8216;i am a boy!!!&#8217;;
</p>
<p>
  ?&gt;
</p>
<ol>
<li>
  短标记风格（在php.ini中将short_open_tag = On）
</li>
</ol>
<p>
  默认情况下不支持短标记，必须在php.ini配置文件中开启支持短标记
</p>
<p>
  &lt;?
</p>
<p>
  	echo &#8216;i am a boy!!!&#8217;;
</p>
<p>
  ?&gt;
</p>
<ol>
<li>
  asp风格（在php.ini中将asp_tags = on）
</li>
</ol>
<p>
  默认不支持asp风格
</p>
<p>
  &lt;%
</p>
<p>
  	echo &#8216;i am a boy!!!&#8217;;
</p>
<p>
  %&gt;
</p>
<ol>
<li>
  script标记风格
</li>
</ol>
<p>
  &lt;script language=&#8221;php&#8221;&gt;
</p>
<p>
  echo &#8216;i am a girl!!!&#8217;;
</p>
<p>
  &lt;/script&gt;
</p>
<h2>PHP的执行原理</h2>
<p><img loading="lazy" decoding="async" width="764" height="389" src="/wp-content/uploads/2018/05/word-image-622.png" class="wp-image-719" srcset="/wp-content/uploads/2018/05/word-image-622.png 764w, /wp-content/uploads/2018/05/word-image-622-300x153.png 300w" sizes="(max-width: 764px) 100vw, 764px" /></p>
<p><strong>客户端向服务器发送请求：</strong>
</p>
<ol>
<li>
  如果请求的是HTML页面，服务器不执行，将页面的代码全部发送到客户端。
</li>
<li>
  如果请求的是PHP，服务器会执行PHP页面，执行完毕后会生成标准的HTML代码，然后将HTML代码发送到客户端
</li>
</ol>
<h2>PHP语法特点</h2>
<p>
  PHP用分号表示语句的结束
</p>
<p>
  PHP变量名是区分大小写的，但是关键字不区分大小写
</p>
<h2>PHP支持省略结束标记</h2>
<p>
  &lt;?php表示php语言的开始，  ?&gt;表示php语言的结束。
</p>
<p>
  如果一个页面从PHP开始一直到页面的最后全部是PHP代码，PHP结束符是可以省略的。
</p>
<p><img loading="lazy" decoding="async" width="297" height="113" src="/wp-content/uploads/2018/05/word-image-623.png" class="wp-image-720" /><br />
<img loading="lazy" decoding="async" width="676" height="167" src="/wp-content/uploads/2018/05/word-image-624.png" class="wp-image-721" srcset="/wp-content/uploads/2018/05/word-image-624.png 676w, /wp-content/uploads/2018/05/word-image-624-300x74.png 300w" sizes="(max-width: 676px) 100vw, 676px" /></p>
<p>
  PHP结束符中有一个隐藏的分号
</p>
<p><img loading="lazy" decoding="async" width="515" height="106" src="/wp-content/uploads/2018/05/word-image-625.png" class="wp-image-722" srcset="/wp-content/uploads/2018/05/word-image-625.png 515w, /wp-content/uploads/2018/05/word-image-625-300x62.png 300w" sizes="(max-width: 515px) 100vw, 515px" /></p>
<h2>页面显示乱码解决</h2>
<p><img loading="lazy" decoding="async" width="592" height="102" src="/wp-content/uploads/2018/05/word-image-626.png" class="wp-image-723" srcset="/wp-content/uploads/2018/05/word-image-626.png 592w, /wp-content/uploads/2018/05/word-image-626-300x52.png 300w" sizes="(max-width: 592px) 100vw, 592px" /></p>
<p>
  解决方法一：在内容最上面输出&lt;meta&gt;标记
</p>
<p><img loading="lazy" decoding="async" width="578" height="77" src="/wp-content/uploads/2018/05/word-image-627.png" class="wp-image-724" srcset="/wp-content/uploads/2018/05/word-image-627.png 578w, /wp-content/uploads/2018/05/word-image-627-300x40.png 300w" sizes="(max-width: 578px) 100vw, 578px" /></p>
<p>
  解决方法二：header()
</p>
<p><img loading="lazy" decoding="async" width="713" height="74" src="/wp-content/uploads/2018/05/word-image-628.png" class="wp-image-725" srcset="/wp-content/uploads/2018/05/word-image-628.png 713w, /wp-content/uploads/2018/05/word-image-628-300x31.png 300w" sizes="(max-width: 713px) 100vw, 713px" /></p>
<h2>PHP注释</h2>
<p>
  PHP注释有单行注释和多行注释
</p>
<p><img loading="lazy" decoding="async" width="428" height="126" src="/wp-content/uploads/2018/05/word-image-629.png" class="wp-image-726" srcset="/wp-content/uploads/2018/05/word-image-629.png 428w, /wp-content/uploads/2018/05/word-image-629-300x88.png 300w" sizes="(max-width: 428px) 100vw, 428px" /></p>
<h2>输出语句</h2>
<p>
  在PHP中常用的输出有echo，print，print_r，var_dump
</p>
<h3>echo【适合输出字符串和数字】</h3>
<p><img loading="lazy" decoding="async" width="1039" height="130" src="/wp-content/uploads/2018/05/word-image-630.png" class="wp-image-727" srcset="/wp-content/uploads/2018/05/word-image-630.png 1039w, /wp-content/uploads/2018/05/word-image-630-300x38.png 300w, /wp-content/uploads/2018/05/word-image-630-768x96.png 768w, /wp-content/uploads/2018/05/word-image-630-1024x128.png 1024w" sizes="(max-width: 1039px) 100vw, 1039px" /></p>
<p>
  echo可以输出字符串和数字型，不适合输出布尔和数组，true输出成1，false输出成空，数组输出成array
</p>
<p>
  echo可以一次输出多个数据。
</p>
<h3>print</h3>
<p>
  print和echo大体一样，可以输出字符串和数字，不适合输出布尔和数组
</p>
<p>
  print每次只能输出一个值，输出成功会返回1。
</p>
<p><img loading="lazy" decoding="async" width="856" height="216" src="/wp-content/uploads/2018/05/word-image-631.png" class="wp-image-728" srcset="/wp-content/uploads/2018/05/word-image-631.png 856w, /wp-content/uploads/2018/05/word-image-631-300x76.png 300w, /wp-content/uploads/2018/05/word-image-631-768x194.png 768w" sizes="(max-width: 856px) 100vw, 856px" /></p>
<h3>print_r</h3>
<p><img loading="lazy" decoding="async" width="646" height="182" src="/wp-content/uploads/2018/05/word-image-632.png" class="wp-image-729" srcset="/wp-content/uploads/2018/05/word-image-632.png 646w, /wp-content/uploads/2018/05/word-image-632-300x85.png 300w" sizes="(max-width: 646px) 100vw, 646px" /></p>
<p>
  print_r主要用来输出数组。
</p>
<h3>var_dump()【输出内容+数据类型+字符串长度】</h3>
<p><img loading="lazy" decoding="async" width="773" height="176" src="/wp-content/uploads/2018/05/word-image-633.png" class="wp-image-730" srcset="/wp-content/uploads/2018/05/word-image-633.png 773w, /wp-content/uploads/2018/05/word-image-633-300x68.png 300w, /wp-content/uploads/2018/05/word-image-633-768x175.png 768w" sizes="(max-width: 773px) 100vw, 773px" /></p>
<p>
  var_dump()不但能输出数据的内容，而且可以输出数据类型和字符串的长度。
</p>
<h2>变量</h2>
<p><img loading="lazy" decoding="async" width="341" height="89" src="/wp-content/uploads/2018/05/word-image-634.png" class="wp-image-731" srcset="/wp-content/uploads/2018/05/word-image-634.png 341w, /wp-content/uploads/2018/05/word-image-634-300x78.png 300w" sizes="(max-width: 341px) 100vw, 341px" /></p>
<p>
  变量就是计算机内存中的一段空间。
</p>
<h3>变量的命名规则</h3>
<p>
  变量必须以$开头，除了$以外，变量以字母，下划线开头，后面跟的是字母、数字、下划线。（$不是变量的组成部分，$表示变量的开始）
</p>
<p>
  下列变量名合法的是：
</p>
<p>
  $aa		合法
</p>
<p>
  $1a		不合法
</p>
<p>
  $_1a	合法
</p>
<p>
  $a-1	不合法
</p>
<h3>变量的赋值</h3>
<p>
  传值
</p>
<p><img loading="lazy" decoding="async" width="332" height="110" src="/wp-content/uploads/2018/05/word-image-635.png" class="wp-image-732" srcset="/wp-content/uploads/2018/05/word-image-635.png 332w, /wp-content/uploads/2018/05/word-image-635-300x99.png 300w" sizes="(max-width: 332px) 100vw, 332px" /><br />
<img loading="lazy" decoding="async" width="478" height="187" src="/wp-content/uploads/2018/05/word-image-636.png" class="wp-image-733" srcset="/wp-content/uploads/2018/05/word-image-636.png 478w, /wp-content/uploads/2018/05/word-image-636-300x117.png 300w" sizes="(max-width: 478px) 100vw, 478px" /></p>
<p>
  传址
</p>
<p>
  &amp;表示取出a的地址
</p>
<p><img loading="lazy" decoding="async" width="427" height="103" src="/wp-content/uploads/2018/05/word-image-637.png" class="wp-image-734" srcset="/wp-content/uploads/2018/05/word-image-637.png 427w, /wp-content/uploads/2018/05/word-image-637-300x72.png 300w" sizes="(max-width: 427px) 100vw, 427px" /><br />
<img loading="lazy" decoding="async" width="443" height="244" src="/wp-content/uploads/2018/05/word-image-638.png" class="wp-image-735" srcset="/wp-content/uploads/2018/05/word-image-638.png 443w, /wp-content/uploads/2018/05/word-image-638-300x165.png 300w" sizes="(max-width: 443px) 100vw, 443px" /></p>
<h3>销毁变量</h3>
<p>
  情况一：页面执行完毕后，变量全部销毁，有PHP的垃圾回收机制销毁。
</p>
<p>
  情况二：可以通过unset()手动销毁变量
</p>
<p><img loading="lazy" decoding="async" width="858" height="88" src="/wp-content/uploads/2018/05/word-image-639.png" class="wp-image-736" srcset="/wp-content/uploads/2018/05/word-image-639.png 858w, /wp-content/uploads/2018/05/word-image-639-300x31.png 300w, /wp-content/uploads/2018/05/word-image-639-768x79.png 768w" sizes="(max-width: 858px) 100vw, 858px" /></p>
<p>
  问题：PHP垃圾回收机制如何判断垃圾数据的？
</p>
<p>
  答：如果一个数据没有被变量引用，这个数据就是垃圾数据。
</p>
<p>
  unset()销毁的是变量名，变量名销毁以后，变量的值就不被引用，垃圾回收机制就将值销毁。
</p>
<p><img loading="lazy" decoding="async" width="378" height="87" src="/wp-content/uploads/2018/05/word-image-640.png" class="wp-image-737" srcset="/wp-content/uploads/2018/05/word-image-640.png 378w, /wp-content/uploads/2018/05/word-image-640-300x69.png 300w" sizes="(max-width: 378px) 100vw, 378px" /></p>
<h3>判断变量是否存在</h3>
<p>
  isset()判断变量是否存在
</p>
<p><img loading="lazy" decoding="async" width="427" height="65" src="/wp-content/uploads/2018/05/word-image-641.png" class="wp-image-738" srcset="/wp-content/uploads/2018/05/word-image-641.png 427w, /wp-content/uploads/2018/05/word-image-641-300x46.png 300w" sizes="(max-width: 427px) 100vw, 427px" /></p>
<h3>预定义变量</h3>
<p><img loading="lazy" decoding="async" width="951" height="340" src="/wp-content/uploads/2018/05/word-image-642.png" class="wp-image-739" srcset="/wp-content/uploads/2018/05/word-image-642.png 951w, /wp-content/uploads/2018/05/word-image-642-300x107.png 300w, /wp-content/uploads/2018/05/word-image-642-768x275.png 768w" sizes="(max-width: 951px) 100vw, 951px" /></p>
<p><strong>$_GET：用来保存客户端提交给服务器的Get提交的数据，是数组类型的数据</strong>
</p>
<p><img loading="lazy" decoding="async" width="819" height="221" src="/wp-content/uploads/2018/05/word-image-643.png" class="wp-image-740" srcset="/wp-content/uploads/2018/05/word-image-643.png 819w, /wp-content/uploads/2018/05/word-image-643-300x81.png 300w, /wp-content/uploads/2018/05/word-image-643-768x207.png 768w" sizes="(max-width: 819px) 100vw, 819px" /></p>
<p>
  Get提交的URL地址格式：  地址?参数=值&amp;参数=值&amp;…
</p>
<p>
  比如：index.php?name=tom&amp;sex=男&amp;age=22
</p>
<p><strong>$_POST：用来保存POST提交的数据，数组类型</strong>
</p>
<p><img loading="lazy" decoding="async" width="897" height="249" src="/wp-content/uploads/2018/05/word-image-644.png" class="wp-image-741" srcset="/wp-content/uploads/2018/05/word-image-644.png 897w, /wp-content/uploads/2018/05/word-image-644-300x83.png 300w, /wp-content/uploads/2018/05/word-image-644-768x213.png 768w" sizes="(max-width: 897px) 100vw, 897px" /></p>
<p><strong><a href="mk:@MSITStore:F:\\帮助文档\\php_manual_zh_2014.chm::/res/reserved.variables.request.html&quot; \o &quot;$_REQUEST">$_REQUEST</a>：既能获得get提交的数据，又能获得post提交数据</strong>
</p>
<p><img loading="lazy" decoding="async" width="764" height="231" src="/wp-content/uploads/2018/05/word-image-645.png" class="wp-image-742" srcset="/wp-content/uploads/2018/05/word-image-645.png 764w, /wp-content/uploads/2018/05/word-image-645-300x91.png 300w" sizes="(max-width: 764px) 100vw, 764px" /></p>
<p>
  如果既有get，又有post，使用$_REQUEST获取值的时候，如果有同名的参数，post会将get的值覆盖。
</p>
<p>
  我们可以在php.ini中更改get和post覆盖的顺序。
</p>
<p><img loading="lazy" decoding="async" width="823" height="52" src="/wp-content/uploads/2018/05/word-image-646.png" class="wp-image-743" srcset="/wp-content/uploads/2018/05/word-image-646.png 823w, /wp-content/uploads/2018/05/word-image-646-300x19.png 300w, /wp-content/uploads/2018/05/word-image-646-768x49.png 768w" sizes="(max-width: 823px) 100vw, 823px" /></p>
<p><strong>$argc、$argv</strong>
</p>
<p>
  PHP的运行不是必须Apache的参与，直接通过php.exe也是可以执行PHP的。
</p>
<p>
  $_GET、$_POST、$_REQUEST都是用来获取http提交参数。
</p>
<p><img loading="lazy" decoding="async" width="875" height="106" src="/wp-content/uploads/2018/05/word-image-647.png" class="wp-image-744" srcset="/wp-content/uploads/2018/05/word-image-647.png 875w, /wp-content/uploads/2018/05/word-image-647-300x36.png 300w, /wp-content/uploads/2018/05/word-image-647-768x93.png 768w" sizes="(max-width: 875px) 100vw, 875px" /></p>
<p>
  $argc保存参数的个数，$argv保存参数的数组
</p>
<p><img loading="lazy" decoding="async" width="1234" height="133" src="/wp-content/uploads/2018/05/word-image-648.png" class="wp-image-745" srcset="/wp-content/uploads/2018/05/word-image-648.png 1234w, /wp-content/uploads/2018/05/word-image-648-300x32.png 300w, /wp-content/uploads/2018/05/word-image-648-768x83.png 768w, /wp-content/uploads/2018/05/word-image-648-1024x110.png 1024w" sizes="(max-width: 1234px) 100vw, 1234px" /></p>
<h3>可变变量</h3>
<p>
  将变量名存储到另个变量中
</p>
<p><img loading="lazy" decoding="async" width="342" height="82" src="/wp-content/uploads/2018/05/word-image-649.png" class="wp-image-746" srcset="/wp-content/uploads/2018/05/word-image-649.png 342w, /wp-content/uploads/2018/05/word-image-649-300x72.png 300w" sizes="(max-width: 342px) 100vw, 342px" /></p>
<p>
  多学一招：变量名可以保存在变量中，函数名也可以保存在变量中
</p>
<p><img loading="lazy" decoding="async" width="424" height="115" src="/wp-content/uploads/2018/05/word-image-650.png" class="wp-image-747" srcset="/wp-content/uploads/2018/05/word-image-650.png 424w, /wp-content/uploads/2018/05/word-image-650-300x81.png 300w" sizes="(max-width: 424px) 100vw, 424px" /></p>
<h2>常量</h2>
<p>
  当一个数据在执行周期内不发生变化，我们把这个数据声明成常量。
</p>
<p>
  常量名前面没有$。$表示的是变量的开始
</p>
<p>
  常量的定义一般都在程序的开始处定义。
</p>
<h3>语法</h3>
<p>
  define(常量名,常量值,[是否区分大小写，默认是区分大小写的])
</p>
<p><img loading="lazy" decoding="async" width="704" height="73" src="/wp-content/uploads/2018/05/word-image-651.png" class="wp-image-748" srcset="/wp-content/uploads/2018/05/word-image-651.png 704w, /wp-content/uploads/2018/05/word-image-651-300x31.png 300w" sizes="(max-width: 704px) 100vw, 704px" /><br />
<img loading="lazy" decoding="async" width="459" height="78" src="/wp-content/uploads/2018/05/word-image-652.png" class="wp-image-749" srcset="/wp-content/uploads/2018/05/word-image-652.png 459w, /wp-content/uploads/2018/05/word-image-652-300x51.png 300w" sizes="(max-width: 459px) 100vw, 459px" /></p>
<h3>特殊字符做常量名</h3>
<p>
  PHP中可以使用特殊字符做常量名，但是调用的使用必须使用constant关键字来调用
</p>
<p><img loading="lazy" decoding="async" width="892" height="49" src="/wp-content/uploads/2018/05/word-image-653.png" class="wp-image-750" srcset="/wp-content/uploads/2018/05/word-image-653.png 892w, /wp-content/uploads/2018/05/word-image-653-300x16.png 300w, /wp-content/uploads/2018/05/word-image-653-768x42.png 768w" sizes="(max-width: 892px) 100vw, 892px" /></p>
<h3>判断常量是否存在</h3>
<p>
  常量一旦定义后面不能重新定义，所以在定义常量的时候我们先判断一下常量是否存在
</p>
<p><img loading="lazy" decoding="async" width="911" height="62" src="/wp-content/uploads/2018/05/word-image-654.png" class="wp-image-751" srcset="/wp-content/uploads/2018/05/word-image-654.png 911w, /wp-content/uploads/2018/05/word-image-654-300x20.png 300w, /wp-content/uploads/2018/05/word-image-654-768x52.png 768w" sizes="(max-width: 911px) 100vw, 911px" /></p>
<p>
  通过defined()函数判断常量是否定义
</p>
<p><img loading="lazy" decoding="async" width="509" height="75" src="/wp-content/uploads/2018/05/word-image-655.png" class="wp-image-752" srcset="/wp-content/uploads/2018/05/word-image-655.png 509w, /wp-content/uploads/2018/05/word-image-655-300x44.png 300w" sizes="(max-width: 509px) 100vw, 509px" /></p>
<h3>预定义常量</h3>
<p><img loading="lazy" decoding="async" width="925" height="528" src="/wp-content/uploads/2018/05/word-image-656.png" class="wp-image-753" srcset="/wp-content/uploads/2018/05/word-image-656.png 925w, /wp-content/uploads/2018/05/word-image-656-300x171.png 300w, /wp-content/uploads/2018/05/word-image-656-768x438.png 768w" sizes="(max-width: 925px) 100vw, 925px" /></p>
<p>
  例题
</p>
<p><img loading="lazy" decoding="async" width="681" height="74" src="/wp-content/uploads/2018/05/word-image-657.png" class="wp-image-754" srcset="/wp-content/uploads/2018/05/word-image-657.png 681w, /wp-content/uploads/2018/05/word-image-657-300x33.png 300w" sizes="(max-width: 681px) 100vw, 681px" /></p>
<h3>魔术常量</h3>
<p>
  常量的值是不变的，但是魔术常量的值是变化的。
</p>
<p><img loading="lazy" decoding="async" width="1344" height="508" src="/wp-content/uploads/2018/05/word-image-658.png" class="wp-image-755" srcset="/wp-content/uploads/2018/05/word-image-658.png 1344w, /wp-content/uploads/2018/05/word-image-658-300x113.png 300w, /wp-content/uploads/2018/05/word-image-658-768x290.png 768w, /wp-content/uploads/2018/05/word-image-658-1024x387.png 1024w" sizes="(max-width: 1344px) 100vw, 1344px" /></p>
<p>
  例题
</p>
<p><img loading="lazy" decoding="async" width="761" height="81" src="/wp-content/uploads/2018/05/word-image-659.png" class="wp-image-756" srcset="/wp-content/uploads/2018/05/word-image-659.png 761w, /wp-content/uploads/2018/05/word-image-659-300x32.png 300w" sizes="(max-width: 761px) 100vw, 761px" /></p>
<h3>const常量</h3>
<p>
  常量除了可以用define定义，还可以用const来定义
</p>
<p><img loading="lazy" decoding="async" width="458" height="72" src="/wp-content/uploads/2018/05/word-image-660.png" class="wp-image-757" srcset="/wp-content/uploads/2018/05/word-image-660.png 458w, /wp-content/uploads/2018/05/word-image-660-300x47.png 300w" sizes="(max-width: 458px) 100vw, 458px" /></p>
<h3>查看所有常量</h3>
<p><img loading="lazy" decoding="async" width="618" height="115" src="/wp-content/uploads/2018/05/word-image-661.png" class="wp-image-758" srcset="/wp-content/uploads/2018/05/word-image-661.png 618w, /wp-content/uploads/2018/05/word-image-661-300x56.png 300w" sizes="(max-width: 618px) 100vw, 618px" /></p>
<h2>Editplus提示设置</h2>
<p>
  Editplus默认是没有提示的，必须添加语法文件才有提示
</p>
<p>
  第一步：准备语法文件
</p>
<p><img loading="lazy" decoding="async" width="618" height="214" src="/wp-content/uploads/2018/05/word-image-662.png" class="wp-image-759" srcset="/wp-content/uploads/2018/05/word-image-662.png 618w, /wp-content/uploads/2018/05/word-image-662-300x104.png 300w" sizes="(max-width: 618px) 100vw, 618px" /></p>
<p>
  第二步：将语法文件添加到editplus上
</p>
<p><img loading="lazy" decoding="async" width="241" height="61" src="/wp-content/uploads/2018/05/word-image-663.png" class="wp-image-760" /><br />
<img loading="lazy" decoding="async" width="555" height="347" src="/wp-content/uploads/2018/05/word-image-664.png" class="wp-image-761" srcset="/wp-content/uploads/2018/05/word-image-664.png 555w, /wp-content/uploads/2018/05/word-image-664-300x188.png 300w" sizes="(max-width: 555px) 100vw, 555px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/php/712.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>JS初级（一）变量、 声明、 引用、 数据类型、 输出、 运算符</title>
		<link>/%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af/303.html</link>
					<comments>/%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af/303.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Thu, 17 May 2018 14:16:05 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[前端技术]]></category>
		<category><![CDATA[变量]]></category>
		<category><![CDATA[声明]]></category>
		<category><![CDATA[引用]]></category>
		<category><![CDATA[数据类型]]></category>
		<category><![CDATA[输出]]></category>
		<category><![CDATA[运算符]]></category>
		<guid isPermaLink="false">/?p=303</guid>

					<description><![CDATA[JavaScript（一） 作业 第一题 &#60;style type=&#8221;text/css&#82 [&#8230;]]]></description>
										<content:encoded><![CDATA[</p>
<h1>JavaScript（一）</h1>
<h2>作业</h2>
<h3>第一题</h3>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  body{
</p>
<p>
  	background-color:#0CF;
</p>
<p>
  }
</p>
<p>
  input[type=&#8217;text&#8217;]{
</p>
<p>
  	border-top:none;
</p>
<p>
  	border-left:none;
</p>
<p>
  	border-right:none;
</p>
<p>
  	border-bottom:#06C solid 1px;
</p>
<p>
  	background-color:transparent;  /*背景色透明*/
</p>
<p>
  }
</p>
<p>
  input[type=&#8217;button&#8217;]{
</p>
<p>
  	border:none;
</p>
<p>
  	background-color:transparent;	/*背景色透明*/
</p>
<p>
  	cursor:pointer;	/*当鼠标移上去的时候变成手形*/
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div&gt;请输入信息：&lt;input type=&#8221;text&#8221; name=&#8221;username&#8221; /&gt;&lt;input type=&#8221;button&#8221; value=&#8221;确定&gt;&gt;&gt;&#8221; /&gt;&lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="332" height="42" src="/wp-content/uploads/2018/05/word-image-273.png" class="wp-image-305" srcset="/wp-content/uploads/2018/05/word-image-273.png 332w, /wp-content/uploads/2018/05/word-image-273-300x38.png 300w" sizes="(max-width: 332px) 100vw, 332px" /></p>
<h3>第四题</h3>
<p>
  分析页面结构如下：
</p>
<p><img loading="lazy" decoding="async" width="330" height="141" src="/wp-content/uploads/2018/05/word-image-274.png" class="wp-image-306" srcset="/wp-content/uploads/2018/05/word-image-274.png 330w, /wp-content/uploads/2018/05/word-image-274-300x128.png 300w" sizes="(max-width: 330px) 100vw, 330px" /></p>
<p>
  页面总宽度：8+206+500+8=722
</p>
<p>
  页面总高度：110+519=629
</p>
<p>
  难点：
</p>
<p><img loading="lazy" decoding="async" width="776" height="166" src="/wp-content/uploads/2018/05/word-image-275.png" class="wp-image-307" srcset="/wp-content/uploads/2018/05/word-image-275.png 776w, /wp-content/uploads/2018/05/word-image-275-300x64.png 300w, /wp-content/uploads/2018/05/word-image-275-768x164.png 768w" sizes="(max-width: 776px) 100vw, 776px" /></p>
<p>
  实现代码
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  #content{
</p>
<p>
  	width:722px;
</p>
<p>
  	height:629px;		/*为了#left,#right高度100%，指定父元素高度*/
</p>
<p>
  	overflow:hidden;	/*重新测定子元素的高度*/
</p>
<p>
  	margin:auto;		/*页面居中*/
</p>
<p>
  }
</p>
<p>
  #content #left,#content #right{
</p>
<p>
  	width:8px;
</p>
<p>
  	height:100%;	/*背景无法撑开盒子，所以要设定高度*/
</p>
<p>
  	background:url(images/line1.gif) repeat-y;
</p>
<p>
  	float:left;
</p>
<p>
  }
</p>
<p>
  #content #right{
</p>
<p>
  	background:url(images/line2.gif) repeat-y;
</p>
<p>
  }
</p>
<p>
  #content #center{
</p>
<p>
  	width:706px;
</p>
<p>
  	float:left;
</p>
<p>
  }
</p>
<p>
  #content #center&gt;div{
</p>
<p>
  	float:left;
</p>
<p>
  }
</p>
<p>
  #content #center #part1{
</p>
<p>
  	width:206px;
</p>
<p>
  	background-color:#ECDFBC;
</p>
<p>
  	/*text-align:center;*/	/*图片居中方法一*/
</p>
<p>
  }
</p>
<p>
  #part1 img{
</p>
<p>
  	margin:auto;		/*图片居中方法二*/
</p>
<p>
  	display:block;		/*设置块显示才能使用margin:auto来居中*/
</p>
<p>
  }
</p>
<p>
  #content #center #part4{
</p>
<p>
  	width:500px;
</p>
<p>
  	height:519px;
</p>
<p>
  	background:url(images/b-04.jpg);
</p>
<p>
  	padding-top:30px;
</p>
<p>
  }
</p>
<p>
  #part4 #wenzi{
</p>
<p>
  	width:90%;
</p>
<p>
  	font-size:14px;
</p>
<p>
  	font-family:&#8217;微软雅黑&#8217;;
</p>
<p>
  	margin:auto;
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div id=&#8221;content&#8221;&gt;
</p>
<p>
  	&lt;div id=&#8221;left&#8221;&gt;&lt;/div&gt;
</p>
<p>
      &lt;div id=&#8221;center&#8221;&gt;
</p>
<p>
      	&lt;div id=&#8221;part1&#8243;&gt;&lt;img src=&#8221;images/xihuzi2.gif&#8221; /&gt;&lt;/div&gt;
</p>
<p>
          &lt;div id=&#8221;part2&#8243;&gt;&lt;img src=&#8221;images/5.jpg&#8221; /&gt;&lt;/div&gt;
</p>
<p>
          &lt;div id=&#8221;part3&#8243;&gt;&lt;img src=&#8221;images/6.jpg&#8221; /&gt;&lt;/div&gt;
</p>
<p>
          &lt;div id=&#8221;part4&#8243;&gt;
</p>
<p>
          	&lt;div id=&#8221;wenzi&#8221;&gt;
</p>
<p>
          	  &lt;header style=&#8221;text-align:center&#8221;&gt;西湖春天简介 &lt;/header&gt;
</p>
<p>
          	  &lt;p&gt; 　　西湖春天是一家经旅游局批准，工商局登记注册，具有独立法人资格，并足额缴纳旅行社质量保证金的股份制企业。&lt;br /&gt;
</p>
<p>
          	    公司下设组团部、地接部、导游部、财务部、石浦门市部、丹城门市部等机构，承接旅游、休闲、度假、疗养、会务、商务考察等业务，公司管理高度重视人力资源的合理利用和开发，现已拥有一批长期从事旅游工作、精通各项旅游业务、重信誉、讲实效、高素质的管理人员和一支训练有素、经验丰富的导游队伍，并且已做到人人持证上岗。&lt;br /&gt;
</p>
<p>
          	    公司凭借象山旅游发展大好趋势，结合自身的规模优势，全力打造出&amp;ldquo;西湖春天&amp;rdquo;的旗帜品牌形象。目前，公司开发的公司网站，可以让您广泛的了解旅游信息。&lt;br /&gt;
</p>
<p>
          	    公司自成立以来，坚持以&amp;ldquo;质量就是生命&amp;rdquo;的座右铭，虚心接受客户的监督，不断完善管理机制，全体员工积极进取，开拓创新、奋发图强；公司连续获得2003年度《安全生产先进集体》、《浙江省旅游消费推荐单位》、《&amp;ldquo;安康杯&amp;rdquo;竞赛优胜企业》、2004年度《石浦首届旅游消费诚信单位》等荣誉称号。&lt;br /&gt;
</p>
<p>
          	    公司与国内众多旅行社建立了良好的义务关系，在主要城市已形成了客房、餐饮、交通等完善的旅游服务网络，&amp;ldquo;西湖春天&amp;rdquo;全体工作人员将以最合理的旅游线路，最实惠的价格，最细致的服务，热诚期待您的到来。&lt;/p&gt;
</p>
<p>
          	&lt;/div&gt;
</p>
<p>
        &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;div id=&#8221;right&#8221;&gt;&lt;/div&gt;
</p>
<p>
  &lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="738" height="249" src="/wp-content/uploads/2018/05/word-image-276.png" class="wp-image-308" srcset="/wp-content/uploads/2018/05/word-image-276.png 738w, /wp-content/uploads/2018/05/word-image-276-300x101.png 300w" sizes="(max-width: 738px) 100vw, 738px" /></p>
<h2>圆角矩形</h2>
<p>
  区分上下左右四个点
</p>
<p><img loading="lazy" decoding="async" width="537" height="212" src="/wp-content/uploads/2018/05/word-image-277.png" class="wp-image-309" srcset="/wp-content/uploads/2018/05/word-image-277.png 537w, /wp-content/uploads/2018/05/word-image-277-300x118.png 300w" sizes="(max-width: 537px) 100vw, 537px" /></p>
<p>
  例题
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:100px;
</p>
<p>
  	height:100px;
</p>
<p>
  	border:#000 solid 1px;
</p>
<p>
  	margin:5px auto;
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(1){
</p>
<p>
  	border-radius:10px;		/*四个点的圆角半径都是10px*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(2){
</p>
<p>
  	border-radius:10px 20px;	/*上下10px  左右20px*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(3){
</p>
<p>
  	border-radius:10px 20px 30px;	/*上10px 左右20px 下30px*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(4){
</p>
<p>
  	border-radius:10px 20px 30px 40px;	/*上右下左*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(5){
</p>
<p>
  	border-radius:50%;		/*正圆*/
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="153" height="542" src="/wp-content/uploads/2018/05/word-image-278.png" class="wp-image-310" srcset="/wp-content/uploads/2018/05/word-image-278.png 153w, /wp-content/uploads/2018/05/word-image-278-85x300.png 85w" sizes="(max-width: 153px) 100vw, 153px" /></p>
<p>
  圆角矩形的应用
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  body{
</p>
<p>
  	background:#999;
</p>
<p>
  }
</p>
<p>
  div{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	padding:10px;
</p>
<p>
  	border:#000 solid 1px;
</p>
<p>
  	border-radius:10px;
</p>
<p>
  	background-color:#CCC;
</p>
<p>
  }
</p>
<p>
  #face{
</p>
<p>
  	border-radius:50%;
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div&gt;&lt;img src=&#8221;images4/face.jpg&#8221; /&gt;&lt;/div&gt;
</p>
<p>
  &lt;img src=&#8221;images4/face.jpg&#8221; id=&#8221;face&#8221; /&gt;
</p>
<p><img loading="lazy" decoding="async" width="534" height="435" src="/wp-content/uploads/2018/05/word-image-279.png" class="wp-image-311" srcset="/wp-content/uploads/2018/05/word-image-279.png 534w, /wp-content/uploads/2018/05/word-image-279-300x244.png 300w" sizes="(max-width: 534px) 100vw, 534px" /></p>
<h2>2D转换</h2>
<p>
  在二维平面上桌变化，关键字：transform
</p>
<h3>2D转换之移动（translate）</h3>
<p>
  例题：让div居于屏幕的中间
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	background-color:#900;
</p>
<p>
  	position:absolute;
</p>
<p>
  	left:50%;
</p>
<p>
  	top:50%;
</p>
<p>
  	/*transform:translateX(-50%) translateY(-50%);*/
</p>
<p>
  	transform:translate(-50%,-50%)
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<h3>2D转换之旋转</h3>
<p><img loading="lazy" decoding="async" width="915" height="268" src="/wp-content/uploads/2018/05/word-image-280.png" class="wp-image-312" srcset="/wp-content/uploads/2018/05/word-image-280.png 915w, /wp-content/uploads/2018/05/word-image-280-300x88.png 300w, /wp-content/uploads/2018/05/word-image-280-768x225.png 768w" sizes="(max-width: 915px) 100vw, 915px" /></p>
<h3>2D转换之缩放（scale）</h3>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  img{
</p>
<p>
  	transform:scaleX(1.5);	/*x轴是原来的1.5倍*/
</p>
<p>
  	transform:scaleY(0.5);	/*y轴是原来的0.5倍*/
</p>
<p>
  	transform:scale(0.5,0.5);	/*同时设定x轴和y轴的缩放*/
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;
</p>
<h3>例题：三角做法</h3>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:300px;
</p>
<p>
  	height:30px;
</p>
<p>
  	border:#999 solid 1px;
</p>
<p>
  	margin:100px  auto;
</p>
<p>
  	position:relative;
</p>
<p>
  }
</p>
<p>
  div:after{
</p>
<p>
  	content:&#8221;;
</p>
<p>
  	width:12px;
</p>
<p>
  	height:12px;
</p>
<p>
  	display:inline-block;
</p>
<p>
  	position:absolute;
</p>
<p>
  	right:12px;
</p>
<p>
  	border-right:#999 solid 1px;
</p>
<p>
  	border-bottom:#999 solid 1px;
</p>
<p>
  	transform:rotate(45deg) translateY(10px);;
</p>
<p>
  }
</p>
<p>
  div:hover{
</p>
<p>
  	border:#00F solid 1px;
</p>
<p>
  }
</p>
<p>
  div:hover:after{  /*必须先写:hover，后写:after*/
</p>
<p>
  	border-right:#00F solid 1px;
</p>
<p>
  	border-bottom:#00F solid 1px;
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="390" height="54" src="/wp-content/uploads/2018/05/word-image-281.png" class="wp-image-313" srcset="/wp-content/uploads/2018/05/word-image-281.png 390w, /wp-content/uploads/2018/05/word-image-281-300x42.png 300w" sizes="(max-width: 390px) 100vw, 390px" /></p>
<h2>过渡（transition）</h2>
<p><img loading="lazy" decoding="async" width="768" height="242" src="/wp-content/uploads/2018/05/word-image-282.png" class="wp-image-314" srcset="/wp-content/uploads/2018/05/word-image-282.png 768w, /wp-content/uploads/2018/05/word-image-282-300x95.png 300w" sizes="(max-width: 768px) 100vw, 768px" /></p>
<p>
  动画类型有：
</p>
<p><img loading="lazy" decoding="async" width="500" height="171" src="/wp-content/uploads/2018/05/word-image-283.png" class="wp-image-315" srcset="/wp-content/uploads/2018/05/word-image-283.png 500w, /wp-content/uploads/2018/05/word-image-283-300x103.png 300w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<p>
  例题（对象移动）：
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	background-color:#F00;
</p>
<p>
  	transition:all 1s ease;
</p>
<p>
  }
</p>
<p>
  div:hover{
</p>
<p>
  	transform:translateX(500px);
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  例题：（头像旋转）
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  img{
</p>
<p>
  	border-radius:50%;
</p>
<p>
  	transition:all 0.5s ease;
</p>
<p>
  }
</p>
<p>
  img:hover{
</p>
<p>
  	transform:rotate(360deg);
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;img src=&#8221;images4/face.jpg&#8221; /&gt;
</p>
<p><img loading="lazy" decoding="async" width="447" height="223" src="/wp-content/uploads/2018/05/word-image-284.png" class="wp-image-316" srcset="/wp-content/uploads/2018/05/word-image-284.png 447w, /wp-content/uploads/2018/05/word-image-284-300x150.png 300w" sizes="(max-width: 447px) 100vw, 447px" /></p>
<p>
  例题：（头像变大）
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  ul{
</p>
<p>
  	list-style-type:none;
</p>
<p>
  	margin:10px auto;
</p>
<p>
  	padding:0px;
</p>
<p>
  	overflow:hidden;
</p>
<p>
  }
</p>
<p>
  li{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	border:#000 solid 1px;
</p>
<p>
  	margin:5px;
</p>
<p>
  	float:left;
</p>
<p>
  	overflow:hidden;
</p>
<p>
  }
</p>
<p>
  img{
</p>
<p>
  	transition:all 0.5s ease;
</p>
<p>
  }
</p>
<p>
  img:hover{
</p>
<p>
  	transform:scale(1.1);
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;ul&gt;
</p>
<p>
  	&lt;li&gt;&lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;&lt;/li&gt;
</p>
<p>
      &lt;li&gt;&lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;&lt;/li&gt;
</p>
<p>
      &lt;li&gt;&lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;&lt;/li&gt;
</p>
<p>
  &lt;/ul&gt;
</p>
<p><img loading="lazy" decoding="async" width="657" height="213" src="/wp-content/uploads/2018/05/word-image-285.png" class="wp-image-318" srcset="/wp-content/uploads/2018/05/word-image-285.png 657w, /wp-content/uploads/2018/05/word-image-285-300x97.png 300w" sizes="(max-width: 657px) 100vw, 657px" /></p>
<h2>Sublime介绍</h2>
<ol>
<li>
  生成HTML框架结构
</li>
</ol>
<p><img loading="lazy" decoding="async" width="668" height="52" src="/wp-content/uploads/2018/05/word-image-286.png" class="wp-image-319" srcset="/wp-content/uploads/2018/05/word-image-286.png 668w, /wp-content/uploads/2018/05/word-image-286-300x23.png 300w" sizes="(max-width: 668px) 100vw, 668px" /><br />
<img loading="lazy" decoding="async" width="543" height="56" src="/wp-content/uploads/2018/05/word-image-287.png" class="wp-image-320" srcset="/wp-content/uploads/2018/05/word-image-287.png 543w, /wp-content/uploads/2018/05/word-image-287-300x31.png 300w" sizes="(max-width: 543px) 100vw, 543px" /><br />
<img loading="lazy" decoding="async" width="519" height="59" src="/wp-content/uploads/2018/05/word-image-288.png" class="wp-image-321" srcset="/wp-content/uploads/2018/05/word-image-288.png 519w, /wp-content/uploads/2018/05/word-image-288-300x34.png 300w" sizes="(max-width: 519px) 100vw, 519px" /><br />
<img loading="lazy" decoding="async" width="398" height="54" src="/wp-content/uploads/2018/05/word-image-289.png" class="wp-image-322" srcset="/wp-content/uploads/2018/05/word-image-289.png 398w, /wp-content/uploads/2018/05/word-image-289-300x41.png 300w" sizes="(max-width: 398px) 100vw, 398px" /></p>
<p>
  按tab键或ctrl+E生成
</p>
<p>
  注意要将页面保存再按快捷键生成
</p>
<p>
  常用的其他技巧
</p>
<p><img loading="lazy" decoding="async" width="439" height="28" src="/wp-content/uploads/2018/05/word-image-290.png" class="wp-image-323" srcset="/wp-content/uploads/2018/05/word-image-290.png 439w, /wp-content/uploads/2018/05/word-image-290-300x19.png 300w" sizes="(max-width: 439px) 100vw, 439px" /><br />
<img loading="lazy" decoding="async" width="745" height="30" src="/wp-content/uploads/2018/05/word-image-291.png" class="wp-image-324" srcset="/wp-content/uploads/2018/05/word-image-291.png 745w, /wp-content/uploads/2018/05/word-image-291-300x12.png 300w" sizes="(max-width: 745px) 100vw, 745px" /><br />
<img loading="lazy" decoding="async" width="751" height="118" src="/wp-content/uploads/2018/05/word-image-292.png" class="wp-image-325" srcset="/wp-content/uploads/2018/05/word-image-292.png 751w, /wp-content/uploads/2018/05/word-image-292-300x47.png 300w" sizes="(max-width: 751px) 100vw, 751px" /></p>
<h2>什么是JavaScript</h2>
<ol>
<li>
  JavaScript是一种解释型的，基于对象的脚本语言。
</li>
<li>
  Javascript（JS）可以运行在客户端，也可以运行在服务器端。默认是运行在客户端。
</li>
</ol>
<p><img loading="lazy" decoding="async" width="882" height="44" src="/wp-content/uploads/2018/05/word-image-293.png" class="wp-image-326" srcset="/wp-content/uploads/2018/05/word-image-293.png 882w, /wp-content/uploads/2018/05/word-image-293-300x15.png 300w, /wp-content/uploads/2018/05/word-image-293-768x38.png 768w" sizes="(max-width: 882px) 100vw, 882px" /></p>
<p>
  script：脚本
</p>
<h3>页面的执行过程</h3>
<p><img loading="lazy" decoding="async" width="742" height="85" src="/wp-content/uploads/2018/05/word-image-294.png" class="wp-image-327" srcset="/wp-content/uploads/2018/05/word-image-294.png 742w, /wp-content/uploads/2018/05/word-image-294-300x34.png 300w" sizes="(max-width: 742px) 100vw, 742px" /></p>
<h3>解释型与编译型</h3>
<p><img loading="lazy" decoding="async" width="786" height="138" src="/wp-content/uploads/2018/05/word-image-295.png" class="wp-image-328" srcset="/wp-content/uploads/2018/05/word-image-295.png 786w, /wp-content/uploads/2018/05/word-image-295-300x53.png 300w, /wp-content/uploads/2018/05/word-image-295-768x135.png 768w" sizes="(max-width: 786px) 100vw, 786px" /></p>
<p>
  要看一门语言是否是解释型还是编译型，主要看是否会生成中间文件。
</p>
<p>
  运行在客户端的语言都是解释型
</p>
<p>
  运行在服务器端的语言都是编译型。
</p>
<h3>脚本语言</h3>
<p>
  脚本语言也是语言一种，脚本语言的特点要结合其他语言一起实现功能。
</p>
<h2>JavaScript的应用场景</h2>
<ol>
<li>
  客户端特效
</li>
<li>
  验证表单
</li>
</ol>
<h2>变量</h2>
<p>
  变量就是一个会变的量
</p>
<p>
  x+1=2		x=1
</p>
<p>
  x+10=20	x=10
</p>
<p><img loading="lazy" decoding="async" width="452" height="83" src="/wp-content/uploads/2018/05/word-image-296.png" class="wp-image-329" srcset="/wp-content/uploads/2018/05/word-image-296.png 452w, /wp-content/uploads/2018/05/word-image-296-300x55.png 300w" sizes="(max-width: 452px) 100vw, 452px" /></p>
<p>
  变量就是内存中的一段空间
</p>
<h2>变量的命名规则</h2>
<ol>
<li>
  变量以字母、下划线，$开头，后面跟的在字母、数字、下划线，$
</li>
<li>
  关键字不能做变量名
</li>
<li>
  变量名区分大小写（aa和Aa是两个空间）
</li>
</ol>
<p>
  下列变量名是否合法
</p>
<ol>
<li>
  aa		合法
</li>
<li>
  a1		合法
</li>
<li>
  1a		不合法（不能以数字开头）
</li>
<li>
  _1a		合法
</li>
<li>
  a-1		不合法
</li>
<li>
  a%		不合法
</li>
<li>
  x		合法
</li>
<li>
  do		不合法（关键字不可以做变量名 if for else case …）
</li>
</ol>
<h2>声明变量</h2>
<p>
  通过var关键字来声明变量。
</p>
<p>
  声明变量有两种方法
</p>
<ol>
<li>
  显式声明：通过var关键字声明后使用
</li>
<li>
  隐式声明：不声明，直接使用
</li>
</ol>
<p><img loading="lazy" decoding="async" width="962" height="138" src="/wp-content/uploads/2018/05/word-image-297.png" class="wp-image-330" srcset="/wp-content/uploads/2018/05/word-image-297.png 962w, /wp-content/uploads/2018/05/word-image-297-300x43.png 300w, /wp-content/uploads/2018/05/word-image-297-768x110.png 768w" sizes="(max-width: 962px) 100vw, 962px" /></p>
<h2>输出的方法</h2>
<p>
  1、document.write(‘锄禾日当午’);	//输出在浏览器上
</p>
<p><img loading="lazy" decoding="async" width="533" height="43" src="/wp-content/uploads/2018/05/word-image-298.png" class="wp-image-331" srcset="/wp-content/uploads/2018/05/word-image-298.png 533w, /wp-content/uploads/2018/05/word-image-298-300x24.png 300w" sizes="(max-width: 533px) 100vw, 533px" /></p>
<p>
  2、alert(‘锄禾日当午’);		//弹出一个对话框（就是window.alert()）
</p>
<p><img loading="lazy" decoding="async" width="181" height="188" src="/wp-content/uploads/2018/05/word-image-299.png" class="wp-image-332" /></p>
<p>
  3、prompt()：弹出一个用于输入的对话框
</p>
<p><img loading="lazy" decoding="async" width="930" height="153" src="/wp-content/uploads/2018/05/word-image-300.png" class="wp-image-333" srcset="/wp-content/uploads/2018/05/word-image-300.png 930w, /wp-content/uploads/2018/05/word-image-300-300x49.png 300w, /wp-content/uploads/2018/05/word-image-300-768x126.png 768w" sizes="(max-width: 930px) 100vw, 930px" /></p>
<p>
  4、弹出一个对话框，有“确定”和“取消”按钮
</p>
<p><img loading="lazy" decoding="async" width="583" height="174" src="/wp-content/uploads/2018/05/word-image-301.png" class="wp-image-334" srcset="/wp-content/uploads/2018/05/word-image-301.png 583w, /wp-content/uploads/2018/05/word-image-301-300x90.png 300w" sizes="(max-width: 583px) 100vw, 583px" /></p>
<p>
  5、console.log(‘锄禾日当午’)：在控制台输出，用于代码调试
</p>
<p><img loading="lazy" decoding="async" width="556" height="103" src="/wp-content/uploads/2018/05/word-image-302.png" class="wp-image-335" srcset="/wp-content/uploads/2018/05/word-image-302.png 556w, /wp-content/uploads/2018/05/word-image-302-300x56.png 300w" sizes="(max-width: 556px) 100vw, 556px" /></p>
<p>
  几个需要记忆的单词
</p>
<ol>
<li>
  window：窗口
</li>
<li>
  document：文档
</li>
<li>
  console：控制台
</li>
<li>
  log：日志
</li>
</ol>
<h2>变量数据类型</h2>
<p>
  变量的数据类型取决于变量中存储的值。如果存放的是数字就是数字型，存放字符串就是字符串型。
</p>
<p><img loading="lazy" decoding="async" width="521" height="323" src="/wp-content/uploads/2018/05/word-image-303.png" class="wp-image-336" srcset="/wp-content/uploads/2018/05/word-image-303.png 521w, /wp-content/uploads/2018/05/word-image-303-300x186.png 300w" sizes="(max-width: 521px) 100vw, 521px" /></p>
<p>
  基本数据类型
</p>
<table>
<tr>
<td>
<p>
  数据类型
</p>
</td>
<td>
<p>
  例题
</p>
</td>
</tr>
<tr>
<td>
<p>
  数字型（Number）
</p>
</td>
<td>
<p>
  10   10.5
</p>
</td>
</tr>
<tr>
<td>
<p>
  字符串型（String）
</p>
</td>
<td>
<p>
  “锄禾日当午”   ‘锄禾日当午’
</p>
</td>
</tr>
<tr>
<td>
<p>
  布尔型（Boolean）
</p>
</td>
<td>
<p>
  true（真）  false（假）
</p>
</td>
</tr>
</table>
<p>
  特殊数据类型
</p>
<table>
<tr>
<td>
<p>
  Null（空）
</p>
</td>
<td>
<p>
  空型
</p>
</td>
</tr>
<tr>
<td>
<p>
  Undefined（未定义型）
</p>
</td>
<td>
<p>
  变量声明后当没有赋值，这个变量是未定义型
</p>
</td>
</tr>
</table>
<p>
  typeof：显示变量的数据类型
</p>
<p><img loading="lazy" decoding="async" width="623" height="97" src="/wp-content/uploads/2018/05/word-image-304.png" class="wp-image-337" srcset="/wp-content/uploads/2018/05/word-image-304.png 623w, /wp-content/uploads/2018/05/word-image-304-300x47.png 300w" sizes="(max-width: 623px) 100vw, 623px" /><br />
<img loading="lazy" decoding="async" width="535" height="90" src="/wp-content/uploads/2018/05/word-image-305.png" class="wp-image-338" srcset="/wp-content/uploads/2018/05/word-image-305.png 535w, /wp-content/uploads/2018/05/word-image-305-300x50.png 300w" sizes="(max-width: 535px) 100vw, 535px" /><br />
<img loading="lazy" decoding="async" width="509" height="89" src="/wp-content/uploads/2018/05/word-image-306.png" class="wp-image-339" srcset="/wp-content/uploads/2018/05/word-image-306.png 509w, /wp-content/uploads/2018/05/word-image-306-300x52.png 300w" sizes="(max-width: 509px) 100vw, 509px" /><br />
<img loading="lazy" decoding="async" width="517" height="85" src="/wp-content/uploads/2018/05/word-image-307.png" class="wp-image-340" srcset="/wp-content/uploads/2018/05/word-image-307.png 517w, /wp-content/uploads/2018/05/word-image-307-300x49.png 300w" sizes="(max-width: 517px) 100vw, 517px" /></p>
<p>
  多学一招：JS支持八进制，十进制，十六进制。
</p>
<p><img loading="lazy" decoding="async" width="562" height="189" src="/wp-content/uploads/2018/05/word-image-308.png" class="wp-image-341" srcset="/wp-content/uploads/2018/05/word-image-308.png 562w, /wp-content/uploads/2018/05/word-image-308-300x101.png 300w" sizes="(max-width: 562px) 100vw, 562px" /></p>
<p>
  多学一招：JS支持无穷大
</p>
<p><img loading="lazy" decoding="async" width="759" height="37" src="/wp-content/uploads/2018/05/word-image-309.png" class="wp-image-342" srcset="/wp-content/uploads/2018/05/word-image-309.png 759w, /wp-content/uploads/2018/05/word-image-309-300x15.png 300w" sizes="(max-width: 759px) 100vw, 759px" /></p>
<h2>JavaScript的基本语法规则</h2>
<ol>
<li>
  解释型语言，可以随时运行
</li>
<li>
  大小写敏感
</li>
<li>
  弱类型语言（变量的数据类型取决于存放的数据）
</li>
<li>
  分号表示语句的结束（也可以使用换行替代分号，但不推荐）
</li>
</ol>
<h2>注释</h2>
<ol>
<li>
  单行注释：			//
</li>
<li>
  多行注释：			/*    */
</li>
</ol>
<h2>运算符</h2>
<h3>赋值运算符（=）</h3>
<p>
  a=5：将5付给a
</p>
<h3>算术运算符</h3>
<table>
<tr>
<td>
<p><strong>一元运算符</strong>
</p>
</td>
<td>
<p><strong>描述</strong>
</p>
</td>
<td>
<p><strong>二元运算符</strong>
</p>
</td>
<td>
<p><strong>描述</strong>
</p>
</td>
</tr>
<tr>
<td>
<p>
  &#8211;
</p>
</td>
<td>
<p>
  负号
</p>
</td>
<td>
<p>
  +
</p>
</td>
<td>
<p>
  加
</p>
</td>
</tr>
<tr>
<td>
<p>
  ++
</p>
</td>
<td>
<p>
  自增
</p>
</td>
<td>
<p>
  &#8211;
</p>
</td>
<td>
<p>
  减
</p>
</td>
</tr>
<tr>
<td>
<p>
  &#8212;
</p>
</td>
<td>
<p>
  自减
</p>
</td>
<td>
<p>
  *
</p>
</td>
<td>
<p>
  乘
</p>
</td>
</tr>
<tr>
<td></td>
<td></td>
<td>
<p>
  /
</p>
</td>
<td>
<p>
  除
</p>
</td>
</tr>
<tr>
<td></td>
<td></td>
<td>
<p>
  %
</p>
</td>
<td>
<p>
  模（取模就是取余数）
</p>
</td>
</tr>
</table>
<p>
  注意：
</p>
<p>
  1、“+”除了做数字运算，还可以做字符串相加，字符串相加就是字符串相连。
</p>
<p>
  2、字符串和数字相加，将数字转成字符串型再相连
</p>
<p>
  3、字符串只能做加法，不能做减法，不能做乘法，不能做除法。
</p>
<p><img loading="lazy" decoding="async" width="1035" height="162" src="/wp-content/uploads/2018/05/word-image-310.png" class="wp-image-343" srcset="/wp-content/uploads/2018/05/word-image-310.png 1035w, /wp-content/uploads/2018/05/word-image-310-300x47.png 300w, /wp-content/uploads/2018/05/word-image-310-768x120.png 768w, /wp-content/uploads/2018/05/word-image-310-1024x160.png 1024w" sizes="(max-width: 1035px) 100vw, 1035px" /></p>
<p>
  4、取模就是取余数
</p>
<p><img loading="lazy" decoding="async" width="608" height="139" src="/wp-content/uploads/2018/05/word-image-311.png" class="wp-image-344" srcset="/wp-content/uploads/2018/05/word-image-311.png 608w, /wp-content/uploads/2018/05/word-image-311-300x69.png 300w" sizes="(max-width: 608px) 100vw, 608px" /></p>
<p>
  自增
</p>
<p>
  ++前置：先自增，后运行
</p>
<p>
  ++后置：后自增，先运算
</p>
<p><img loading="lazy" decoding="async" width="736" height="92" src="/wp-content/uploads/2018/05/word-image-312.png" class="wp-image-345" srcset="/wp-content/uploads/2018/05/word-image-312.png 736w, /wp-content/uploads/2018/05/word-image-312-300x38.png 300w" sizes="(max-width: 736px) 100vw, 736px" /><br />
<img loading="lazy" decoding="async" width="742" height="99" src="/wp-content/uploads/2018/05/word-image-313.png" class="wp-image-346" srcset="/wp-content/uploads/2018/05/word-image-313.png 742w, /wp-content/uploads/2018/05/word-image-313-300x40.png 300w" sizes="(max-width: 742px) 100vw, 742px" /><br />
<img loading="lazy" decoding="async" width="581" height="119" src="/wp-content/uploads/2018/05/word-image-314.png" class="wp-image-347" srcset="/wp-content/uploads/2018/05/word-image-314.png 581w, /wp-content/uploads/2018/05/word-image-314-300x61.png 300w" sizes="(max-width: 581px) 100vw, 581px" /><br />
<img loading="lazy" decoding="async" width="1055" height="71" src="/wp-content/uploads/2018/05/word-image-315.png" class="wp-image-348" srcset="/wp-content/uploads/2018/05/word-image-315.png 1055w, /wp-content/uploads/2018/05/word-image-315-300x20.png 300w, /wp-content/uploads/2018/05/word-image-315-768x52.png 768w, /wp-content/uploads/2018/05/word-image-315-1024x69.png 1024w" sizes="(max-width: 1055px) 100vw, 1055px" /><br />
<img loading="lazy" decoding="async" width="581" height="119" src="/wp-content/uploads/2018/05/word-image-316.png" class="wp-image-349" srcset="/wp-content/uploads/2018/05/word-image-316.png 581w, /wp-content/uploads/2018/05/word-image-316-300x61.png 300w" sizes="(max-width: 581px) 100vw, 581px" /></p>
<h2>作业：</h2>
<ol>
<li>
  实现旋转的效果
</li>
</ol>
<p><img loading="lazy" decoding="async" width="101" height="100" src="/wp-content/uploads/2018/05/word-image-317.png" class="wp-image-350" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af/303.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
