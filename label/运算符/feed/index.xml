<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>运算符 &#8211; 个人随笔</title>
	<atom:link href="/label/%E8%BF%90%E7%AE%97%E7%AC%A6/feed" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Sat, 19 May 2018 06:25:21 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.1</generator>

<image>
	<url>/wp-content/uploads/2022/01/cropped-截屏2022-01-01-18.57.09-32x32.png</url>
	<title>运算符 &#8211; 个人随笔</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Mysql（三）联合查询、 运算符、 高级修改、 高级删除、 高级新增、 高级查询</title>
		<link>/%e6%95%b0%e6%8d%ae%e5%ba%93/mysql/1121.html</link>
					<comments>/%e6%95%b0%e6%8d%ae%e5%ba%93/mysql/1121.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Thu, 17 May 2018 17:12:34 +0000</pubDate>
				<category><![CDATA[Mysql]]></category>
		<category><![CDATA[联合查询]]></category>
		<category><![CDATA[运算符]]></category>
		<category><![CDATA[高级修改]]></category>
		<category><![CDATA[高级删除]]></category>
		<category><![CDATA[高级新增]]></category>
		<category><![CDATA[高级查询]]></category>
		<guid isPermaLink="false">/?p=1121</guid>

					<description><![CDATA[思考题 手机号码一般使用什么数据类型存储? char（11） QQ号 varchar（12） 性别一般使用什么 [&#8230;]]]></description>
										<content:encoded><![CDATA[<h1>思考题</h1>
<ul>
<li>
    手机号码一般使用什么数据类型存储?			char（11）
  </li>
<li>
    QQ号										    varchar（12）
  </li>
<li>
    性别一般使用什么数据类型存储?				tinyint(1)   1-男，2-女   char(1) 男，enum 单选女
  </li>
<li>
    年龄信息一般使用什么数据类型存储?			Unsigned tinyint(3)
  </li>
<li>
    照片信息一般使用什么数据类型存储?			varchar(60)  直接存唯一的图片名
  </li>
<li>
    薪水一般使用什么数据类型存储?				decimal(10,2) php要判断小数位不能有第三位
  </li>
<li>
    学员姓名允许为空吗?							不能（使用情况）
  </li>
<li>
    家庭地址允许为空吗?							个人中心设置可以为空，购物不能为空
  </li>
<li>
    电子邮件信息允许为空吗?						可个人中心可以，用邮箱注册账号
  </li>
<li>
    考试成绩允许为空吗?							不可以 给一个默认值0
  </li>
<li>
    在主键列输入的数值，允许为空吗?				不能
  </li>
<li>
    一个表可以有多个主键吗?						不能
  </li>
<li>
    在一个学校数据库中，如果一个学校内允许重名的学员，但是一个班级内不允许学员重名，可以组合班级和姓名两个字段一起来作为主键吗？		        primary key(id,name)
  </li>
<li>
    表中没有合适的列作为主键怎么办？	    给他添加一个编号id
  </li>
<li>
    一个表可以没有主键吗？   可以，一般使用没有主键的表都是中间表（存储两个表之间的关系）
  </li>
<li>
    如果标识列A的初始值为1，增量为1，则输入三行数据以后，再删除两行，下次再输入数据行的时候，标识值从多少开始？					4
  </li>
</ul>
<h1>运算符</h1>
<h2>算术运算符</h2>
<p>
  + 加
</p>
<p>
  &#8211; 减
</p>
<p>
  *乘
</p>
<p>
  / 除    如果除数为0怎么办？  得出的结果是null
</p>
<p>
  % 取模(求余) 如果除数为0怎么办？  得出的结果是null
</p>
<p>
  <img decoding="async" width="330" height="114" src="/wp-content/uploads/2018/05/word-image-1010.png" class="wp-image-1122" srcset="/wp-content/uploads/2018/05/word-image-1010.png 330w, /wp-content/uploads/2018/05/word-image-1010-300x104.png 300w" sizes="(max-width: 330px) 100vw, 330px" /></p>
<p>  <img fetchpriority="high" decoding="async" width="439" height="118" src="/wp-content/uploads/2018/05/word-image-1011.png" class="wp-image-1123" srcset="/wp-content/uploads/2018/05/word-image-1011.png 439w, /wp-content/uploads/2018/05/word-image-1011-300x81.png 300w" sizes="(max-width: 439px) 100vw, 439px" />
</p>
<p>
  算术运算符一般是应用到，结果字段运算上
</p>
<p>
  Select   (字段运算)字段表达式   [from ] [where]
</p>
<p>
  <img decoding="async" width="903" height="168" src="/wp-content/uploads/2018/05/word-image-1012.png" class="wp-image-1124" srcset="/wp-content/uploads/2018/05/word-image-1012.png 903w, /wp-content/uploads/2018/05/word-image-1012-300x56.png 300w, /wp-content/uploads/2018/05/word-image-1012-768x143.png 768w" sizes="(max-width: 903px) 100vw, 903px" />
</p>
<h2>关系运算符</h2>
<p>
  &lt; 小于
</p>
<p>
  &gt;大于
</p>
<p>
  &lt;= 小于等于
</p>
<p>
  &gt;=大于等于
</p>
<p>
  = 等于(比较)
</p>
<p>
  &lt;&gt;   !=  不等于
</p>
<p>
  关系运算符主要用在哪个类型上 数值类型，也可以用在字符串类型
</p>
<p>
  Select * from 表名 id&gt;5
</p>
<p>
  Select * from  表名 name=’李明’;
</p>
<p>
  Select * from  表名 name!=’李明’;
</p>
<h2>逻辑运算符</h2>
<p>
   and 条件同时满足为真
</p>
<p>
  <img loading="lazy" decoding="async" width="788" height="131" src="/wp-content/uploads/2018/05/word-image-1013.png" class="wp-image-1125" srcset="/wp-content/uploads/2018/05/word-image-1013.png 788w, /wp-content/uploads/2018/05/word-image-1013-300x50.png 300w, /wp-content/uploads/2018/05/word-image-1013-768x128.png 768w" sizes="(max-width: 788px) 100vw, 788px" />
</p>
<p>
   or  条件有一个满足为真
</p>
<p>
  <img loading="lazy" decoding="async" width="866" height="290" src="/wp-content/uploads/2018/05/word-image-1014.png" class="wp-image-1126" srcset="/wp-content/uploads/2018/05/word-image-1014.png 866w, /wp-content/uploads/2018/05/word-image-1014-300x100.png 300w, /wp-content/uploads/2018/05/word-image-1014-768x257.png 768w" sizes="(max-width: 866px) 100vw, 866px" />
</p>
<p>
   not 取反
</p>
<p>
  <img loading="lazy" decoding="async" width="925" height="279" src="/wp-content/uploads/2018/05/word-image-1015.png" class="wp-image-1127" srcset="/wp-content/uploads/2018/05/word-image-1015.png 925w, /wp-content/uploads/2018/05/word-image-1015-300x90.png 300w, /wp-content/uploads/2018/05/word-image-1015-768x232.png 768w" sizes="(max-width: 925px) 100vw, 925px" />
</p>
<h1>高级查询</h1>
<p>
  高级查询的格式
</p>
<p>
  Select  [all/distinct]  字段/字段表达式
</p>
<p>
  [from 子句]
</p>
<p>
  [where子句]
</p>
<p>
  [group by 子句]
</p>
<p>
  [having子句]
</p>
<p>
  [order by子句]
</p>
<p>
  [limit 子句]
</p>
<p>
  子句的顺序固定
</p>
<h2>All</h2>
<p>
  含义就是把查询出来的结果全部展示出来
</p>
<p>
  <img loading="lazy" decoding="async" width="849" height="313" src="/wp-content/uploads/2018/05/word-image-1016.png" class="wp-image-1128" srcset="/wp-content/uploads/2018/05/word-image-1016.png 849w, /wp-content/uploads/2018/05/word-image-1016-300x111.png 300w, /wp-content/uploads/2018/05/word-image-1016-768x283.png 768w" sizes="(max-width: 849px) 100vw, 849px" />
</p>
<h2>distinct去除重复数据</h2>
<p>
  <img loading="lazy" decoding="async" width="775" height="297" src="/wp-content/uploads/2018/05/word-image-1017.png" class="wp-image-1129" srcset="/wp-content/uploads/2018/05/word-image-1017.png 775w, /wp-content/uploads/2018/05/word-image-1017-300x115.png 300w, /wp-content/uploads/2018/05/word-image-1017-768x294.png 768w" sizes="(max-width: 775px) 100vw, 775px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="647" height="210" src="/wp-content/uploads/2018/05/word-image-1018.png" class="wp-image-1130" srcset="/wp-content/uploads/2018/05/word-image-1018.png 647w, /wp-content/uploads/2018/05/word-image-1018-300x97.png 300w" sizes="(max-width: 647px) 100vw, 647px" />
</p>
<h2>as别名</h2>
<p>
   使用方式 as  新名字，as关键字可以省略
</p>
<p>
  <img loading="lazy" decoding="async" width="686" height="219" src="/wp-content/uploads/2018/05/word-image-1019.png" class="wp-image-1131" srcset="/wp-content/uploads/2018/05/word-image-1019.png 686w, /wp-content/uploads/2018/05/word-image-1019-300x96.png 300w" sizes="(max-width: 686px) 100vw, 686px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="689" height="218" src="/wp-content/uploads/2018/05/word-image-1020.png" class="wp-image-1132" srcset="/wp-content/uploads/2018/05/word-image-1020.png 689w, /wp-content/uploads/2018/05/word-image-1020-300x95.png 300w" sizes="(max-width: 689px) 100vw, 689px" />
</p>
<h2>Where条件</h2>
<h3>In </h3>
<p>
  在某个范围内
</p>
<p>
  找出type 是打野，或输出的英雄信息
</p>
<p>
  一般会：select * from hero where type=&#8217;打野&#8217; or type=&#8217;输出&#8217;;查询
</p>
<p>
  其实还可以使用in来查询
</p>
<p>
  字段名  In (值1，值2….);含义就是  该字段的值是小括号里边的任意一个
</p>
<p>
  <img loading="lazy" decoding="async" width="851" height="210" src="/wp-content/uploads/2018/05/word-image-1021.png" class="wp-image-1133" srcset="/wp-content/uploads/2018/05/word-image-1021.png 851w, /wp-content/uploads/2018/05/word-image-1021-300x74.png 300w, /wp-content/uploads/2018/05/word-image-1021-768x190.png 768w" sizes="(max-width: 851px) 100vw, 851px" />
</p>
<p>
  	比较：or 和in
</p>
<p>
  		In比or使用更方便，如果需要再加满足的条件，只需要在小括号里边加一个值就行了而or需要使用两次or运算这样执行效率慢，语法繁琐
</p>
<p>
  <img loading="lazy" decoding="async" width="861" height="260" src="/wp-content/uploads/2018/05/word-image-1022.png" class="wp-image-1134" srcset="/wp-content/uploads/2018/05/word-image-1022.png 861w, /wp-content/uploads/2018/05/word-image-1022-300x91.png 300w, /wp-content/uploads/2018/05/word-image-1022-768x232.png 768w" sizes="(max-width: 861px) 100vw, 861px" />
</p>
<h3>Is null /is not null</h3>
<p>
  Is是判断，一般只和null连用，判断字段的值是否是null，如果是null就返回1，如果不是就返回0；
</p>
<p>
  <img loading="lazy" decoding="async" width="822" height="369" src="/wp-content/uploads/2018/05/word-image-1023.png" class="wp-image-1135" srcset="/wp-content/uploads/2018/05/word-image-1023.png 822w, /wp-content/uploads/2018/05/word-image-1023-300x135.png 300w, /wp-content/uploads/2018/05/word-image-1023-768x345.png 768w" sizes="(max-width: 822px) 100vw, 822px" />
</p>
<h3>between…and </h3>
<p>
  在什么范围之内，这个范围主要指数字
</p>
<p>
  大于3小于8
</p>
<p>
  Between 3 and 8;  包括3和8的<br />
  <img loading="lazy" decoding="async" width="829" height="250" src="/wp-content/uploads/2018/05/word-image-1024.png" class="wp-image-1136" srcset="/wp-content/uploads/2018/05/word-image-1024.png 829w, /wp-content/uploads/2018/05/word-image-1024-300x90.png 300w, /wp-content/uploads/2018/05/word-image-1024-768x232.png 768w" sizes="(max-width: 829px) 100vw, 829px" />
</p>
<p>
  Between…and…表示不了不连续的范围，比如 在这些数字里边的  1,6,8,9
</p>
<h3>like模糊查询</h3>
<p>
  模糊查询就是知道要查询信息的一部分内容，不是精确的内容的查询
</p>
<p>
  英雄名字我只知道第一个是‘牛’ 那么我怎么查到这些英雄的信息呢？
</p>
<h4>通配符</h4>
<p>
  就是占位的符号，有一定含义
</p>
<table>
<tr>
<td>
<p>
  通配符
</p>
</td>
<td>
<p>
  描述
</p>
</td>
</tr>
<tr>
<td>
<p>
  _  (下划线)
</p>
</td>
<td>
<p>
  表示任意<strong>一个</strong>字符
</p>
</td>
</tr>
<tr>
<td>
<p>
  %
</p>
</td>
<td>
<p>
  表示任意多个或一个或0个字符
</p>
</td>
</tr>
</table>
<p>
  1、’t_m’下列选项符合的条件的是（）
</p>
<p>
  A：tm 	B：tom 	C:toom	D:tam		E:tmo
</p>
<p>
  2、’张%’ 下列选项符合的条件的是（）
</p>
<p>
  A：张三	B：张三丰	C：张牙舞爪  D：张   E：小张
</p>
<p>
  3、’%诺基亚%’  下列选项符合的条件的是（）
</p>
<p>
  A：诺基亚2100   B :2100诺基亚  C：我的诺基亚质量很好 D：诺基亚
</p>
<p>
  4、SELECT * FROM 数据表 WHERE 编号 LIKE &#8217;00_A5%C’ （）
</p>
<p>
  A、0890AC   B、007_A51C    C、00A54C   D、00AA5C
</p>
<p>
  <img loading="lazy" decoding="async" width="758" height="302" src="/wp-content/uploads/2018/05/word-image-1025.png" class="wp-image-1137" srcset="/wp-content/uploads/2018/05/word-image-1025.png 758w, /wp-content/uploads/2018/05/word-image-1025-300x120.png 300w" sizes="(max-width: 758px) 100vw, 758px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="703" height="160" src="/wp-content/uploads/2018/05/word-image-1026.png" class="wp-image-1138" srcset="/wp-content/uploads/2018/05/word-image-1026.png 703w, /wp-content/uploads/2018/05/word-image-1026-300x68.png 300w" sizes="(max-width: 703px) 100vw, 703px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="613" height="184" src="/wp-content/uploads/2018/05/word-image-1027.png" class="wp-image-1139" srcset="/wp-content/uploads/2018/05/word-image-1027.png 613w, /wp-content/uploads/2018/05/word-image-1027-300x90.png 300w" sizes="(max-width: 613px) 100vw, 613px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="852" height="185" src="/wp-content/uploads/2018/05/word-image-1028.png" class="wp-image-1140" srcset="/wp-content/uploads/2018/05/word-image-1028.png 852w, /wp-content/uploads/2018/05/word-image-1028-300x65.png 300w, /wp-content/uploads/2018/05/word-image-1028-768x167.png 768w" sizes="(max-width: 852px) 100vw, 852px" />
</p>
<h2>group by分组</h2>
<p>
  什么是group  by分组查询，作用
</p>
<p>
  分组查询是按照指定的字段来分组，分组的目的是为了统计
</p>
<p>
  <img loading="lazy" decoding="async" width="1415" height="395" src="/wp-content/uploads/2018/05/word-image-1029.png" class="wp-image-1141" srcset="/wp-content/uploads/2018/05/word-image-1029.png 1415w, /wp-content/uploads/2018/05/word-image-1029-300x84.png 300w, /wp-content/uploads/2018/05/word-image-1029-768x214.png 768w, /wp-content/uploads/2018/05/word-image-1029-1024x286.png 1024w" sizes="(max-width: 1415px) 100vw, 1415px" />
</p>
<h3>聚合函数</h3>
<p>
  聚合函数就在分组的基础上求某一个字段的相关信息，返回的是一个单独的数据，也就是  ‘一行一列’
</p>
<p>
  Sum求和
</p>
<p>
  Avg平均值
</p>
<p>
  Max最大值
</p>
<p>
  Min 最小值
</p>
<p>
  Count 数量
</p>
<p>
  <img loading="lazy" decoding="async" width="1039" height="231" src="/wp-content/uploads/2018/05/word-image-1030.png" class="wp-image-1142" srcset="/wp-content/uploads/2018/05/word-image-1030.png 1039w, /wp-content/uploads/2018/05/word-image-1030-300x67.png 300w, /wp-content/uploads/2018/05/word-image-1030-768x171.png 768w, /wp-content/uploads/2018/05/word-image-1030-1024x228.png 1024w" sizes="(max-width: 1039px) 100vw, 1039px" />
</p>
<h3>having条件</h3>
<p>
  在原有查询出来的结果上过滤
</p>
<p>
  <img loading="lazy" decoding="async" width="999" height="228" src="/wp-content/uploads/2018/05/word-image-1031.png" class="wp-image-1143" srcset="/wp-content/uploads/2018/05/word-image-1031.png 999w, /wp-content/uploads/2018/05/word-image-1031-300x68.png 300w, /wp-content/uploads/2018/05/word-image-1031-768x175.png 768w" sizes="(max-width: 999px) 100vw, 999px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="869" height="129" src="/wp-content/uploads/2018/05/word-image-1032.png" class="wp-image-1144" srcset="/wp-content/uploads/2018/05/word-image-1032.png 869w, /wp-content/uploads/2018/05/word-image-1032-300x45.png 300w, /wp-content/uploads/2018/05/word-image-1032-768x114.png 768w" sizes="(max-width: 869px) 100vw, 869px" />
</p>
<h3>比较having和where的区别</h3>
<p>
  相似的地方都是条件&#8212;&#8211;过滤数据
</p>
<p>
  不同的地方
</p>
<ul>
<li>
    Where在分组之前执行，having在分组之后执行说白了，having就是在where过滤之后的结果之上，再次过滤数据
  </li>
<li>
    Having过滤只能使用查询结果中有的字段，where过滤数据能使用表中的任何字段
  </li>
</ul>
<p>
  <img loading="lazy" decoding="async" width="995" height="44" src="/wp-content/uploads/2018/05/word-image-1033.png" class="wp-image-1145" srcset="/wp-content/uploads/2018/05/word-image-1033.png 995w, /wp-content/uploads/2018/05/word-image-1033-300x13.png 300w, /wp-content/uploads/2018/05/word-image-1033-768x34.png 768w" sizes="(max-width: 995px) 100vw, 995px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="777" height="248" src="/wp-content/uploads/2018/05/word-image-1034.png" class="wp-image-1146" srcset="/wp-content/uploads/2018/05/word-image-1034.png 777w, /wp-content/uploads/2018/05/word-image-1034-300x96.png 300w, /wp-content/uploads/2018/05/word-image-1034-768x245.png 768w" sizes="(max-width: 777px) 100vw, 777px" />
</p>
<h3>回溯查询  with rollup</h3>
<p>
  就是在分组的结果基础之上，再次进行相同的分组查询
</p>
<p>
  <img loading="lazy" decoding="async" width="1755" height="620" src="/wp-content/uploads/2018/05/word-image-1035.png" class="wp-image-1147" srcset="/wp-content/uploads/2018/05/word-image-1035.png 1755w, /wp-content/uploads/2018/05/word-image-1035-300x106.png 300w, /wp-content/uploads/2018/05/word-image-1035-768x271.png 768w, /wp-content/uploads/2018/05/word-image-1035-1024x362.png 1024w" sizes="(max-width: 1755px) 100vw, 1755px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="920" height="201" src="/wp-content/uploads/2018/05/word-image-1036.png" class="wp-image-1148" srcset="/wp-content/uploads/2018/05/word-image-1036.png 920w, /wp-content/uploads/2018/05/word-image-1036-300x66.png 300w, /wp-content/uploads/2018/05/word-image-1036-768x168.png 768w" sizes="(max-width: 920px) 100vw, 920px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="737" height="120" src="/wp-content/uploads/2018/05/word-image-1037.png" class="wp-image-1149" srcset="/wp-content/uploads/2018/05/word-image-1037.png 737w, /wp-content/uploads/2018/05/word-image-1037-300x49.png 300w" sizes="(max-width: 737px) 100vw, 737px" />
</p>
<p>
  扩展：我想在一次结果中查看到不同英雄的平均伤害，和所有英雄的平均伤害
</p>
<p>
  <img loading="lazy" decoding="async" width="965" height="234" src="/wp-content/uploads/2018/05/word-image-1038.png" class="wp-image-1150" srcset="/wp-content/uploads/2018/05/word-image-1038.png 965w, /wp-content/uploads/2018/05/word-image-1038-300x73.png 300w, /wp-content/uploads/2018/05/word-image-1038-768x186.png 768w" sizes="(max-width: 965px) 100vw, 965px" />
</p>
<h2>order by排序</h2>
<p>
  排序，按照某一字段从大到小排，从小到大排<br />
  <br />
  从大到小排序 desc   order by 字段名  desc  按照某个字段从大到小排序
</p>
<p>
  从小到大排序 asc    order by 字段名  asc按照某个字段从小到大排序
</p>
<p>
  如果没有设置排序，会按照id从小到大排序展示出来
</p>
<p>
  Id从大到小排序
</p>
<p>  <img loading="lazy" decoding="async" width="941" height="387" src="/wp-content/uploads/2018/05/word-image-1039.png" class="wp-image-1151" srcset="/wp-content/uploads/2018/05/word-image-1039.png 941w, /wp-content/uploads/2018/05/word-image-1039-300x123.png 300w, /wp-content/uploads/2018/05/word-image-1039-768x316.png 768w" sizes="(max-width: 941px) 100vw, 941px" />
</p>
<h2>limit限定 </h2>
<p>
  限定查询出来的结果显示多少条，从第几条开始显示显示多少条
</p>
<p>
  Limit 数字  &#8211;从第一条开始显示多少条数据
</p>
<p>
  Limit 数字 ，数字 &#8212;从第几条开始显示，显示多少条  不包括开始的那一条
</p>
<p>
  <img loading="lazy" decoding="async" width="948" height="345" src="/wp-content/uploads/2018/05/word-image-1040.png" class="wp-image-1152" srcset="/wp-content/uploads/2018/05/word-image-1040.png 948w, /wp-content/uploads/2018/05/word-image-1040-300x109.png 300w, /wp-content/uploads/2018/05/word-image-1040-768x279.png 768w" sizes="(max-width: 948px) 100vw, 948px" />
</p>
<p>
  实现：显示前四条数据
</p>
<p>
  <img loading="lazy" decoding="async" width="803" height="193" src="/wp-content/uploads/2018/05/word-image-1041.png" class="wp-image-1153" srcset="/wp-content/uploads/2018/05/word-image-1041.png 803w, /wp-content/uploads/2018/05/word-image-1041-300x72.png 300w, /wp-content/uploads/2018/05/word-image-1041-768x185.png 768w" sizes="(max-width: 803px) 100vw, 803px" />
</p>
<p>
  实现：从第5条开始，显示3条
</p>
<p>
  <img loading="lazy" decoding="async" width="776" height="191" src="/wp-content/uploads/2018/05/word-image-1042.png" class="wp-image-1154" srcset="/wp-content/uploads/2018/05/word-image-1042.png 776w, /wp-content/uploads/2018/05/word-image-1042-300x74.png 300w, /wp-content/uploads/2018/05/word-image-1042-768x189.png 768w" sizes="(max-width: 776px) 100vw, 776px" />
</p>
<h1>高级查询案例</h1>
<p>
  测试数据
</p>
<p>
  <img loading="lazy" decoding="async" width="840" height="337" src="/wp-content/uploads/2018/05/word-image-1043.png" class="wp-image-1155" srcset="/wp-content/uploads/2018/05/word-image-1043.png 840w, /wp-content/uploads/2018/05/word-image-1043-300x120.png 300w, /wp-content/uploads/2018/05/word-image-1043-768x308.png 768w" sizes="(max-width: 840px) 100vw, 840px" />
</p>
<ul>
<li>
    找出伤害是前三的英雄信息
  </li>
</ul>
<p>
  select name from hero order by hurt desc limit 3;
</p>
<ul>
<li>
    找出英雄名字中有&#8217;德&#8217;字的英雄
  </li>
</ul>
<p>
  select name from hero where name like &#8216;%德%&#8217;;
</p>
<ul>
<li>
    找出每种技能的平均伤害
  </li>
</ul>
<p>
  select skill,avg(hurt) from hero group by skill;
</p>
<ul>
<li>
    找出每种技能的平均伤害 和所有技能的平均伤害
  </li>
</ul>
<p>
  select skill,avg(hurt) from hero group by skill with rollup;
</p>
<ul>
<li>
    找出平均技能伤害大于60的技能
  </li>
</ul>
<p>
  select skill,avg(hurt) as 平均伤害 from hero group by skill having 平均伤害&gt;60;
</p>
<ul>
<li>
    找出伤害最高的英雄信息（不要求掌握）
  </li>
</ul>
<p>
  select name,hurt from hero where hurt= (select max(hurt) from hero);
</p>
<h1>高级新增</h1>
<p>
  之前学的新增:insert [into]  表名  [(字段列表)]    values  (值列表);
</p>
<p>
  要求，字段列表和值列表一致，每一次执行插入一条数据的
</p>
<h2>多值插入</h2>
<p>
  语法： insert [into] 表名  [(字段列表)]
</p>
<p>
  values (值列表), (值列表), (值列表)……;
</p>
<p>
   例如：
</p>
<p>
  insert into hero  values
</p>
<p>
  	(null,&#8217;a&#8217;,1,2,50,60),
</p>
<p>
  	(null,&#8217;b&#8217;,1,2,50,60),
</p>
<p>
  	(null,&#8217;c&#8217;,1,2,50,60);
</p>
<p>
  <img loading="lazy" decoding="async" width="650" height="141" src="/wp-content/uploads/2018/05/word-image-1044.png" class="wp-image-1156" srcset="/wp-content/uploads/2018/05/word-image-1044.png 650w, /wp-content/uploads/2018/05/word-image-1044-300x65.png 300w" sizes="(max-width: 650px) 100vw, 650px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="814" height="378" src="/wp-content/uploads/2018/05/word-image-1045.png" class="wp-image-1157" srcset="/wp-content/uploads/2018/05/word-image-1045.png 814w, /wp-content/uploads/2018/05/word-image-1045-300x139.png 300w, /wp-content/uploads/2018/05/word-image-1045-768x357.png 768w" sizes="(max-width: 814px) 100vw, 814px" />
</p>
<h2>set方式插入</h2>
<p>
  很少用，只需要知道就可以了
</p>
<p>
  语法： insert 表名 set  字段1=值1，字段2=值2…；每次只插入一条数据
</p>
<p>
  例如：
</p>
<p>
  insert into hero set name=&#8217;d&#8217;,type=1,skill=2,hurt=23,waittime=6;
</p>
<p>
  <img loading="lazy" decoding="async" width="784" height="61" src="/wp-content/uploads/2018/05/word-image-1046.png" class="wp-image-1158" srcset="/wp-content/uploads/2018/05/word-image-1046.png 784w, /wp-content/uploads/2018/05/word-image-1046-300x23.png 300w, /wp-content/uploads/2018/05/word-image-1046-768x60.png 768w" sizes="(max-width: 784px) 100vw, 784px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="816" height="404" src="/wp-content/uploads/2018/05/word-image-1047.png" class="wp-image-1159" srcset="/wp-content/uploads/2018/05/word-image-1047.png 816w, /wp-content/uploads/2018/05/word-image-1047-300x149.png 300w, /wp-content/uploads/2018/05/word-image-1047-768x380.png 768w" sizes="(max-width: 816px) 100vw, 816px" />
</p>
<h2>蠕虫复制</h2>
<p>
  什么是蠕虫复制，这个类似细胞分裂
</p>
<p>
  1 变 2
</p>
<p>
  2 变 4
</p>
<p>
  4 变 8
</p>
<p>
  每次进行一个蠕虫复制的话，数据表的数据就是成倍的增加
</p>
<p>
  当前表有10条数据，蠕虫复制了10次&#8212;-现在有多少条数据？1024*10
</p>
<p>
  再蠕虫复制10次   1024*1024*10&#8212;-千万级数据
</p>
<p>
  所以蠕虫复制需要防止；
</p>
<p>
  例如：
</p>
<p>
  <img loading="lazy" decoding="async" width="586" height="209" src="/wp-content/uploads/2018/05/word-image-1048.png" class="wp-image-1160" srcset="/wp-content/uploads/2018/05/word-image-1048.png 586w, /wp-content/uploads/2018/05/word-image-1048-300x107.png 300w" sizes="(max-width: 586px) 100vw, 586px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="835" height="71" src="/wp-content/uploads/2018/05/word-image-1049.png" class="wp-image-1161" srcset="/wp-content/uploads/2018/05/word-image-1049.png 835w, /wp-content/uploads/2018/05/word-image-1049-300x26.png 300w, /wp-content/uploads/2018/05/word-image-1049-768x65.png 768w" sizes="(max-width: 835px) 100vw, 835px" /></p>
<p>
  <img loading="lazy" decoding="async" width="794" height="259" src="/wp-content/uploads/2018/05/word-image-1050.png" class="wp-image-1162" srcset="/wp-content/uploads/2018/05/word-image-1050.png 794w, /wp-content/uploads/2018/05/word-image-1050-300x98.png 300w, /wp-content/uploads/2018/05/word-image-1050-768x251.png 768w" sizes="(max-width: 794px) 100vw, 794px" />
</p>
<p>
  语法 insert [into] 表名 values select 语句
</p>
<p>
  Select 语句的查询结果字段和插入的字段列表一致（数量，类型）;
</p>
<p>
  扩展：怎么防止蠕虫复制
</p>
<p>
  	加入unique key
</p>
<h2>replace插入</h2>
<p>
  替换插入，如果插入的数据中在表中有（一个字段上—<strong><em>唯一建</em></strong>），那么会先把表中已有的数据删除，然后再插入
</p>
<p>
  Replace[ into]  表名  [(字段列表)]  values  (值列表);
</p>
<p>
  <img loading="lazy" decoding="async" width="573" height="157" src="/wp-content/uploads/2018/05/word-image-1051.png" class="wp-image-1163" srcset="/wp-content/uploads/2018/05/word-image-1051.png 573w, /wp-content/uploads/2018/05/word-image-1051-300x82.png 300w" sizes="(max-width: 573px) 100vw, 573px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="821" height="83" src="/wp-content/uploads/2018/05/word-image-1052.png" class="wp-image-1164" srcset="/wp-content/uploads/2018/05/word-image-1052.png 821w, /wp-content/uploads/2018/05/word-image-1052-300x30.png 300w, /wp-content/uploads/2018/05/word-image-1052-768x78.png 768w" sizes="(max-width: 821px) 100vw, 821px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="562" height="159" src="/wp-content/uploads/2018/05/word-image-1053.png" class="wp-image-1165" srcset="/wp-content/uploads/2018/05/word-image-1053.png 562w, /wp-content/uploads/2018/05/word-image-1053-300x85.png 300w" sizes="(max-width: 562px) 100vw, 562px" />
</p>
<h1>高级修改</h1>
<p>
  Update 表名 set 字段1=值1 ,字段2=值2…  where 修改条件;
</p>
<h2>排序限定条数修改</h2>
<p>
  语法：update 表名 set 字段1=值1 ,字段2=值2…  [where 条件]  [order by 子句]  [limit子句]
</p>
<p>
  在修改的过程中可以限定修改的条数，和排序
</p>
<p>
  我要修改英雄前三的伤害值 ，让伤害值加倍；
</p>
<p>
  这里用到了排序   英雄伤害从高到低排序    order by desc
</p>
<p>
  限定  		     修改前三条信息，让信息值加倍  limit 3
</p>
<p>
  Update hero set hurt=hurt*2 [hurt+hurt] order by hurt desc limit3;
</p>
<p>
  修改前，伤害前三的英雄信息
</p>
<p>
  <img loading="lazy" decoding="async" width="717" height="164" src="/wp-content/uploads/2018/05/word-image-1054.png" class="wp-image-1166" srcset="/wp-content/uploads/2018/05/word-image-1054.png 717w, /wp-content/uploads/2018/05/word-image-1054-300x69.png 300w" sizes="(max-width: 717px) 100vw, 717px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="813" height="269" src="/wp-content/uploads/2018/05/word-image-1055.png" class="wp-image-1167" srcset="/wp-content/uploads/2018/05/word-image-1055.png 813w, /wp-content/uploads/2018/05/word-image-1055-300x99.png 300w, /wp-content/uploads/2018/05/word-image-1055-768x254.png 768w" sizes="(max-width: 813px) 100vw, 813px" />
</p>
<p>
  扩展：
</p>
<p>
  	回想limit  3；
</p>
<p>
  		Limit 4,2;   修改英雄伤害排名是5,6的伤害，让其加倍&#8212;update修改没有这样的用法
</p>
<p>
  <img loading="lazy" decoding="async" width="1042" height="75" src="/wp-content/uploads/2018/05/word-image-1056.png" class="wp-image-1168" srcset="/wp-content/uploads/2018/05/word-image-1056.png 1042w, /wp-content/uploads/2018/05/word-image-1056-300x22.png 300w, /wp-content/uploads/2018/05/word-image-1056-768x55.png 768w, /wp-content/uploads/2018/05/word-image-1056-1024x74.png 1024w" sizes="(max-width: 1042px) 100vw, 1042px" />
</p>
<h1>高级删除</h1>
<p>
  delete from 表名 [where 条件] [order by 子句] [limit 子句]
</p>
<h2>排序限定条数删除</h2>
<p>
  英雄伤害前2两名，英雄删除
</p>
<p>
  Delete from hero  order by hurt desc  limit 2
</p>
<p>
  删除前数据
</p>
<p>
  <img loading="lazy" decoding="async" width="914" height="392" src="/wp-content/uploads/2018/05/word-image-1057.png" class="wp-image-1169" srcset="/wp-content/uploads/2018/05/word-image-1057.png 914w, /wp-content/uploads/2018/05/word-image-1057-300x129.png 300w, /wp-content/uploads/2018/05/word-image-1057-768x329.png 768w" sizes="(max-width: 914px) 100vw, 914px" />
</p>
<p>
  删除伤害排名前两位的英雄，如果成功，德玛和诺克消失
</p>
<p>
  <img loading="lazy" decoding="async" width="999" height="455" src="/wp-content/uploads/2018/05/word-image-1058.png" class="wp-image-1170" srcset="/wp-content/uploads/2018/05/word-image-1058.png 999w, /wp-content/uploads/2018/05/word-image-1058-300x137.png 300w, /wp-content/uploads/2018/05/word-image-1058-768x350.png 768w" sizes="(max-width: 999px) 100vw, 999px" />
</p>
<p>
  扩展：能不能指定从第几条开始删除？
</p>
<p>
  	也就是delete语句中支不支持 limit  数字,数字;的用法
</p>
<p>
  测试；删除伤害排名在第3，4的两个英雄
</p>
<p>
  <img loading="lazy" decoding="async" width="930" height="388" src="/wp-content/uploads/2018/05/word-image-1059.png" class="wp-image-1171" srcset="/wp-content/uploads/2018/05/word-image-1059.png 930w, /wp-content/uploads/2018/05/word-image-1059-300x125.png 300w, /wp-content/uploads/2018/05/word-image-1059-768x320.png 768w" sizes="(max-width: 930px) 100vw, 930px" />
</p>
<p>
  Sql: delete from hero order by hurt desc limit 2,2;
</p>
<p>
  <img loading="lazy" decoding="async" width="882" height="66" src="/wp-content/uploads/2018/05/word-image-1060.png" class="wp-image-1172" srcset="/wp-content/uploads/2018/05/word-image-1060.png 882w, /wp-content/uploads/2018/05/word-image-1060-300x22.png 300w, /wp-content/uploads/2018/05/word-image-1060-768x57.png 768w" sizes="(max-width: 882px) 100vw, 882px" />
</p>
<h2>Truncate删除</h2>
<p>
  清空表，除了清空表中的数据，还可以把表的自动增长归成1
</p>
<p>
  <img loading="lazy" decoding="async" width="795" height="207" src="/wp-content/uploads/2018/05/word-image-1061.png" class="wp-image-1173" srcset="/wp-content/uploads/2018/05/word-image-1061.png 795w, /wp-content/uploads/2018/05/word-image-1061-300x78.png 300w, /wp-content/uploads/2018/05/word-image-1061-768x200.png 768w" sizes="(max-width: 795px) 100vw, 795px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="975" height="217" src="/wp-content/uploads/2018/05/word-image-1062.png" class="wp-image-1174" srcset="/wp-content/uploads/2018/05/word-image-1062.png 975w, /wp-content/uploads/2018/05/word-image-1062-300x67.png 300w, /wp-content/uploads/2018/05/word-image-1062-768x171.png 768w" sizes="(max-width: 975px) 100vw, 975px" />
</p>
<p>
  Truncate请空表
</p>
<p>
  <img loading="lazy" decoding="async" width="501" height="51" src="/wp-content/uploads/2018/05/word-image-1063.png" class="wp-image-1175" srcset="/wp-content/uploads/2018/05/word-image-1063.png 501w, /wp-content/uploads/2018/05/word-image-1063-300x31.png 300w" sizes="(max-width: 501px) 100vw, 501px" />
</p>
<p>
  清空完成的效果
</p>
<p>
  <img loading="lazy" decoding="async" width="722" height="67" src="/wp-content/uploads/2018/05/word-image-1064.png" class="wp-image-1176" srcset="/wp-content/uploads/2018/05/word-image-1064.png 722w, /wp-content/uploads/2018/05/word-image-1064-300x28.png 300w" sizes="(max-width: 722px) 100vw, 722px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="710" height="205" src="/wp-content/uploads/2018/05/word-image-1065.png" class="wp-image-1177" srcset="/wp-content/uploads/2018/05/word-image-1065.png 710w, /wp-content/uploads/2018/05/word-image-1065-300x87.png 300w" sizes="(max-width: 710px) 100vw, 710px" />
</p>
<h1>联合查询</h1>
<h2>含义</h2>
<p>
  什么是联合查询
</p>
<p>
  联合查询是把两个查询结果放在一起来显示
</p>
<p>
  <img loading="lazy" decoding="async" width="568" height="282" src="/wp-content/uploads/2018/05/word-image-1066.png" class="wp-image-1178" srcset="/wp-content/uploads/2018/05/word-image-1066.png 568w, /wp-content/uploads/2018/05/word-image-1066-300x149.png 300w" sizes="(max-width: 568px) 100vw, 568px" />
</p>
<p>
  联合查询就是把这个两个展示出来的结果放在一块展示
</p>
<p>
  <img loading="lazy" decoding="async" width="792" height="247" src="/wp-content/uploads/2018/05/word-image-1067.png" class="wp-image-1179" srcset="/wp-content/uploads/2018/05/word-image-1067.png 792w, /wp-content/uploads/2018/05/word-image-1067-300x94.png 300w, /wp-content/uploads/2018/05/word-image-1067-768x240.png 768w" sizes="(max-width: 792px) 100vw, 792px" />
</p>
<p>
  既然是纵向的连接：首先是字段的个数必须一致
</p>
<h2>基本形式</h2>
<p>
  语法：select 语句  union [all/distinct]  select 语句
</p>
<p>
  <img loading="lazy" decoding="async" width="612" height="165" src="/wp-content/uploads/2018/05/word-image-1068.png" class="wp-image-1180" srcset="/wp-content/uploads/2018/05/word-image-1068.png 612w, /wp-content/uploads/2018/05/word-image-1068-300x81.png 300w" sizes="(max-width: 612px) 100vw, 612px" />
</p>
<h2>注意点</h2>
<ul>
<li>
    第一纵向连接，两个结果集字段数量必须一致
  </li>
<li>
    第二如果需要对连接过后的结果集 进行排序那么必须把两个select语句用小括号包括起来
  </li>
</ul>
<p>
  <img loading="lazy" decoding="async" width="741" height="41" src="/wp-content/uploads/2018/05/word-image-1069.png" class="wp-image-1181" srcset="/wp-content/uploads/2018/05/word-image-1069.png 741w, /wp-content/uploads/2018/05/word-image-1069-300x17.png 300w" sizes="(max-width: 741px) 100vw, 741px" />
</p>
<p>
  这个order by是对联合过后的结果进行排序
</p>
<ul>
<li>
    第三如果我们前边的select 语句查询的结果字段名，有别名，那么排序的时候必须用别名
  </li>
</ul>
<p>
  <img loading="lazy" decoding="async" width="916" height="49" src="/wp-content/uploads/2018/05/word-image-1070.png" class="wp-image-1182" srcset="/wp-content/uploads/2018/05/word-image-1070.png 916w, /wp-content/uploads/2018/05/word-image-1070-300x16.png 300w, /wp-content/uploads/2018/05/word-image-1070-768x41.png 768w" sizes="(max-width: 916px) 100vw, 916px" />
</p>
<p>
  <img loading="lazy" decoding="async" width="910" height="48" src="/wp-content/uploads/2018/05/word-image-1071.png" class="wp-image-1183" srcset="/wp-content/uploads/2018/05/word-image-1071.png 910w, /wp-content/uploads/2018/05/word-image-1071-300x16.png 300w, /wp-content/uploads/2018/05/word-image-1071-768x41.png 768w" sizes="(max-width: 910px) 100vw, 910px" />
</p>
<p>
  错误原因：因为联合查询出来的结果集中没有id这个字段名，原来的id改成了编号，如果想用id进行排序，难么只能使用 ‘编号’这个名称；
</p>
<ul>
<li>
    第四联合查询结果的字段名，默认是第一个select语句查询出来的字段名
  </li>
</ul>
<p>
  <img loading="lazy" decoding="async" width="710" height="477" src="/wp-content/uploads/2018/05/word-image-1072.png" class="wp-image-1184" srcset="/wp-content/uploads/2018/05/word-image-1072.png 710w, /wp-content/uploads/2018/05/word-image-1072-300x202.png 300w" sizes="(max-width: 710px) 100vw, 710px" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e6%95%b0%e6%8d%ae%e5%ba%93/mysql/1121.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>PHP 语法（三）判断语句、 包含文件、 循环语句、 运算符</title>
		<link>/php/813.html</link>
					<comments>/php/813.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Thu, 17 May 2018 16:46:36 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[PHP基本语法]]></category>
		<category><![CDATA[判断语句]]></category>
		<category><![CDATA[包含文件]]></category>
		<category><![CDATA[循环语句]]></category>
		<category><![CDATA[运算符]]></category>
		<guid isPermaLink="false">/?p=813</guid>

					<description><![CDATA[PHP语法（三） 运算符 算术运算符 一元运算符 二元运算符 &#8211; + ++ &#8211; &#8 [&#8230;]]]></description>
										<content:encoded><![CDATA[</p>
<h1>PHP语法（三）</h1>
<h2>运算符</h2>
<h3>算术运算符</h3>
<table>
<tr>
<td>
<p>
  一元运算符
</p>
</td>
<td>
<p>
  二元运算符
</p>
</td>
</tr>
<tr>
<td>
<p>
  &#8211;
</p>
</td>
<td>
<p>
  +
</p>
</td>
</tr>
<tr>
<td>
<p>
  ++
</p>
</td>
<td>
<p>
  &#8211;
</p>
</td>
</tr>
<tr>
<td>
<p>
  &#8212;
</p>
</td>
<td>
<p>
  *
</p>
</td>
</tr>
<tr>
<td></td>
<td>
<p>
  /
</p>
</td>
</tr>
<tr>
<td></td>
<td>
<p>
  %
</p>
</td>
</tr>
</table>
<p>
  脚下留心：
</p>
<ol>
<li>
  PHP中的“+”只能做数字运行，不能做字符串运算。
</li>
<li>
  ++和&#8211;要注意前置和后置的问题
</li>
</ol>
<p><img loading="lazy" decoding="async" width="659" height="26" src="/wp-content/uploads/2018/05/word-image-714.png" class="wp-image-815" srcset="/wp-content/uploads/2018/05/word-image-714.png 659w, /wp-content/uploads/2018/05/word-image-714-300x12.png 300w" sizes="(max-width: 659px) 100vw, 659px" /><br />
<img loading="lazy" decoding="async" width="601" height="71" src="/wp-content/uploads/2018/05/word-image-715.png" class="wp-image-816" srcset="/wp-content/uploads/2018/05/word-image-715.png 601w, /wp-content/uploads/2018/05/word-image-715-300x35.png 300w" sizes="(max-width: 601px) 100vw, 601px" /></p>
<h3>比较运算符（关系运算符）</h3>
<table>
<tr>
<td>
<p>
  运算符
</p>
</td>
<td>
<p>
  描述
</p>
</td>
</tr>
<tr>
<td>
<p>
  &gt;
</p>
</td>
<td>
<p>
  大于
</p>
</td>
</tr>
<tr>
<td>
<p>
  &gt;=
</p>
</td>
<td>
<p>
  大于等于
</p>
</td>
</tr>
<tr>
<td>
<p>
  &lt;
</p>
</td>
<td>
<p>
  小于
</p>
</td>
</tr>
<tr>
<td>
<p>
  &lt;=
</p>
</td>
<td>
<p>
  小于等于
</p>
</td>
</tr>
<tr>
<td>
<p>
  ==
</p>
</td>
<td>
<p>
  等于    *只要能转成相同的值就是相等
</p>
</td>
</tr>
<tr>
<td>
<p>
  ===
</p>
</td>
<td>
<p>
  全等于  *不但值相等，数据类型也要相等
</p>
</td>
</tr>
<tr>
<td>
<p>
  !=或&lt;&gt;
</p>
</td>
<td>
<p>
  不等于
</p>
</td>
</tr>
<tr>
<td>
<p>
  !==
</p>
</td>
<td>
<p>
  不全等
</p>
</td>
</tr>
</table>
<p>
  注意：比较运算符的运算结果是布尔型的
</p>
<p><img loading="lazy" decoding="async" width="615" height="213" src="/wp-content/uploads/2018/05/word-image-716.png" class="wp-image-817" srcset="/wp-content/uploads/2018/05/word-image-716.png 615w, /wp-content/uploads/2018/05/word-image-716-300x104.png 300w" sizes="(max-width: 615px) 100vw, 615px" /></p>
<p>
  不等于
</p>
<p><img loading="lazy" decoding="async" width="307" height="115" src="/wp-content/uploads/2018/05/word-image-717.png" class="wp-image-818" srcset="/wp-content/uploads/2018/05/word-image-717.png 307w, /wp-content/uploads/2018/05/word-image-717-300x112.png 300w" sizes="(max-width: 307px) 100vw, 307px" /></p>
<h3>逻辑运算符</h3>
<p>
  逻辑运算符是用来连接比较运算符的。
</p>
<table>
<tr>
<td>
<p>
  运算符
</p>
</td>
<td>
<p>
  描述
</p>
</td>
</tr>
<tr>
<td>
<p>
  &amp;&amp;或and
</p>
</td>
<td>
<p>
  与（并且）
</p>
</td>
</tr>
<tr>
<td>
<p>
  ||或or
</p>
</td>
<td>
<p>
  或（或者）
</p>
</td>
</tr>
<tr>
<td>
<p>
  !
</p>
</td>
<td>
<p>
  非（取反）
</p>
</td>
</tr>
</table>
<p>
  练习
</p>
<p>
  true &amp;&amp; true		true
</p>
<p>
  true &amp;&amp; false		false
</p>
<p>
  false &amp;&amp; true		false
</p>
<p>
  false &amp;&amp; false	false
</p>
<p>
  true || true		true
</p>
<p>
  true || false		true
</p>
<p>
  false || true 	true
</p>
<p>
  false || false	false
</p>
<p>
  !true				false
</p>
<p>
  !false				true
</p>
<p>
  例题
</p>
<p><img loading="lazy" decoding="async" width="693" height="90" src="/wp-content/uploads/2018/05/word-image-718.png" class="wp-image-819" srcset="/wp-content/uploads/2018/05/word-image-718.png 693w, /wp-content/uploads/2018/05/word-image-718-300x39.png 300w" sizes="(max-width: 693px) 100vw, 693px" /></p>
<h3>赋值运算符</h3>
<table>
<tr>
<td>
<p>
  运算符
</p>
</td>
<td>
<p>
  描述
</p>
</td>
</tr>
<tr>
<td>
<p>
  =
</p>
</td>
<td>
<p>
  赋值
</p>
</td>
</tr>
<tr>
<td>
<p>
  +=
</p>
</td>
<td>
<p>
  a+=b    a=a+b
</p>
</td>
</tr>
<tr>
<td>
<p>
  -=
</p>
</td>
<td></td>
</tr>
<tr>
<td>
<p>
  *=
</p>
</td>
<td></td>
</tr>
<tr>
<td>
<p>
  /=
</p>
</td>
<td></td>
</tr>
<tr>
<td>
<p>
  %=
</p>
</td>
<td></td>
</tr>
</table>
<p>
  总结 ：= 赋值	==	等于	===  全等
</p>
<h3>字符串连接符（.）</h3>
<p><img loading="lazy" decoding="async" width="550" height="35" src="/wp-content/uploads/2018/05/word-image-719.png" class="wp-image-820" srcset="/wp-content/uploads/2018/05/word-image-719.png 550w, /wp-content/uploads/2018/05/word-image-719-300x19.png 300w" sizes="(max-width: 550px) 100vw, 550px" /></p>
<h3>错误控制运算符（错误抑制符 @）</h3>
<p>
  @用来屏蔽表达式错误，只对表达式有效。
</p>
<p><img loading="lazy" decoding="async" width="678" height="78" src="/wp-content/uploads/2018/05/word-image-720.png" class="wp-image-821" srcset="/wp-content/uploads/2018/05/word-image-720.png 678w, /wp-content/uploads/2018/05/word-image-720-300x35.png 300w" sizes="(max-width: 678px) 100vw, 678px" /></p>
<h3>三元运算符（?:）</h3>
<p>
  语法：表达式?值1：值2
</p>
<p>
  如果表达式为真，返回值1，否则返回值2
</p>
<p><img loading="lazy" decoding="async" width="954" height="207" src="/wp-content/uploads/2018/05/word-image-721.png" class="wp-image-822" srcset="/wp-content/uploads/2018/05/word-image-721.png 954w, /wp-content/uploads/2018/05/word-image-721-300x65.png 300w, /wp-content/uploads/2018/05/word-image-721-768x167.png 768w" sizes="(max-width: 954px) 100vw, 954px" /></p>
<h3>位运算符（了解）</h3>
<table>
<tr>
<td>
<p>
  运算符
</p>
</td>
<td>
<p>
  描述
</p>
</td>
</tr>
<tr>
<td>
<p>
  按位与（&amp;）
</p>
</td>
<td>
<p>
  两个相同的位都是1，结果才是1，有一位是0结果就是0
</p>
</td>
</tr>
<tr>
<td>
<p>
  按位或（|）
</p>
</td>
<td>
<p>
  两个位只要有一个是1结果就是1
</p>
</td>
</tr>
<tr>
<td>
<p>
  按位异或（^）
</p>
</td>
<td>
<p>
  两个位不同为1，相同位0
</p>
</td>
</tr>
<tr>
<td>
<p>
  按位非（~）
</p>
</td>
<td>
<p>
  按位取反
</p>
</td>
</tr>
<tr>
<td>
<p>
  位左移（&lt;&lt;）
</p>
</td>
<td>
<p>
  位向左移动
</p>
</td>
</tr>
<tr>
<td>
<p>
  位右移（&gt;&gt;）
</p>
</td>
<td>
<p>
  位向右移动
</p>
</td>
</tr>
</table>
<p>
  例题
</p>
<p><img loading="lazy" decoding="async" width="1232" height="258" src="/wp-content/uploads/2018/05/word-image-722.png" class="wp-image-823" srcset="/wp-content/uploads/2018/05/word-image-722.png 1232w, /wp-content/uploads/2018/05/word-image-722-300x63.png 300w, /wp-content/uploads/2018/05/word-image-722-768x161.png 768w, /wp-content/uploads/2018/05/word-image-722-1024x214.png 1024w" sizes="(max-width: 1232px) 100vw, 1232px" /></p>
<h2>运算符的优先级</h2>
<ol>
<li>
  第一步：小括号的优先级最高
</li>
<li>
  第二步：先乘除后加减
</li>
<li>
  第三步：算术运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符
</li>
</ol>
<p>
  $a=5;
</p>
<p>
  $b=6;
</p>
<p>
  $a&gt;$b &amp;&amp; ($a+$b)&gt;$b*2 || !($a==$b)
</p>
<p>
  =false &amp;&amp; false || true
</p>
<p>
  =true
</p>
<h2>两个常用于判读变量的函数</h2>
<p>
  在处理一个没有定义的变量的时候回报错
</p>
<p><img loading="lazy" decoding="async" width="777" height="73" src="/wp-content/uploads/2018/05/word-image-723.png" class="wp-image-824" srcset="/wp-content/uploads/2018/05/word-image-723.png 777w, /wp-content/uploads/2018/05/word-image-723-300x28.png 300w, /wp-content/uploads/2018/05/word-image-723-768x72.png 768w" sizes="(max-width: 777px) 100vw, 777px" /></p>
<p>
  我们在使用变量之前，向判读一下变量，判读变量的函数有两个
</p>
<table>
<tr>
<td>
<p>
  函数
</p>
</td>
<td>
<p>
  说明
</p>
</td>
</tr>
<tr>
<td>
<p>
  isset()
</p>
</td>
<td>
<p>
  检测变量是否设置，并且设置的值不是null
</p>
</td>
</tr>
<tr>
<td>
<p>
  empty()
</p>
</td>
<td>
<p>
  检查变量是否为空，只要能转成 false的都为空。
</p>
</td>
</tr>
</table>
<p>
  例题：
</p>
<p><img loading="lazy" decoding="async" width="555" height="111" src="/wp-content/uploads/2018/05/word-image-724.png" class="wp-image-825" srcset="/wp-content/uploads/2018/05/word-image-724.png 555w, /wp-content/uploads/2018/05/word-image-724-300x60.png 300w" sizes="(max-width: 555px) 100vw, 555px" /><br />
<img loading="lazy" decoding="async" width="683" height="110" src="/wp-content/uploads/2018/05/word-image-725.png" class="wp-image-826" srcset="/wp-content/uploads/2018/05/word-image-725.png 683w, /wp-content/uploads/2018/05/word-image-725-300x48.png 300w" sizes="(max-width: 683px) 100vw, 683px" /></p>
<h2>流程控制的三大基本结构</h2>
<ol>
<li>
  顺序结构
</li>
<li>
  判断
</li>
<li>
  循环
</li>
</ol>
<h2>判断语句</h2>
<h3>语法结构</h3>
<ol>
<li>
  单分支
</li>
</ol>
<p>
  if(条件){
</p>
<p>
  }
</p>
<ol>
<li>
  双分支
</li>
</ol>
<p>
  if(条件){
</p>
<p>
  }else{
</p>
<p>
  }
</p>
<ol>
<li>
  多分支
</li>
</ol>
<p>
  if(条件){
</p>
<p>
  }
</p>
<p>
  elseif(条件){
</p>
<p>
  }
</p>
<p>
  elseif(条件){
</p>
<p>
  }
</p>
<p>
  else{
</p>
<p>
  }
</p>
<p>
  注意：多分支else和if之间是没有空格的。
</p>
<ol>
<li>
  多路选择
</li>
</ol>
<p>
  Switch(表达式){
</p>
<p>
  	case 常量:
</p>
<p>
  		[break];
</p>
<p>
  	case 常量:
</p>
<p>
  		[break];
</p>
<p>
  	default
</p>
<p>
  }
</p>
<h3>例题：判断闰年（双分支）</h3>
<ol>
<li>
  empty()：如果$_POST为空表示没有post提交，不为空表示表达有post提交
</li>
<li>
  trim()：去除字符串两边的空格
</li>
<li>
  is_numeric()：判断变量是否是数字或数字字符串
</li>
<li>
  $year+=0;将$year转成数字类型
</li>
<li>
  is_int()：判断变量是否是整型
</li>
</ol>
<p>
  &lt;?php
</p>
<p>
  if(!empty($_POST)) {	//数组不为空说明点击了提交按钮
</p>
<p>
  	$year=trim($_POST[&#8216;year&#8217;]);	//获取年份,trim()用来去字符串两边的空格
</p>
<p>
  	if($year==&#8221;){
</p>
<p>
  		echo &#8216;您没有输入&#8217;;
</p>
<p>
  	}else{
</p>
<p>
  		if(!is_numeric($year)){
</p>
<p>
  			echo &#8216;您输入的不是数字&#8217;;
</p>
<p>
  		}else{
</p>
<p>
  			$year+=0;	//将$year转成数字类型
</p>
<p>
  			if(is_int($year)){	//is_int()检查变量是否是整型
</p>
<p>
  				if($year&lt;1)
</p>
<p>
  					echo &#8216;您输入的年份必须正整数&#8217;;
</p>
<p>
  				else {
</p>
<p>
  					/**
</p>
<p>
  					*润年的条件
</p>
<p>
  					*1、能被4整除，但是不能被100整除
</p>
<p>
  					*2、能被400整除的年份
</p>
<p>
  					*/
</p>
<p>
  					if($year%4==0 &amp;&amp; $year%100!=0 || $year%400==0)
</p>
<p>
  						echo &#8220;{$year}是闰年&#8221;;
</p>
<p>
  					else
</p>
<p>
  						echo &#8220;{$year}是平年&#8221;;
</p>
<p>
  				}
</p>
<p>
  			}else{
</p>
<p>
  				echo &#8216;您输入的年份不是整数&#8217;;
</p>
<p>
  			}
</p>
<p>
  		}
</p>
<p>
  	}
</p>
<p>
  }
</p>
<p>
  ?&gt;
</p>
<p>
  &lt;form method=&#8221;post&#8221; action=&#8221;&#8221;&gt;
</p>
<p>
  	请输入年份： &lt;input type=&#8221;text&#8221; name=&#8221;year&#8221;&gt; &lt;br /&gt;
</p>
<p>
  	&lt;input type=&#8221;submit&#8221; name=&#8221;button&#8221; value=&#8221;判读闰年&#8221;&gt;
</p>
<p>
  &lt;/form&gt;
</p>
<p><img loading="lazy" decoding="async" width="307" height="72" src="/wp-content/uploads/2018/05/word-image-726.png" class="wp-image-827" srcset="/wp-content/uploads/2018/05/word-image-726.png 307w, /wp-content/uploads/2018/05/word-image-726-300x70.png 300w" sizes="(max-width: 307px) 100vw, 307px" /></p>
<h3>例题：判断成绩（多分支）</h3>
<p>
  &lt;?php
</p>
<p>
  if(!empty($_POST)) {
</p>
<p>
  	$ch=trim($_POST[&#8216;ch&#8217;]);		//获取语文成绩
</p>
<p>
  	$math=trim($_POST[&#8216;math&#8217;]);	//获取数学成绩
</p>
<p>
  	if($ch==&#8221; || !is_numeric($ch) || $ch&lt;0 || $ch&gt;100)
</p>
<p>
  		echo &#8216;语文成绩必须在0-100之间&#8217;;
</p>
<p>
  	elseif($math==&#8221; || !is_numeric($math) || !($math&gt;=0 &amp;&amp; $math&lt;=100))
</p>
<p>
  		echo &#8216;数学成绩必须在0-100之间&#8217;;
</p>
<p>
  	else{
</p>
<p>
  		$avg=($ch+$math)/2;
</p>
<p>
  		echo &#8216;您的平均分是：&#8217;.$avg.'&lt;br&gt;&#8217;;
</p>
<p>
  		if($avg&gt;=90)
</p>
<p>
  			echo &#8216;孩子，你是我的骄傲&#8217;;
</p>
<p>
  		elseif($avg&gt;=80)
</p>
<p>
  			echo &#8216;好样的，宝贝&#8217;;
</p>
<p>
  		elseif($avg&gt;=70)
</p>
<p>
  			echo &#8216;您离优秀不远了&#8217;;
</p>
<p>
  		elseif($avg&gt;=60)
</p>
<p>
  			echo &#8216;您还是有潜力的&#8217;;
</p>
<p>
  		else
</p>
<p>
  			echo &#8216;看来你不努力是不行了&#8217;;
</p>
<p>
  	}
</p>
<p>
  }
</p>
<p>
  ?&gt;
</p>
<p>
  &lt;form method=&#8221;post&#8221; action=&#8221;&#8221;&gt;
</p>
<p>
  	语文： &lt;input type=&#8221;text&#8221; name=&#8221;ch&#8221;&gt; &lt;br /&gt;
</p>
<p>
  	数学： &lt;input type=&#8221;text&#8221; name=&#8221;math&#8221;&gt; &lt;br /&gt;
</p>
<p>
  	&lt;input type=&#8221;submit&#8221; name=&#8221;button&#8221; value=&#8221;提交&#8221;&gt;
</p>
<p>
  &lt;/form&gt;
</p>
<p><img loading="lazy" decoding="async" width="308" height="113" src="/wp-content/uploads/2018/05/word-image-727.png" class="wp-image-828" srcset="/wp-content/uploads/2018/05/word-image-727.png 308w, /wp-content/uploads/2018/05/word-image-727-300x110.png 300w" sizes="(max-width: 308px) 100vw, 308px" /></p>
<h3>例题：switch-case</h3>
<p>
  &lt;div id=&#8221;shi&#8221; class=&#8221;&#8221;&gt;
</p>
<p>
  	锄禾日当午，&lt;br&gt;
</p>
</p>
<p>
  汗滴禾下土。&lt;br&gt;
</p>
</p>
<p>
  谁知盘中餐，&lt;br&gt;
</p>
</p>
<p>
  粒粒皆辛苦。
</p>
<p>
  &lt;/div&gt;
</p>
<p>
  &lt;form method=&#8221;post&#8221; action=&#8221;&#8221;&gt;
</p>
<p>
  	&lt;select name=&#8221;color&#8221;&gt;
</p>
<p>
  		&lt;option value=&#8221;&#8221;&gt;&#8212;请选择颜色&#8212;&lt;/option&gt;
</p>
<p>
  		&lt;option value=&#8221;1&#8243;&gt;红色&lt;/option&gt;
</p>
<p>
  		&lt;option value=&#8221;2&#8243;&gt;绿色&lt;/option&gt;
</p>
<p>
  		&lt;option value=&#8221;3&#8243;&gt;蓝色&lt;/option&gt;
</p>
<p>
  	&lt;/select&gt;
</p>
<p>
  	&lt;input type=&#8221;submit&#8221; name=&#8221;button&#8221; value=&#8221;确定&#8221;&gt;
</p>
<p>
  &lt;/form&gt;
</p>
<p>
  &lt;?php
</p>
<p>
  if(!empty($_POST)) {
</p>
<p>
  	$color=$_POST[&#8216;color&#8217;];
</p>
<p>
  	switch($color) {
</p>
<p>
  		case 1:
</p>
<p>
  			$color=&#8217;#FF0000&#8242;;
</p>
<p>
  			break;
</p>
<p>
  		case 2:
</p>
<p>
  			$color=&#8217;#009900&#8242;;
</p>
<p>
  			break;
</p>
<p>
  		case 3:
</p>
<p>
  			$color=&#8217;#0000FF&#8217;;
</p>
<p>
  			break;
</p>
<p>
  		default:
</p>
<p>
  			$color=&#8217;#000000&#8242;;
</p>
<p>
  	}
</p>
<p>
  	/*
</p>
<p>
  	echo &#8216;&lt;script type=&#8221;text/javascript&#8221;&gt;&#8217;;
</p>
<p>
  	echo &#8220;shi.style.color='{$color}'&#8221;;
</p>
<p>
  	echo &#8216;&lt;/script&gt;&#8217;;
</p>
<p>
  	*/
</p>
<p>
  	//换一种写法
</p>
<p>
  ?&gt;
</p>
<p>
  	&lt;script type=&#8221;text/javascript&#8221;&gt;
</p>
<p>
  		shi.style.color='&lt;?php echo $color?&gt;&#8217;;
</p>
<p>
  	&lt;/script&gt;
</p>
<p>
  &lt;?php
</p>
<p>
  }
</p>
<p>
  ?&gt;
</p>
<p><img loading="lazy" decoding="async" width="412" height="127" src="/wp-content/uploads/2018/05/word-image-728.png" class="wp-image-829" srcset="/wp-content/uploads/2018/05/word-image-728.png 412w, /wp-content/uploads/2018/05/word-image-728-300x92.png 300w" sizes="(max-width: 412px) 100vw, 412px" /></p>
<h3>注意如下两种写法</h3>
<p><img loading="lazy" decoding="async" width="628" height="277" src="/wp-content/uploads/2018/05/word-image-729.png" class="wp-image-830" srcset="/wp-content/uploads/2018/05/word-image-729.png 628w, /wp-content/uploads/2018/05/word-image-729-300x132.png 300w" sizes="(max-width: 628px) 100vw, 628px" /></p>
<h3>替代语法</h3>
<p>
  左大括号变冒号（:），右大括号变endXXX
</p>
<p><strong>单分支</strong>
</p>
<p>
  if(条件):
</p>
<p>
  endif;
</p>
<p><strong>双分支</strong>
</p>
<p>
  if(条件):
</p>
<p>
  	//代码1
</p>
<p>
  else:
</p>
<p>
  	//代码2
</p>
<p>
  endif;
</p>
<p><strong>多分支</strong>
</p>
<p>
  if(条件):
</p>
<p>
  	//代码1
</p>
<p>
  elseif(条件):
</p>
<p>
  	//代码2
</p>
<p>
  else:
</p>
<p>
  	//代码3
</p>
<p>
  endif;
</p>
<p><strong>switch-case</strong>
</p>
<p>
  switch(表达式):
</p>
<p>
  	case :
</p>
<p>
  		break;
</p>
<p>
  endswitch;
</p>
<h3>else if和elseif的区别</h3>
<p>
  elseif是多分支；else if是嵌套if语句
</p>
<p>
  else if等价于
</p>
<p>
  else{
</p>
<p>
  	if(){
</p>
<p>
  }
</p>
<p>
  }
</p>
<p>
  验证一下
</p>
<p><img loading="lazy" decoding="async" width="429" height="170" src="/wp-content/uploads/2018/05/word-image-730.png" class="wp-image-831" srcset="/wp-content/uploads/2018/05/word-image-730.png 429w, /wp-content/uploads/2018/05/word-image-730-300x119.png 300w" sizes="(max-width: 429px) 100vw, 429px" /><br />
<img loading="lazy" decoding="async" width="394" height="209" src="/wp-content/uploads/2018/05/word-image-731.png" class="wp-image-832" srcset="/wp-content/uploads/2018/05/word-image-731.png 394w, /wp-content/uploads/2018/05/word-image-731-300x159.png 300w" sizes="(max-width: 394px) 100vw, 394px" /></p>
<h2>循环语句</h2>
<h3>循环的分类</h3>
<ol>
<li>
  for
</li>
<li>
  while
</li>
<li>
  do-while
</li>
<li>
  foreach
</li>
</ol>
<h3>语法</h3>
<ol>
<li>
  for循环
</li>
</ol>
<p>
  for(初始值;条件;增量){
</p>
<p>
  	//循环体
</p>
<p>
  }
</p>
<ol>
<li>
  for循环的替代语法
</li>
</ol>
<p>
  for(初始值;条件;增量):
</p>
<p>
  	//循环体
</p>
<p>
  endfor;
</p>
<ol>
<li>
  while循环
</li>
</ol>
<p>
  while(条件){
</p>
<p>
  	//循环体
</p>
<p>
  }
</p>
<ol>
<li>
  While循环的替代语法
</li>
</ol>
<p>
  While(条件):
</p>
<p>
  Endwhile;
</p>
<p>
  do-while循环
</p>
<p>
  do
</p>
<p>
  {
</p>
<p>
  	//循环体
</p>
<p>
  }while(条件)
</p>
<p>
  注意：判断和循环体中如果有一句代码，大括号是可以省略的。
</p>
<h3>循环的思考</h3>
<ol>
<li>
  在一个循环了n次的循环中，初始值、条件、增量各执行了几次
</li>
</ol>
<p>
  答：初始值1次，条件n+1次，增量n次
</p>
<ol>
<li>
  for($i=1;$i!=5;$i++)循环了几次？
</li>
</ol>
<p>
  答：循环4次
</p>
<ol>
<li>
  循环执行完毕后，$i的变量是否存在？
</li>
</ol>
<p>
  答：存在
</p>
<p><img loading="lazy" decoding="async" width="339" height="45" src="/wp-content/uploads/2018/05/word-image-732.png" class="wp-image-833" srcset="/wp-content/uploads/2018/05/word-image-732.png 339w, /wp-content/uploads/2018/05/word-image-732-300x40.png 300w" sizes="(max-width: 339px) 100vw, 339px" /></p>
<h3>例题：三种循环实现从1加到任意数</h3>
<p>
  &lt;?php
</p>
<p>
  if(isset($_POST[&#8216;button&#8217;])) {
</p>
<p>
  	$num=$_POST[&#8216;num&#8217;];
</p>
<p>
  	//for循环实现
</p>
<p>
  	$sum=0;
</p>
<p>
  	for($i=1; $i&lt;=$num; $i++) {
</p>
<p>
  		$sum+=$i;
</p>
<p>
  	}
</p>
<p>
  	echo &#8220;for循环实现结果是:{$sum}&lt;br&gt;&#8221;;
</p>
<p>
  	//while循环
</p>
<p>
  	$sum=0;$i=1;
</p>
<p>
  	while($i&lt;=$num) {
</p>
<p>
  		$sum+=$i++;
</p>
<p>
  	}
</p>
<p>
  	echo &#8220;while循环实现结果是:{$sum}&lt;br&gt;&#8221;;
</p>
<p>
  	//do-while循环
</p>
<p>
  	$sum=0;$i=1;
</p>
<p>
  	do
</p>
<p>
  	{
</p>
<p>
  		$sum+=$i++;
</p>
<p>
  	}while($i&lt;=$num);
</p>
<p>
  	echo &#8220;do-while循环实现结果是:{$sum}&lt;br&gt;&#8221;;
</p>
<p>
  }
</p>
<p>
  ?&gt;
</p>
<p>
  &lt;form method=&#8221;post&#8221; action=&#8221;&#8221;&gt;
</p>
<p>
  	请输入一个数： &lt;input type=&#8221;text&#8221; name=&#8221;num&#8221;&gt; &lt;br /&gt;
</p>
<p>
  	&lt;input type=&#8221;submit&#8221; name=&#8221;button&#8221; value=&#8221;提交&#8221;&gt;
</p>
<p>
  &lt;/form&gt;
</p>
<p><img loading="lazy" decoding="async" width="291" height="108" src="/wp-content/uploads/2018/05/word-image-733.png" class="wp-image-834" /></p>
<h3>例题：翻转数组</h3>
<ol>
<li>
  给数组添加元素
</li>
<li>
  两个变量调换
</li>
<li>
  for循环中初始值，条件，增量的部分可以放多个表达式
</li>
</ol>
<p><img loading="lazy" decoding="async" width="1064" height="237" src="/wp-content/uploads/2018/05/word-image-734.png" class="wp-image-835" srcset="/wp-content/uploads/2018/05/word-image-734.png 1064w, /wp-content/uploads/2018/05/word-image-734-300x67.png 300w, /wp-content/uploads/2018/05/word-image-734-768x171.png 768w, /wp-content/uploads/2018/05/word-image-734-1024x228.png 1024w" sizes="(max-width: 1064px) 100vw, 1064px" /></p>
<p>
  面试题：不通过第三个变量如何实现两个变量的交换?
</p>
<p><img loading="lazy" decoding="async" width="515" height="113" src="/wp-content/uploads/2018/05/word-image-735.png" class="wp-image-836" srcset="/wp-content/uploads/2018/05/word-image-735.png 515w, /wp-content/uploads/2018/05/word-image-735-300x66.png 300w" sizes="(max-width: 515px) 100vw, 515px" /></p>
<h3>foreach循环</h3>
<p>
  foreach循环用来遍历数组
</p>
<p>
  语法：
</p>
<p>
  //语法一
</p>
<p>
  foreach(数组  as 值){
</p>
<p>
  }
</p>
<p>
  //语法二
</p>
<p>
  foreach(数组 as 键=&gt;值){
</p>
<p>
  }
</p>
<p>
  //foreach也支持替换语法
</p>
<p>
  foreach(数组 as 值):
</p>
<p>
  endforeach;
</p>
<p>
  例题
</p>
<p><img loading="lazy" decoding="async" width="522" height="204" src="/wp-content/uploads/2018/05/word-image-736.png" class="wp-image-837" srcset="/wp-content/uploads/2018/05/word-image-736.png 522w, /wp-content/uploads/2018/05/word-image-736-300x117.png 300w" sizes="(max-width: 522px) 100vw, 522px" /></p>
<p>
  例题：
</p>
<p><img loading="lazy" decoding="async" width="1039" height="421" src="/wp-content/uploads/2018/05/word-image-737.png" class="wp-image-838" srcset="/wp-content/uploads/2018/05/word-image-737.png 1039w, /wp-content/uploads/2018/05/word-image-737-300x122.png 300w, /wp-content/uploads/2018/05/word-image-737-768x311.png 768w, /wp-content/uploads/2018/05/word-image-737-1024x415.png 1024w" sizes="(max-width: 1039px) 100vw, 1039px" /></p>
<h2>跳转语句</h2>
<ol>
<li>
  break：中断所有循环
</li>
<li>
  continue：跳出当前循环进入下一个循环
</li>
</ol>
<p>
  注意：
</p>
<ol>
<li>
  break和continue默认中断1重循环。
</li>
<li>
  如果一个循环只循环一次，break和continue的结果是一样的
</li>
</ol>
<p><img loading="lazy" decoding="async" width="556" height="191" src="/wp-content/uploads/2018/05/word-image-738.png" class="wp-image-839" srcset="/wp-content/uploads/2018/05/word-image-738.png 556w, /wp-content/uploads/2018/05/word-image-738-300x103.png 300w" sizes="(max-width: 556px) 100vw, 556px" /></p>
<ol>
<li>
  switch的本质是循环了一次的循环
</li>
</ol>
<p><img loading="lazy" decoding="async" width="414" height="197" src="/wp-content/uploads/2018/05/word-image-739.png" class="wp-image-840" srcset="/wp-content/uploads/2018/05/word-image-739.png 414w, /wp-content/uploads/2018/05/word-image-739-300x143.png 300w" sizes="(max-width: 414px) 100vw, 414px" /></p>
<p>
  例题
</p>
<p><img loading="lazy" decoding="async" width="402" height="154" src="/wp-content/uploads/2018/05/word-image-740.png" class="wp-image-841" srcset="/wp-content/uploads/2018/05/word-image-740.png 402w, /wp-content/uploads/2018/05/word-image-740-300x115.png 300w" sizes="(max-width: 402px) 100vw, 402px" /></p>
<h2>包含文件</h2>
<p>
  相同的代码出现在多个页面中，不便于维护，我们将相同的代码分离开来，在需要用到的页面中引入包含文件即可。
</p>
<p><img loading="lazy" decoding="async" width="659" height="262" src="/wp-content/uploads/2018/05/word-image-741.png" class="wp-image-842" srcset="/wp-content/uploads/2018/05/word-image-741.png 659w, /wp-content/uploads/2018/05/word-image-741-300x119.png 300w" sizes="(max-width: 659px) 100vw, 659px" /></p>
<p>
  解决：我们将相同的代码分离开来，在需要用到的页面中引入包含文件即可
</p>
<p><img loading="lazy" decoding="async" width="702" height="244" src="/wp-content/uploads/2018/05/word-image-742.png" class="wp-image-843" srcset="/wp-content/uploads/2018/05/word-image-742.png 702w, /wp-content/uploads/2018/05/word-image-742-300x104.png 300w" sizes="(max-width: 702px) 100vw, 702px" /></p>
<h3>包含的语法</h3>
<ol>
<li>
  include ‘地址’：可以包含多次，如果有错，报警告错误，继续执行
</li>
<li>
  require ‘地址’：可以包含多次，如果有错，报致命错误，终止执行。
</li>
<li>
  include_once ‘地址’：只能包含一次，区别和include一样
</li>
<li>
  require_once ‘地址’：只能包含一次，区别和require一样
</li>
</ol>
<p><img loading="lazy" decoding="async" width="603" height="93" src="/wp-content/uploads/2018/05/word-image-743.png" class="wp-image-844" srcset="/wp-content/uploads/2018/05/word-image-743.png 603w, /wp-content/uploads/2018/05/word-image-743-300x46.png 300w" sizes="(max-width: 603px) 100vw, 603px" /><br />
<img loading="lazy" decoding="async" width="660" height="73" src="/wp-content/uploads/2018/05/word-image-744.png" class="wp-image-845" srcset="/wp-content/uploads/2018/05/word-image-744.png 660w, /wp-content/uploads/2018/05/word-image-744-300x33.png 300w" sizes="(max-width: 660px) 100vw, 660px" /></p>
<p>
  如果HTML包含文件中有PHP代码，包含文件的PHP代码是执行的。 因为包含文件就相当于拷贝粘贴到PHP页面中了。
</p>
<h2>作业</h2>
<ol>
<li>
  PHP实现计算器
</li>
</ol>
<p><img loading="lazy" decoding="async" width="571" height="34" src="/wp-content/uploads/2018/05/word-image-745.png" class="wp-image-846" srcset="/wp-content/uploads/2018/05/word-image-745.png 571w, /wp-content/uploads/2018/05/word-image-745-300x18.png 300w" sizes="(max-width: 571px) 100vw, 571px" /></p>
<ol>
<li>
  九九乘法表
</li>
</ol>
]]></content:encoded>
					
					<wfw:commentRss>/php/813.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>JS初级（一）变量、 声明、 引用、 数据类型、 输出、 运算符</title>
		<link>/%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af/303.html</link>
					<comments>/%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af/303.html#respond</comments>
		
		<dc:creator><![CDATA[Mr.Lee]]></dc:creator>
		<pubDate>Thu, 17 May 2018 14:16:05 +0000</pubDate>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[前端技术]]></category>
		<category><![CDATA[变量]]></category>
		<category><![CDATA[声明]]></category>
		<category><![CDATA[引用]]></category>
		<category><![CDATA[数据类型]]></category>
		<category><![CDATA[输出]]></category>
		<category><![CDATA[运算符]]></category>
		<guid isPermaLink="false">/?p=303</guid>

					<description><![CDATA[JavaScript（一） 作业 第一题 &#60;style type=&#8221;text/css&#82 [&#8230;]]]></description>
										<content:encoded><![CDATA[</p>
<h1>JavaScript（一）</h1>
<h2>作业</h2>
<h3>第一题</h3>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  body{
</p>
<p>
  	background-color:#0CF;
</p>
<p>
  }
</p>
<p>
  input[type=&#8217;text&#8217;]{
</p>
<p>
  	border-top:none;
</p>
<p>
  	border-left:none;
</p>
<p>
  	border-right:none;
</p>
<p>
  	border-bottom:#06C solid 1px;
</p>
<p>
  	background-color:transparent;  /*背景色透明*/
</p>
<p>
  }
</p>
<p>
  input[type=&#8217;button&#8217;]{
</p>
<p>
  	border:none;
</p>
<p>
  	background-color:transparent;	/*背景色透明*/
</p>
<p>
  	cursor:pointer;	/*当鼠标移上去的时候变成手形*/
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div&gt;请输入信息：&lt;input type=&#8221;text&#8221; name=&#8221;username&#8221; /&gt;&lt;input type=&#8221;button&#8221; value=&#8221;确定&gt;&gt;&gt;&#8221; /&gt;&lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="332" height="42" src="/wp-content/uploads/2018/05/word-image-273.png" class="wp-image-305" srcset="/wp-content/uploads/2018/05/word-image-273.png 332w, /wp-content/uploads/2018/05/word-image-273-300x38.png 300w" sizes="(max-width: 332px) 100vw, 332px" /></p>
<h3>第四题</h3>
<p>
  分析页面结构如下：
</p>
<p><img loading="lazy" decoding="async" width="330" height="141" src="/wp-content/uploads/2018/05/word-image-274.png" class="wp-image-306" srcset="/wp-content/uploads/2018/05/word-image-274.png 330w, /wp-content/uploads/2018/05/word-image-274-300x128.png 300w" sizes="(max-width: 330px) 100vw, 330px" /></p>
<p>
  页面总宽度：8+206+500+8=722
</p>
<p>
  页面总高度：110+519=629
</p>
<p>
  难点：
</p>
<p><img loading="lazy" decoding="async" width="776" height="166" src="/wp-content/uploads/2018/05/word-image-275.png" class="wp-image-307" srcset="/wp-content/uploads/2018/05/word-image-275.png 776w, /wp-content/uploads/2018/05/word-image-275-300x64.png 300w, /wp-content/uploads/2018/05/word-image-275-768x164.png 768w" sizes="(max-width: 776px) 100vw, 776px" /></p>
<p>
  实现代码
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  #content{
</p>
<p>
  	width:722px;
</p>
<p>
  	height:629px;		/*为了#left,#right高度100%，指定父元素高度*/
</p>
<p>
  	overflow:hidden;	/*重新测定子元素的高度*/
</p>
<p>
  	margin:auto;		/*页面居中*/
</p>
<p>
  }
</p>
<p>
  #content #left,#content #right{
</p>
<p>
  	width:8px;
</p>
<p>
  	height:100%;	/*背景无法撑开盒子，所以要设定高度*/
</p>
<p>
  	background:url(images/line1.gif) repeat-y;
</p>
<p>
  	float:left;
</p>
<p>
  }
</p>
<p>
  #content #right{
</p>
<p>
  	background:url(images/line2.gif) repeat-y;
</p>
<p>
  }
</p>
<p>
  #content #center{
</p>
<p>
  	width:706px;
</p>
<p>
  	float:left;
</p>
<p>
  }
</p>
<p>
  #content #center&gt;div{
</p>
<p>
  	float:left;
</p>
<p>
  }
</p>
<p>
  #content #center #part1{
</p>
<p>
  	width:206px;
</p>
<p>
  	background-color:#ECDFBC;
</p>
<p>
  	/*text-align:center;*/	/*图片居中方法一*/
</p>
<p>
  }
</p>
<p>
  #part1 img{
</p>
<p>
  	margin:auto;		/*图片居中方法二*/
</p>
<p>
  	display:block;		/*设置块显示才能使用margin:auto来居中*/
</p>
<p>
  }
</p>
<p>
  #content #center #part4{
</p>
<p>
  	width:500px;
</p>
<p>
  	height:519px;
</p>
<p>
  	background:url(images/b-04.jpg);
</p>
<p>
  	padding-top:30px;
</p>
<p>
  }
</p>
<p>
  #part4 #wenzi{
</p>
<p>
  	width:90%;
</p>
<p>
  	font-size:14px;
</p>
<p>
  	font-family:&#8217;微软雅黑&#8217;;
</p>
<p>
  	margin:auto;
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div id=&#8221;content&#8221;&gt;
</p>
<p>
  	&lt;div id=&#8221;left&#8221;&gt;&lt;/div&gt;
</p>
<p>
      &lt;div id=&#8221;center&#8221;&gt;
</p>
<p>
      	&lt;div id=&#8221;part1&#8243;&gt;&lt;img src=&#8221;images/xihuzi2.gif&#8221; /&gt;&lt;/div&gt;
</p>
<p>
          &lt;div id=&#8221;part2&#8243;&gt;&lt;img src=&#8221;images/5.jpg&#8221; /&gt;&lt;/div&gt;
</p>
<p>
          &lt;div id=&#8221;part3&#8243;&gt;&lt;img src=&#8221;images/6.jpg&#8221; /&gt;&lt;/div&gt;
</p>
<p>
          &lt;div id=&#8221;part4&#8243;&gt;
</p>
<p>
          	&lt;div id=&#8221;wenzi&#8221;&gt;
</p>
<p>
          	  &lt;header style=&#8221;text-align:center&#8221;&gt;西湖春天简介 &lt;/header&gt;
</p>
<p>
          	  &lt;p&gt; 　　西湖春天是一家经旅游局批准，工商局登记注册，具有独立法人资格，并足额缴纳旅行社质量保证金的股份制企业。&lt;br /&gt;
</p>
<p>
          	    公司下设组团部、地接部、导游部、财务部、石浦门市部、丹城门市部等机构，承接旅游、休闲、度假、疗养、会务、商务考察等业务，公司管理高度重视人力资源的合理利用和开发，现已拥有一批长期从事旅游工作、精通各项旅游业务、重信誉、讲实效、高素质的管理人员和一支训练有素、经验丰富的导游队伍，并且已做到人人持证上岗。&lt;br /&gt;
</p>
<p>
          	    公司凭借象山旅游发展大好趋势，结合自身的规模优势，全力打造出&amp;ldquo;西湖春天&amp;rdquo;的旗帜品牌形象。目前，公司开发的公司网站，可以让您广泛的了解旅游信息。&lt;br /&gt;
</p>
<p>
          	    公司自成立以来，坚持以&amp;ldquo;质量就是生命&amp;rdquo;的座右铭，虚心接受客户的监督，不断完善管理机制，全体员工积极进取，开拓创新、奋发图强；公司连续获得2003年度《安全生产先进集体》、《浙江省旅游消费推荐单位》、《&amp;ldquo;安康杯&amp;rdquo;竞赛优胜企业》、2004年度《石浦首届旅游消费诚信单位》等荣誉称号。&lt;br /&gt;
</p>
<p>
          	    公司与国内众多旅行社建立了良好的义务关系，在主要城市已形成了客房、餐饮、交通等完善的旅游服务网络，&amp;ldquo;西湖春天&amp;rdquo;全体工作人员将以最合理的旅游线路，最实惠的价格，最细致的服务，热诚期待您的到来。&lt;/p&gt;
</p>
<p>
          	&lt;/div&gt;
</p>
<p>
        &lt;/div&gt;
</p>
<p>
      &lt;/div&gt;
</p>
<p>
      &lt;div id=&#8221;right&#8221;&gt;&lt;/div&gt;
</p>
<p>
  &lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="738" height="249" src="/wp-content/uploads/2018/05/word-image-276.png" class="wp-image-308" srcset="/wp-content/uploads/2018/05/word-image-276.png 738w, /wp-content/uploads/2018/05/word-image-276-300x101.png 300w" sizes="(max-width: 738px) 100vw, 738px" /></p>
<h2>圆角矩形</h2>
<p>
  区分上下左右四个点
</p>
<p><img loading="lazy" decoding="async" width="537" height="212" src="/wp-content/uploads/2018/05/word-image-277.png" class="wp-image-309" srcset="/wp-content/uploads/2018/05/word-image-277.png 537w, /wp-content/uploads/2018/05/word-image-277-300x118.png 300w" sizes="(max-width: 537px) 100vw, 537px" /></p>
<p>
  例题
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:100px;
</p>
<p>
  	height:100px;
</p>
<p>
  	border:#000 solid 1px;
</p>
<p>
  	margin:5px auto;
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(1){
</p>
<p>
  	border-radius:10px;		/*四个点的圆角半径都是10px*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(2){
</p>
<p>
  	border-radius:10px 20px;	/*上下10px  左右20px*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(3){
</p>
<p>
  	border-radius:10px 20px 30px;	/*上10px 左右20px 下30px*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(4){
</p>
<p>
  	border-radius:10px 20px 30px 40px;	/*上右下左*/
</p>
<p>
  }
</p>
<p>
  div:nth-of-type(5){
</p>
<p>
  	border-radius:50%;		/*正圆*/
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="153" height="542" src="/wp-content/uploads/2018/05/word-image-278.png" class="wp-image-310" srcset="/wp-content/uploads/2018/05/word-image-278.png 153w, /wp-content/uploads/2018/05/word-image-278-85x300.png 85w" sizes="(max-width: 153px) 100vw, 153px" /></p>
<p>
  圆角矩形的应用
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  body{
</p>
<p>
  	background:#999;
</p>
<p>
  }
</p>
<p>
  div{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	padding:10px;
</p>
<p>
  	border:#000 solid 1px;
</p>
<p>
  	border-radius:10px;
</p>
<p>
  	background-color:#CCC;
</p>
<p>
  }
</p>
<p>
  #face{
</p>
<p>
  	border-radius:50%;
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;/head&gt;
</p>
<p>
  &lt;body&gt;
</p>
<p>
  &lt;div&gt;&lt;img src=&#8221;images4/face.jpg&#8221; /&gt;&lt;/div&gt;
</p>
<p>
  &lt;img src=&#8221;images4/face.jpg&#8221; id=&#8221;face&#8221; /&gt;
</p>
<p><img loading="lazy" decoding="async" width="534" height="435" src="/wp-content/uploads/2018/05/word-image-279.png" class="wp-image-311" srcset="/wp-content/uploads/2018/05/word-image-279.png 534w, /wp-content/uploads/2018/05/word-image-279-300x244.png 300w" sizes="(max-width: 534px) 100vw, 534px" /></p>
<h2>2D转换</h2>
<p>
  在二维平面上桌变化，关键字：transform
</p>
<h3>2D转换之移动（translate）</h3>
<p>
  例题：让div居于屏幕的中间
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	background-color:#900;
</p>
<p>
  	position:absolute;
</p>
<p>
  	left:50%;
</p>
<p>
  	top:50%;
</p>
<p>
  	/*transform:translateX(-50%) translateY(-50%);*/
</p>
<p>
  	transform:translate(-50%,-50%)
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<h3>2D转换之旋转</h3>
<p><img loading="lazy" decoding="async" width="915" height="268" src="/wp-content/uploads/2018/05/word-image-280.png" class="wp-image-312" srcset="/wp-content/uploads/2018/05/word-image-280.png 915w, /wp-content/uploads/2018/05/word-image-280-300x88.png 300w, /wp-content/uploads/2018/05/word-image-280-768x225.png 768w" sizes="(max-width: 915px) 100vw, 915px" /></p>
<h3>2D转换之缩放（scale）</h3>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  img{
</p>
<p>
  	transform:scaleX(1.5);	/*x轴是原来的1.5倍*/
</p>
<p>
  	transform:scaleY(0.5);	/*y轴是原来的0.5倍*/
</p>
<p>
  	transform:scale(0.5,0.5);	/*同时设定x轴和y轴的缩放*/
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;
</p>
<h3>例题：三角做法</h3>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:300px;
</p>
<p>
  	height:30px;
</p>
<p>
  	border:#999 solid 1px;
</p>
<p>
  	margin:100px  auto;
</p>
<p>
  	position:relative;
</p>
<p>
  }
</p>
<p>
  div:after{
</p>
<p>
  	content:&#8221;;
</p>
<p>
  	width:12px;
</p>
<p>
  	height:12px;
</p>
<p>
  	display:inline-block;
</p>
<p>
  	position:absolute;
</p>
<p>
  	right:12px;
</p>
<p>
  	border-right:#999 solid 1px;
</p>
<p>
  	border-bottom:#999 solid 1px;
</p>
<p>
  	transform:rotate(45deg) translateY(10px);;
</p>
<p>
  }
</p>
<p>
  div:hover{
</p>
<p>
  	border:#00F solid 1px;
</p>
<p>
  }
</p>
<p>
  div:hover:after{  /*必须先写:hover，后写:after*/
</p>
<p>
  	border-right:#00F solid 1px;
</p>
<p>
  	border-bottom:#00F solid 1px;
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p><img loading="lazy" decoding="async" width="390" height="54" src="/wp-content/uploads/2018/05/word-image-281.png" class="wp-image-313" srcset="/wp-content/uploads/2018/05/word-image-281.png 390w, /wp-content/uploads/2018/05/word-image-281-300x42.png 300w" sizes="(max-width: 390px) 100vw, 390px" /></p>
<h2>过渡（transition）</h2>
<p><img loading="lazy" decoding="async" width="768" height="242" src="/wp-content/uploads/2018/05/word-image-282.png" class="wp-image-314" srcset="/wp-content/uploads/2018/05/word-image-282.png 768w, /wp-content/uploads/2018/05/word-image-282-300x95.png 300w" sizes="(max-width: 768px) 100vw, 768px" /></p>
<p>
  动画类型有：
</p>
<p><img loading="lazy" decoding="async" width="500" height="171" src="/wp-content/uploads/2018/05/word-image-283.png" class="wp-image-315" srcset="/wp-content/uploads/2018/05/word-image-283.png 500w, /wp-content/uploads/2018/05/word-image-283-300x103.png 300w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<p>
  例题（对象移动）：
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  div{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	background-color:#F00;
</p>
<p>
  	transition:all 1s ease;
</p>
<p>
  }
</p>
<p>
  div:hover{
</p>
<p>
  	transform:translateX(500px);
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;div&gt;&lt;/div&gt;
</p>
<p>
  例题：（头像旋转）
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  img{
</p>
<p>
  	border-radius:50%;
</p>
<p>
  	transition:all 0.5s ease;
</p>
<p>
  }
</p>
<p>
  img:hover{
</p>
<p>
  	transform:rotate(360deg);
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;img src=&#8221;images4/face.jpg&#8221; /&gt;
</p>
<p><img loading="lazy" decoding="async" width="447" height="223" src="/wp-content/uploads/2018/05/word-image-284.png" class="wp-image-316" srcset="/wp-content/uploads/2018/05/word-image-284.png 447w, /wp-content/uploads/2018/05/word-image-284-300x150.png 300w" sizes="(max-width: 447px) 100vw, 447px" /></p>
<p>
  例题：（头像变大）
</p>
<p>
  &lt;style type=&#8221;text/css&#8221;&gt;
</p>
<p>
  ul{
</p>
<p>
  	list-style-type:none;
</p>
<p>
  	margin:10px auto;
</p>
<p>
  	padding:0px;
</p>
<p>
  	overflow:hidden;
</p>
<p>
  }
</p>
<p>
  li{
</p>
<p>
  	width:200px;
</p>
<p>
  	height:200px;
</p>
<p>
  	border:#000 solid 1px;
</p>
<p>
  	margin:5px;
</p>
<p>
  	float:left;
</p>
<p>
  	overflow:hidden;
</p>
<p>
  }
</p>
<p>
  img{
</p>
<p>
  	transition:all 0.5s ease;
</p>
<p>
  }
</p>
<p>
  img:hover{
</p>
<p>
  	transform:scale(1.1);
</p>
<p>
  }
</p>
<p>
  &lt;/style&gt;
</p>
<p>
  &lt;ul&gt;
</p>
<p>
  	&lt;li&gt;&lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;&lt;/li&gt;
</p>
<p>
      &lt;li&gt;&lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;&lt;/li&gt;
</p>
<p>
      &lt;li&gt;&lt;img src=&#8221;images4/face.jpg&#8221; width=&#8221;200&#8243; height=&#8221;200&#8243; /&gt;&lt;/li&gt;
</p>
<p>
  &lt;/ul&gt;
</p>
<p><img loading="lazy" decoding="async" width="657" height="213" src="/wp-content/uploads/2018/05/word-image-285.png" class="wp-image-318" srcset="/wp-content/uploads/2018/05/word-image-285.png 657w, /wp-content/uploads/2018/05/word-image-285-300x97.png 300w" sizes="(max-width: 657px) 100vw, 657px" /></p>
<h2>Sublime介绍</h2>
<ol>
<li>
  生成HTML框架结构
</li>
</ol>
<p><img loading="lazy" decoding="async" width="668" height="52" src="/wp-content/uploads/2018/05/word-image-286.png" class="wp-image-319" srcset="/wp-content/uploads/2018/05/word-image-286.png 668w, /wp-content/uploads/2018/05/word-image-286-300x23.png 300w" sizes="(max-width: 668px) 100vw, 668px" /><br />
<img loading="lazy" decoding="async" width="543" height="56" src="/wp-content/uploads/2018/05/word-image-287.png" class="wp-image-320" srcset="/wp-content/uploads/2018/05/word-image-287.png 543w, /wp-content/uploads/2018/05/word-image-287-300x31.png 300w" sizes="(max-width: 543px) 100vw, 543px" /><br />
<img loading="lazy" decoding="async" width="519" height="59" src="/wp-content/uploads/2018/05/word-image-288.png" class="wp-image-321" srcset="/wp-content/uploads/2018/05/word-image-288.png 519w, /wp-content/uploads/2018/05/word-image-288-300x34.png 300w" sizes="(max-width: 519px) 100vw, 519px" /><br />
<img loading="lazy" decoding="async" width="398" height="54" src="/wp-content/uploads/2018/05/word-image-289.png" class="wp-image-322" srcset="/wp-content/uploads/2018/05/word-image-289.png 398w, /wp-content/uploads/2018/05/word-image-289-300x41.png 300w" sizes="(max-width: 398px) 100vw, 398px" /></p>
<p>
  按tab键或ctrl+E生成
</p>
<p>
  注意要将页面保存再按快捷键生成
</p>
<p>
  常用的其他技巧
</p>
<p><img loading="lazy" decoding="async" width="439" height="28" src="/wp-content/uploads/2018/05/word-image-290.png" class="wp-image-323" srcset="/wp-content/uploads/2018/05/word-image-290.png 439w, /wp-content/uploads/2018/05/word-image-290-300x19.png 300w" sizes="(max-width: 439px) 100vw, 439px" /><br />
<img loading="lazy" decoding="async" width="745" height="30" src="/wp-content/uploads/2018/05/word-image-291.png" class="wp-image-324" srcset="/wp-content/uploads/2018/05/word-image-291.png 745w, /wp-content/uploads/2018/05/word-image-291-300x12.png 300w" sizes="(max-width: 745px) 100vw, 745px" /><br />
<img loading="lazy" decoding="async" width="751" height="118" src="/wp-content/uploads/2018/05/word-image-292.png" class="wp-image-325" srcset="/wp-content/uploads/2018/05/word-image-292.png 751w, /wp-content/uploads/2018/05/word-image-292-300x47.png 300w" sizes="(max-width: 751px) 100vw, 751px" /></p>
<h2>什么是JavaScript</h2>
<ol>
<li>
  JavaScript是一种解释型的，基于对象的脚本语言。
</li>
<li>
  Javascript（JS）可以运行在客户端，也可以运行在服务器端。默认是运行在客户端。
</li>
</ol>
<p><img loading="lazy" decoding="async" width="882" height="44" src="/wp-content/uploads/2018/05/word-image-293.png" class="wp-image-326" srcset="/wp-content/uploads/2018/05/word-image-293.png 882w, /wp-content/uploads/2018/05/word-image-293-300x15.png 300w, /wp-content/uploads/2018/05/word-image-293-768x38.png 768w" sizes="(max-width: 882px) 100vw, 882px" /></p>
<p>
  script：脚本
</p>
<h3>页面的执行过程</h3>
<p><img loading="lazy" decoding="async" width="742" height="85" src="/wp-content/uploads/2018/05/word-image-294.png" class="wp-image-327" srcset="/wp-content/uploads/2018/05/word-image-294.png 742w, /wp-content/uploads/2018/05/word-image-294-300x34.png 300w" sizes="(max-width: 742px) 100vw, 742px" /></p>
<h3>解释型与编译型</h3>
<p><img loading="lazy" decoding="async" width="786" height="138" src="/wp-content/uploads/2018/05/word-image-295.png" class="wp-image-328" srcset="/wp-content/uploads/2018/05/word-image-295.png 786w, /wp-content/uploads/2018/05/word-image-295-300x53.png 300w, /wp-content/uploads/2018/05/word-image-295-768x135.png 768w" sizes="(max-width: 786px) 100vw, 786px" /></p>
<p>
  要看一门语言是否是解释型还是编译型，主要看是否会生成中间文件。
</p>
<p>
  运行在客户端的语言都是解释型
</p>
<p>
  运行在服务器端的语言都是编译型。
</p>
<h3>脚本语言</h3>
<p>
  脚本语言也是语言一种，脚本语言的特点要结合其他语言一起实现功能。
</p>
<h2>JavaScript的应用场景</h2>
<ol>
<li>
  客户端特效
</li>
<li>
  验证表单
</li>
</ol>
<h2>变量</h2>
<p>
  变量就是一个会变的量
</p>
<p>
  x+1=2		x=1
</p>
<p>
  x+10=20	x=10
</p>
<p><img loading="lazy" decoding="async" width="452" height="83" src="/wp-content/uploads/2018/05/word-image-296.png" class="wp-image-329" srcset="/wp-content/uploads/2018/05/word-image-296.png 452w, /wp-content/uploads/2018/05/word-image-296-300x55.png 300w" sizes="(max-width: 452px) 100vw, 452px" /></p>
<p>
  变量就是内存中的一段空间
</p>
<h2>变量的命名规则</h2>
<ol>
<li>
  变量以字母、下划线，$开头，后面跟的在字母、数字、下划线，$
</li>
<li>
  关键字不能做变量名
</li>
<li>
  变量名区分大小写（aa和Aa是两个空间）
</li>
</ol>
<p>
  下列变量名是否合法
</p>
<ol>
<li>
  aa		合法
</li>
<li>
  a1		合法
</li>
<li>
  1a		不合法（不能以数字开头）
</li>
<li>
  _1a		合法
</li>
<li>
  a-1		不合法
</li>
<li>
  a%		不合法
</li>
<li>
  x		合法
</li>
<li>
  do		不合法（关键字不可以做变量名 if for else case …）
</li>
</ol>
<h2>声明变量</h2>
<p>
  通过var关键字来声明变量。
</p>
<p>
  声明变量有两种方法
</p>
<ol>
<li>
  显式声明：通过var关键字声明后使用
</li>
<li>
  隐式声明：不声明，直接使用
</li>
</ol>
<p><img loading="lazy" decoding="async" width="962" height="138" src="/wp-content/uploads/2018/05/word-image-297.png" class="wp-image-330" srcset="/wp-content/uploads/2018/05/word-image-297.png 962w, /wp-content/uploads/2018/05/word-image-297-300x43.png 300w, /wp-content/uploads/2018/05/word-image-297-768x110.png 768w" sizes="(max-width: 962px) 100vw, 962px" /></p>
<h2>输出的方法</h2>
<p>
  1、document.write(‘锄禾日当午’);	//输出在浏览器上
</p>
<p><img loading="lazy" decoding="async" width="533" height="43" src="/wp-content/uploads/2018/05/word-image-298.png" class="wp-image-331" srcset="/wp-content/uploads/2018/05/word-image-298.png 533w, /wp-content/uploads/2018/05/word-image-298-300x24.png 300w" sizes="(max-width: 533px) 100vw, 533px" /></p>
<p>
  2、alert(‘锄禾日当午’);		//弹出一个对话框（就是window.alert()）
</p>
<p><img loading="lazy" decoding="async" width="181" height="188" src="/wp-content/uploads/2018/05/word-image-299.png" class="wp-image-332" /></p>
<p>
  3、prompt()：弹出一个用于输入的对话框
</p>
<p><img loading="lazy" decoding="async" width="930" height="153" src="/wp-content/uploads/2018/05/word-image-300.png" class="wp-image-333" srcset="/wp-content/uploads/2018/05/word-image-300.png 930w, /wp-content/uploads/2018/05/word-image-300-300x49.png 300w, /wp-content/uploads/2018/05/word-image-300-768x126.png 768w" sizes="(max-width: 930px) 100vw, 930px" /></p>
<p>
  4、弹出一个对话框，有“确定”和“取消”按钮
</p>
<p><img loading="lazy" decoding="async" width="583" height="174" src="/wp-content/uploads/2018/05/word-image-301.png" class="wp-image-334" srcset="/wp-content/uploads/2018/05/word-image-301.png 583w, /wp-content/uploads/2018/05/word-image-301-300x90.png 300w" sizes="(max-width: 583px) 100vw, 583px" /></p>
<p>
  5、console.log(‘锄禾日当午’)：在控制台输出，用于代码调试
</p>
<p><img loading="lazy" decoding="async" width="556" height="103" src="/wp-content/uploads/2018/05/word-image-302.png" class="wp-image-335" srcset="/wp-content/uploads/2018/05/word-image-302.png 556w, /wp-content/uploads/2018/05/word-image-302-300x56.png 300w" sizes="(max-width: 556px) 100vw, 556px" /></p>
<p>
  几个需要记忆的单词
</p>
<ol>
<li>
  window：窗口
</li>
<li>
  document：文档
</li>
<li>
  console：控制台
</li>
<li>
  log：日志
</li>
</ol>
<h2>变量数据类型</h2>
<p>
  变量的数据类型取决于变量中存储的值。如果存放的是数字就是数字型，存放字符串就是字符串型。
</p>
<p><img loading="lazy" decoding="async" width="521" height="323" src="/wp-content/uploads/2018/05/word-image-303.png" class="wp-image-336" srcset="/wp-content/uploads/2018/05/word-image-303.png 521w, /wp-content/uploads/2018/05/word-image-303-300x186.png 300w" sizes="(max-width: 521px) 100vw, 521px" /></p>
<p>
  基本数据类型
</p>
<table>
<tr>
<td>
<p>
  数据类型
</p>
</td>
<td>
<p>
  例题
</p>
</td>
</tr>
<tr>
<td>
<p>
  数字型（Number）
</p>
</td>
<td>
<p>
  10   10.5
</p>
</td>
</tr>
<tr>
<td>
<p>
  字符串型（String）
</p>
</td>
<td>
<p>
  “锄禾日当午”   ‘锄禾日当午’
</p>
</td>
</tr>
<tr>
<td>
<p>
  布尔型（Boolean）
</p>
</td>
<td>
<p>
  true（真）  false（假）
</p>
</td>
</tr>
</table>
<p>
  特殊数据类型
</p>
<table>
<tr>
<td>
<p>
  Null（空）
</p>
</td>
<td>
<p>
  空型
</p>
</td>
</tr>
<tr>
<td>
<p>
  Undefined（未定义型）
</p>
</td>
<td>
<p>
  变量声明后当没有赋值，这个变量是未定义型
</p>
</td>
</tr>
</table>
<p>
  typeof：显示变量的数据类型
</p>
<p><img loading="lazy" decoding="async" width="623" height="97" src="/wp-content/uploads/2018/05/word-image-304.png" class="wp-image-337" srcset="/wp-content/uploads/2018/05/word-image-304.png 623w, /wp-content/uploads/2018/05/word-image-304-300x47.png 300w" sizes="(max-width: 623px) 100vw, 623px" /><br />
<img loading="lazy" decoding="async" width="535" height="90" src="/wp-content/uploads/2018/05/word-image-305.png" class="wp-image-338" srcset="/wp-content/uploads/2018/05/word-image-305.png 535w, /wp-content/uploads/2018/05/word-image-305-300x50.png 300w" sizes="(max-width: 535px) 100vw, 535px" /><br />
<img loading="lazy" decoding="async" width="509" height="89" src="/wp-content/uploads/2018/05/word-image-306.png" class="wp-image-339" srcset="/wp-content/uploads/2018/05/word-image-306.png 509w, /wp-content/uploads/2018/05/word-image-306-300x52.png 300w" sizes="(max-width: 509px) 100vw, 509px" /><br />
<img loading="lazy" decoding="async" width="517" height="85" src="/wp-content/uploads/2018/05/word-image-307.png" class="wp-image-340" srcset="/wp-content/uploads/2018/05/word-image-307.png 517w, /wp-content/uploads/2018/05/word-image-307-300x49.png 300w" sizes="(max-width: 517px) 100vw, 517px" /></p>
<p>
  多学一招：JS支持八进制，十进制，十六进制。
</p>
<p><img loading="lazy" decoding="async" width="562" height="189" src="/wp-content/uploads/2018/05/word-image-308.png" class="wp-image-341" srcset="/wp-content/uploads/2018/05/word-image-308.png 562w, /wp-content/uploads/2018/05/word-image-308-300x101.png 300w" sizes="(max-width: 562px) 100vw, 562px" /></p>
<p>
  多学一招：JS支持无穷大
</p>
<p><img loading="lazy" decoding="async" width="759" height="37" src="/wp-content/uploads/2018/05/word-image-309.png" class="wp-image-342" srcset="/wp-content/uploads/2018/05/word-image-309.png 759w, /wp-content/uploads/2018/05/word-image-309-300x15.png 300w" sizes="(max-width: 759px) 100vw, 759px" /></p>
<h2>JavaScript的基本语法规则</h2>
<ol>
<li>
  解释型语言，可以随时运行
</li>
<li>
  大小写敏感
</li>
<li>
  弱类型语言（变量的数据类型取决于存放的数据）
</li>
<li>
  分号表示语句的结束（也可以使用换行替代分号，但不推荐）
</li>
</ol>
<h2>注释</h2>
<ol>
<li>
  单行注释：			//
</li>
<li>
  多行注释：			/*    */
</li>
</ol>
<h2>运算符</h2>
<h3>赋值运算符（=）</h3>
<p>
  a=5：将5付给a
</p>
<h3>算术运算符</h3>
<table>
<tr>
<td>
<p><strong>一元运算符</strong>
</p>
</td>
<td>
<p><strong>描述</strong>
</p>
</td>
<td>
<p><strong>二元运算符</strong>
</p>
</td>
<td>
<p><strong>描述</strong>
</p>
</td>
</tr>
<tr>
<td>
<p>
  &#8211;
</p>
</td>
<td>
<p>
  负号
</p>
</td>
<td>
<p>
  +
</p>
</td>
<td>
<p>
  加
</p>
</td>
</tr>
<tr>
<td>
<p>
  ++
</p>
</td>
<td>
<p>
  自增
</p>
</td>
<td>
<p>
  &#8211;
</p>
</td>
<td>
<p>
  减
</p>
</td>
</tr>
<tr>
<td>
<p>
  &#8212;
</p>
</td>
<td>
<p>
  自减
</p>
</td>
<td>
<p>
  *
</p>
</td>
<td>
<p>
  乘
</p>
</td>
</tr>
<tr>
<td></td>
<td></td>
<td>
<p>
  /
</p>
</td>
<td>
<p>
  除
</p>
</td>
</tr>
<tr>
<td></td>
<td></td>
<td>
<p>
  %
</p>
</td>
<td>
<p>
  模（取模就是取余数）
</p>
</td>
</tr>
</table>
<p>
  注意：
</p>
<p>
  1、“+”除了做数字运算，还可以做字符串相加，字符串相加就是字符串相连。
</p>
<p>
  2、字符串和数字相加，将数字转成字符串型再相连
</p>
<p>
  3、字符串只能做加法，不能做减法，不能做乘法，不能做除法。
</p>
<p><img loading="lazy" decoding="async" width="1035" height="162" src="/wp-content/uploads/2018/05/word-image-310.png" class="wp-image-343" srcset="/wp-content/uploads/2018/05/word-image-310.png 1035w, /wp-content/uploads/2018/05/word-image-310-300x47.png 300w, /wp-content/uploads/2018/05/word-image-310-768x120.png 768w, /wp-content/uploads/2018/05/word-image-310-1024x160.png 1024w" sizes="(max-width: 1035px) 100vw, 1035px" /></p>
<p>
  4、取模就是取余数
</p>
<p><img loading="lazy" decoding="async" width="608" height="139" src="/wp-content/uploads/2018/05/word-image-311.png" class="wp-image-344" srcset="/wp-content/uploads/2018/05/word-image-311.png 608w, /wp-content/uploads/2018/05/word-image-311-300x69.png 300w" sizes="(max-width: 608px) 100vw, 608px" /></p>
<p>
  自增
</p>
<p>
  ++前置：先自增，后运行
</p>
<p>
  ++后置：后自增，先运算
</p>
<p><img loading="lazy" decoding="async" width="736" height="92" src="/wp-content/uploads/2018/05/word-image-312.png" class="wp-image-345" srcset="/wp-content/uploads/2018/05/word-image-312.png 736w, /wp-content/uploads/2018/05/word-image-312-300x38.png 300w" sizes="(max-width: 736px) 100vw, 736px" /><br />
<img loading="lazy" decoding="async" width="742" height="99" src="/wp-content/uploads/2018/05/word-image-313.png" class="wp-image-346" srcset="/wp-content/uploads/2018/05/word-image-313.png 742w, /wp-content/uploads/2018/05/word-image-313-300x40.png 300w" sizes="(max-width: 742px) 100vw, 742px" /><br />
<img loading="lazy" decoding="async" width="581" height="119" src="/wp-content/uploads/2018/05/word-image-314.png" class="wp-image-347" srcset="/wp-content/uploads/2018/05/word-image-314.png 581w, /wp-content/uploads/2018/05/word-image-314-300x61.png 300w" sizes="(max-width: 581px) 100vw, 581px" /><br />
<img loading="lazy" decoding="async" width="1055" height="71" src="/wp-content/uploads/2018/05/word-image-315.png" class="wp-image-348" srcset="/wp-content/uploads/2018/05/word-image-315.png 1055w, /wp-content/uploads/2018/05/word-image-315-300x20.png 300w, /wp-content/uploads/2018/05/word-image-315-768x52.png 768w, /wp-content/uploads/2018/05/word-image-315-1024x69.png 1024w" sizes="(max-width: 1055px) 100vw, 1055px" /><br />
<img loading="lazy" decoding="async" width="581" height="119" src="/wp-content/uploads/2018/05/word-image-316.png" class="wp-image-349" srcset="/wp-content/uploads/2018/05/word-image-316.png 581w, /wp-content/uploads/2018/05/word-image-316-300x61.png 300w" sizes="(max-width: 581px) 100vw, 581px" /></p>
<h2>作业：</h2>
<ol>
<li>
  实现旋转的效果
</li>
</ol>
<p><img loading="lazy" decoding="async" width="101" height="100" src="/wp-content/uploads/2018/05/word-image-317.png" class="wp-image-350" /></p>
]]></content:encoded>
					
					<wfw:commentRss>/%e5%89%8d%e7%ab%af%e6%8a%80%e6%9c%af/303.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
